@model System.Data.DataTable;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var locations = ViewBag.Locations as List<SelectListItem>;
    var roles = ViewBag.Roles as List<SelectListItem>;
}


<div class="col-md-12 my-4">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title"> </h5>
            @if (TempData["ErrorMessages"] != null)
            {
                var errorMessages = ((string[])TempData["ErrorMessages"]).ToList();
                @foreach (var message in errorMessages)

                {
                    <div class="alert alert-primary" id="NotificationDiv" runat="server" role="alert">
                        <span class="fe fe-alert-circle fe-16 mr-2" id="Notif   ication" runat="server">
                            @message
                        </span>
                    </div>
                }

            }

            <table id="SuperAdminTable" class="table table-bordered table-hover mb-0">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>UserName</th>
                        <th>Role</th>
                        <th>Process</th>
                        <th>Location</th>
                        <th>Active_Status</th>
                        <th>Created_Date</th>
                        <th>Activate</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (System.Data.DataRow row in Model.Rows)
                    {
                        <tr>
                            <td>@row["ID"]</td>
                            <td>@row["username"]</td>
                            <td>@row["Role"]</td>
                            <td>@row["Process"]</td>
                            <td>@row["Location"]</td>
                            <td>@(row["Active_Status"].ToString() == "1" ? "Yes" : "No")</td>
                            <td>@row["Created_Date"]</td>
                            <td>
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="chk_@row["ID"]"
                                    @(row["Active_Status"].ToString() == "1" ? "checked" : "")
                                           onclick="updateStatus('@row["ID"]', this.checked)" />
                                    <label class="custom-control-label" for="chk_@row["ID"]"></label>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
</div>
<form action="@Url.Action("InsertUsers", "Module")" method="post">
    <div class="col-md-12 my-4">
        <div class="card shadow">
            <div class="card-body">
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="LocationDropDown">Location Name</label>
                        @Html.DropDownList(
                                 "Location_ID",
                                 (List<SelectListItem>)ViewBag.Locations,

                                 new { @class = "custom-select", id = "Location_ID", disabled = "disabled" }
                                 )
                    </div>
                    <div class="form-group col-md-6">
                        <label for="ProgramID">Program Name</label>
                        @Html.DropDownList(
                                 "ProgramID",
                                 (List<SelectListItem>)ViewBag.ProcessList,
                                 "Select Program",
                                 new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()" }
                                 )

                    </div>
                    <div class="form-group col-md-6">
                        <label for="SUBProgramID">Sub Program Name</label>
                        <select name="SUBProgramID" id="SUBProgramID" class="custom-select">
                            <option value="">Select Process</option>
                        </select>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="Role_ID">Role</label>
                        @Html.DropDownList(
                                 "Role_ID",
                                 (List<SelectListItem>)ViewBag.Role,
                                 "Select Role",
                                 new { @class = "custom-select", id = "Role_ID" }
                                 )
                    </div>
                    <div class="form-group col-md-6">
                        <label for="txtUsername">User ID</label>
                        <input type="text"
                               name="UserID"
                               id="txtUsername"
                               autocomplete="off"
                               class="form-control"
                               value="____"
                               oninput="restrictBackspace(event)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="txtPassword">Password</label>
                        <input type="password" name="Password" id="txtPassword" autocomplete="off" class="form-control" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="txtUserName">User Name</label>
                        <input type="text" name="UserName" id="txtUserName" autocomplete="off" class="form-control" />
                    </div>

                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label id="lblemail">Email</label>
                            <input type="email" id="txtemail" name="Email" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="txtPhone">Phone Number</label>
                        <input type="number"
                               name="PhoneNumber"
                               id="txtPhone"
                               oninput="validatePhone(this)"
                               class="form-control" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-2 my-4">
        <div class="card-body d-flex justify-content-center align-items-center">
            <button type="submit" class="btn btn-primary">Create User</button>
        </div>

        <div id="errorMessages" style="color: red;"></div>

    </div>
</form>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        const locationDropdown = document.getElementById('Location_ID');
        if (locationDropdown) {
            const Location = locationDropdown.value;
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("HandleBackspace", "Admin")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        var newUsername = response.newUsername;
                        document.getElementById('txtUsername').value = newUsername;
                    },
                    error: function (xhr, status, error) {
                        console.error('Error: ' + error);
                    }
                });
        } else {
            console.error("Location_ID dropdown not found!");
        }
    });
</script>
<script>
    
        function validatePhone(input) {
            input.value = input.value.replace(/\D/g, '');
            if (input.value.length > 10) {
                input.value = input.value.substring(0, 10);
                alert("Phone number can only be 10 digits.");
            }
        }
        function restrictBackspace(event) {
            var textbox = document.getElementById('txtUsername');
            var length = textbox.value.length;
            if (length < 4) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("HandleBackspace", "Admin")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        var newUsername = response.newUsername;
                        document.getElementById('txtUsername').value = newUsername;
                    },
                    error: function (xhr, status, error) {
                        console.error('Error: ' + error);
                    }
                });
            }
        }
        function onLocationChange() {


        }
        function onProgramChange() {
            var programId = document.getElementById("ProgramID").value;
            $.ajax({
                type: "POST",
                data: JSON.stringify({ id: programId }),

                url: "/Admin/GetSUBProcessList",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {

                    var dropdown = $('#SUBProgramID');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Process</option>');
                    response.proces.forEach(function (item) {
                        dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });

        }

        function updateStatus(id, isActive) {


            $.ajax({
                type: "POST",
                url: "/Admin/ActiveDeActiveUser",
                data: JSON.stringify({ id: id, isActive: isActive }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    location.reload;
                    console.log("Update successful: " + response.d);
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });
        }



        document.querySelector("form").addEventListener("submit", function (event) {
            const errors = [];
            const location = document.getElementById("Location_ID").value;
            const program = document.getElementById("ProgramID").value;
            const subProgram = document.getElementById("SUBProgramID").value;
            const role = document.getElementById("Role_ID").value;
            const userId = document.getElementById("txtUsername").value;
            const password = document.getElementById("txtPassword").value;
            const userName = document.getElementById("txtUserName").value;
            const phoneNumber = document.getElementById("txtPhone").value;
        

        const Email = document.getElementById("txtemail").value;

            if (!location || location === "Select Location") {
                errors.push("Please select a valid location.");
            }
        if (!Email || Email === "") {
            errors.push("Please select a valid Email.");
        }

            if (!program || program === "") {
                errors.push("Please select a valid program.");
            }


            if (!role || role === "Select Role") {
                errors.push("Please select a valid role.");
            }


            if (!userId || userId === "____") {
                errors.push("User ID cannot be empty or default value.");
            }


            if (!password || password.length < 6) {
                errors.push("Password must be at least 6 characters long.");
            }


            if (!userName) {
                errors.push("User Name cannot be empty.");
            }


            if (!phoneNumber || phoneNumber.length !== 10 || !/^\d+$/.test(phoneNumber)) {
                errors.push("Phone Number must be exactly 10 digits.");
            }


            if (errors.length > 0) {
                event.preventDefault();
                alert(errors.join("\n"));
            }
        });


    function restrictBackspace(event) {
        if (event.target.value === "____" && event.inputType === "deleteContentBackward") {
            event.target.value = "____";
        }
    }


    function validatePhone(input) {
        input.value = input.value.replace(/[^0-9]/g, "");
        if (input.value.length > 10) {
            input.value = input.value.slice(0, 10);
        }
    }


</script>