@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model List<ReviewDataModel>





<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Coaching </strong>
        <div>
            <span class="badge badge-success" style="background-color: #d4edda; color: #155724; padding: 5px 10px; border-radius: 5px;">On-Going</span>
            <span class="badge badge-warning" style="background-color: #fff3cd; color: #856404; padding: 5px 10px; border-radius: 5px;">Extended</span>
            <span class="badge badge-danger" style="background-color: #f8d7da; color: #721c24; padding: 5px 10px; border-radius: 5px;">PIP</span>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>AgentID</th>
                    <th>Process</th>
                    <th>SubProcess</th>
                    <th>1st Review</th>
                    <th>Comment 1</th>
                    <th>2nd Review</th>
                    <th>Comment 2</th>
                    <th>3rd Review</th>
                    <th>Comment 3</th>
                    <th>4th Review</th>
                    <th>Comment 4</th>
                    <th>5th Review</th>
                    <th>Comment 5</th>
                    <th>6th Review</th>
                    <th>Comment 6</th>
                    <th>View</th>

                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
                {
                    string rowClass = "";
                    if (item.CoachingStatus == "PIP")
                    {
                        rowClass = "table-danger"; // Red
                    }
                    else if (item.CoachingStatus == "Closed")
                    {
                        rowClass = "table-success"; // Green
                    }
                    else if (item.CoachingStatus == "Extended")
                    {
                        rowClass = "table-warning"; // Yellow
                    }
                    else if (item.CoachingStatus == "NotExtended")
                    {
                        rowClass = "table-success"; // Yellow
                    }
                    bool showViewButton = rowClass != "table-danger" &&  !string.IsNullOrEmpty(item.AgentID?.ToString()) &&
                    !string.IsNullOrEmpty(item.ProcessName) &&
                    !string.IsNullOrEmpty(item.SubProcess) &&
                    !string.IsNullOrEmpty(item.FirstReview?.ToString()) &&
                    !string.IsNullOrEmpty(item.Comment1) &&
                    !string.IsNullOrEmpty(item.SecondReview?.ToString()) &&
                    !string.IsNullOrEmpty(item.Comment2) &&
                    !string.IsNullOrEmpty(item.ThirdReview?.ToString()) &&
                    !string.IsNullOrEmpty(item.Comment3) &&
                    !string.IsNullOrEmpty(item.FourthReview?.ToString()) &&
                    !string.IsNullOrEmpty(item.Comment4);
                    <tr class="@rowClass">
                        <td>@item.AgentID</td>
                        <td>@item.ProcessName</td>
                        <td>@item.SubProcess</td>
                        <td>@item.FirstReview</td>
                        <td>@item.Comment1</td>
                        <td>@item.SecondReview</td>
                        <td>@item.Comment2</td>

                        <td>@item.ThirdReview</td>

                        <td>@item.Comment3</td>

                        <td>@item.FourthReview</td>

                        <td>@item.Comment4</td>

                        <td>@item.FifthReview</td>

                        <td>@item.Comment5</td>
                        <td>@item.SixReview</td>
                        <td>@item.Comment6</td>
                        <td>
                            @if (showViewButton)
                            {
                            <button onclick="viewAgent(this)" class="btn btn-primary"
                                    data-agentid="@item.AgentID"
                                    data-process="@item.ProcessName"
                                    data-subprocess="@item.SubProcess">
                                View
                            </button>
                            }
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>

</div>

<div class="col-md-12 my-4" id="AuditDiv">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title"></h5>
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="ProgramID">Select Program</label> <span style="color:red">*</span>
                    @Html.DropDownList("ProgramID", (List<SelectListItem>)ViewBag.Process, "Select Program", new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()", required = "required" })
                </div>
                <div class="form-group col-md-6">
                    <label for="SUBProgramID">Sub Program Name</label> <span style="color:red">*</span>
                    <select name="SUBProgramID" id="SUBProgramID" class="custom-select" onchange="onSubProgramChange()" required>
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label for="AgentID">Select Agent</label> <span style="color:red">*</span>
                    <select name="AgentID" id="AgentID" class="custom-select" onchange="onAgentChange()" required>
                        <option value="">Select Agent</option>
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label for="QaManager">Coaching Initiated By</label> <span style="color:red">*</span>
                    <select name="QaManager" id="QaManager" class="custom-select" required>
                        <option value="">Select Agent</option>
                    </select>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4" id="MatrixList" style="display:none">
    <div class="card-header">
        <strong class="card-title"></strong>
    </div>
    <div class="card-body">
        <div class="row">
            <table id="MatrixList" class="table table-bordered">
                <thead>
                    <tr>
                        <th>Metrics</th>
                        <th>Target/Goal</th>
                        <th>Actual Performance</th>
                        <th>Select Metric</th>


                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>

<div class="card shadow mb-4" id="MatrixList2" style="display:none">
    <div class="card-header">
        <strong class="card-title">Review Dates</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="form-group col-md-3">
                <input type="hidden" id="LastDate" name="LastDate" value="" />

                <label for="review1" id="labelReview1" style="display:none">1st Review</label>
                <input type="date" class="form-control" style="display:none" id="review1" name="review1" />
            </div>
            <div class="form-group col-md-3">
                <label for="review2" id="labelReview2" style="display:none">2nd Review</label>
                <input type="date" class="form-control" style="display:none" id="review2" name="review2" />
            </div>
            <div class="form-group col-md-3">
                <label for="review3" id="labelReview3" style="display:none">3rd Review</label>
                <input type="date" class="form-control" style="display:none" id="review3" name="review3" />
            </div>
            <div class="form-group col-md-3">
                <label for="review4" id="labelReview4" style="display:none">4th Review</label>
                <input type="date" class="form-control" style="display:none" id="review4" name="review4" />
            </div>
            <div class="form-group col-md-3">
                <label for="review5" id="labelReview5" style="display:none">5th Review</label>
                <input type="date" class="form-control" style="display:none" id="review5" name="review5" />
            </div>
            <div class="form-group col-md-3">
                <label for="review6" id="labelReview6" style="display:none">6th Review</label>
                <input type="date" class="form-control" style="display:none" id="review6" name="review6" />
            </div>
        </div>
    </div>
</div>
<div class="text-center mb-4">
    <button class="btn btn-primary" id="submite" style="display:none" onclick="submitForm()">Submit</button>
    <button class="btn btn-primary" id="SubmiteExted" style="display:none" onclick="submitFormExtended()">Submit</button>
</div>

<script>
         let selectedAgentID = "";
        let selectedProcess = "";
        let selectedSubProcess = "";

                     



        function clearAllFields() {
        // Reset dropdowns
        $('#ProgramID').val('');
        $('#SUBProgramID').empty().append('<option value="">Select Sub Process</option>');
        $('#AgentID').empty().append('<option value="">Select Agent</option>');
        $('#QaManager').empty().append('<option value="">Select Agent</option>');

        // Reset review dates
        $('#review1').val('');
        $('#review2').val('');
        $('#review3').val('');
        $('#review4').val('');
         $('#labelReview5, #review5').hide();
        $('#labelReview6, #review6').hide();
         $('#MatrixList').hide();
        $('#MatrixList2').hide();
        // Clear matrix table
        const tableBody = document.querySelector("#MatrixList table tbody");
        if (tableBody) {
            tableBody.innerHTML = '';
        }
    }
        function parseDate(input, label) {
        const date = new Date(input);
        if (isNaN(date)) {
            alert(`Please enter a valid date for ${label}`);
            throw new Error(`Invalid date for ${label}`);
        }
        return date;
    }

    // Get today's date with time reset
    function getToday() {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        return today;
    }

    // Slot definitions
    const slots = [
        { start: 1, end: 7 },
        { start: 8, end: 14 },
        { start: 15, end: 21 },
        { start: 22, end: 31 }
    ];

    // Determine which slot a date falls into (0-based index)
    function getSlot(date) {
        const day = date.getDate();
        for (let i = 0; i < slots.length; i++) {
            if (day >= slots[i].start && day <= slots[i].end) return i;
        }
        return -1;
    }

    // Get the expected date for the next slot (moves to next month if needed)
    function getNextSlotDate(baseDate, targetSlotIndex) {
        const slotIndex = targetSlotIndex % 4;
        const monthOffset = Math.floor(targetSlotIndex / 4);
        const slot = slots[slotIndex];

        let nextMonth = new Date(baseDate);
        nextMonth.setMonth(baseDate.getMonth() + monthOffset);

        const maxDay = new Date(nextMonth.getFullYear(), nextMonth.getMonth() + 1, 0).getDate();
        const day = Math.min(slot.start, maxDay);
        return new Date(nextMonth.getFullYear(), nextMonth.getMonth(), day);
    }

     async function submitForm() {
        // Validation
        const programId = $('#ProgramID').val();
        const subProgramId = $('#SUBProgramID').val();
        const agentId = $('#AgentID').val();
        const qaManagerId = $('#QaManager').val();
        // const review1 = $('#review1').val();
        // const review2 = $('#review2').val();
        // const review3 = $('#review3').val();
        // const review4 = $('#review4').val();
        const review5 = $('#review5').val();
        const review6 = $('#review6').val();
   


          const review1 = parseDate($('#review1').val(), 'Review 1');
        const review2 = parseDate($('#review2').val(), 'Review 2');
        const review3 = parseDate($('#review3').val(), 'Review 3');
        const review4 = parseDate($('#review4').val(), 'Review 4');

        const today = getToday();

        if (review1 <= today) {
            alert('Review 1 must be a future date.');
            return;
        }

        const baseSlot = getSlot(review1);
        if (baseSlot === -1) {
            alert("Review 1 is not in a valid slot.");
            return;
        }

        const expectedDates = [
            review1,
            getNextSlotDate(review1, baseSlot + 1),
            getNextSlotDate(review1, baseSlot + 2),
            getNextSlotDate(review1, baseSlot + 3)
        ];

        const actualDates = [review1, review2, review3, review4];

        for (let i = 1; i < actualDates.length; i++) {
            const actual = actualDates[i];
            const expected = expectedDates[i];

            const actualSlot = getSlot(actual);
            const expectedSlot = getSlot(expected);

            if (
                actual.getMonth() !== expected.getMonth() ||
                actual.getFullYear() !== expected.getFullYear() ||
                actualSlot !== expectedSlot
            ) {
                alert(`Review ${i + 1} should be in slot  (${slots[expectedSlot].start}-${slots[expectedSlot].end}) of ${expected.toLocaleString('default', { month: 'long' })}`);
                return;
            }
        }



                if (!programId) {
                    alert("Please fill in the Program field.");
                    return;
                }
                if (!subProgramId) {
                    alert("Please fill in the Sub Program field.");
                    return;
                }
                if (!agentId) {
                    alert("Please fill in the Agent field.");
                    return;
                }
                if (!qaManagerId) {
                    alert("Please fill in the Coaching Initiated By field.");
                    return;
                }

                   var LastDate = $('#LastDate').val();
                console.log("Last date: " + LastDate);




                if (LastDate) {
                    if (!review5) {
                        alert("Please select Review Date 5.");
                        return;
                    }
                    if (!review6) {
                        alert("Please select Review Date 6.");
                        return;
                    }

                      
                    var parts = rawLastDate.split(' ')[0].split('-'); // ["27", "04", "2025"]
                    var formattedLastDate = `${parts[2]}-${parts[1]}-${parts[0]}`; // "2025-04-27"

                       if (new Date(review5) < new Date(formattedLastDate)) {
                          alert("Review 5 should not be earlier than Review 4 (" + formattedLastDate + ")");
                            return;
                        }
                         if (new Date(review6) < new Date(review5)) {
                            alert("Review 6 should not be earlier than Review 5.");
                            return;
                        }
                }
                else{
                    if (!review1) {
                    alert("Please select Review Date 1.");
                    return;
                }
                if (!review2) {
                    alert("Please select Review Date 2.");
                    return;
                }
                if (!review3) {
                    alert("Please select Review Date 3.");
                    return;
                }
                if (!review4) {
                    alert("Please select Review Date 4.");
                    return;
                }

                        if (new Date(review2) < new Date(review1)) {
                            alert("Review 2 should not be earlier than Review 1.");
                            return;
                        }
                         if (new Date(review3) < new Date(review2)) {
                            alert("Review 3 should not be earlier than Review 2.");
                            return;
                        }
                         if (new Date(review4) < new Date(review3)) {
                            alert("Review 4 should not be earlier than Review 3.");
                            return;
                        }

                }


        // Prepare JSON for Metrics Table
        const tableRows = document.querySelectorAll("#MatrixList table tbody tr");
        let metricsJson = [];

        tableRows.forEach(row => {
            const metricName = row.cells[0].innerText.trim();
            const target = row.cells[1].innerText.trim();
            const actual = row.cells[2].innerText.trim();
             const isChecked = row.cells[3].querySelector("input[type='checkbox']").checked;

            metricsJson.push({
                metric: metricName,
                target: target,
                actual: actual,
                selected: isChecked
            });
        });

        // Prepare JSON for Form Fields
        const formData = {
            ProgramID: programId,
            SubProgramID: subProgramId,
            AgentID: agentId,
            QaManager: qaManagerId,
            Review1: review1,
            Review2: review2,
            Review3: review3,
            Review4: review4,
             Review5: review5,
              Review6: review6
        };

        console.log("Form Data:", formData);
        console.log("Metrics Data:", metricsJson);

        // Post to C# Controller
        try {
            const response = await fetch('/Coaching/SubmitCoachingData', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ formData, metricsJson })
            });

            const result = await response.json();
            alert(result.message || "Form submitted successfully!");
            clearAllFields();
             location.reload();
        } catch (error) {
            console.error("Submission failed:", error);
            alert("Something went wrong. Please try again.");
        }
    }


        async function submitFormExtended() {
            // Validation
                const programId = selectedProcess;
                const subProgramId = selectedSubProcess;
                    const agentId = selectedAgentID;
            const qaManagerId = $('#QaManager').val();
            const review1 = $('#review1').val();
            const review2 = $('#review2').val();
            const review3 = $('#review3').val();
            const review4 = $('#review4').val();
            const review5 = $('#review5').val();
            const review6 = $('#review6').val();



                    if (!programId) {
                        alert("Please fill in the Program field.");
                        return;
                    }
                    if (!subProgramId) {
                        alert("Please fill in the Sub Program field.");
                        return;
                    }
                    if (!agentId) {
                        alert("Please fill in the Agent field.");
                        return;
                    }
                 
                       var LastDate = $('#LastDate').val();
                  
                    console.log("Last date: " + LastDate);




                    if (LastDate) {
                        if (!review5) {
                            alert("Please select Review Date 5.");
                            return;
                        }
                        if (!review6) {
                            alert("Please select Review Date 6.");
                            return;
                        }

                              var rawLastDate = $('#LastDate').val();
                        var parts = rawLastDate.split(' ')[0].split('-'); // ["27", "04", "2025"]
                        var formattedLastDate = `${parts[2]}-${parts[1]}-${parts[0]}`; // "2025-04-27"

                           if (new Date(review5) < new Date(formattedLastDate)) {
                              alert("Review 5 should not be earlier than Review 4 (" + formattedLastDate + ")");
                                return;
                            }
                             if (new Date(review6) < new Date(review5)) {
                                alert("Review 6 should not be earlier than Review 5.");
                                return;
                            }
                    }
                    else{
                        if (!review1) {
                        alert("Please select Review Date 1.");
                        return;
                    }
                    if (!review2) {
                        alert("Please select Review Date 2.");
                        return;
                    }
                    if (!review3) {
                        alert("Please select Review Date 3.");
                        return;
                    }
                    if (!review4) {
                        alert("Please select Review Date 4.");
                        return;
                    }

                            if (new Date(review2) < new Date(review1)) {
                                alert("Review 2 should not be earlier than Review 1.");
                                return;
                            }
                             if (new Date(review3) < new Date(review2)) {
                                alert("Review 3 should not be earlier than Review 2.");
                                return;
                            }
                             if (new Date(review4) < new Date(review3)) {
                                alert("Review 4 should not be earlier than Review 3.");
                                return;
                            }

                    }


            // Prepare JSON for Metrics Table
            const tableRows = document.querySelectorAll("#MatrixList table tbody tr");
            let metricsJson = [];

            tableRows.forEach(row => {
                const metricName = row.cells[0].innerText.trim();
                const target = row.cells[1].innerText.trim();
                const actual = row.cells[2].innerText.trim();
                 const isChecked = row.cells[3].querySelector("input[type='checkbox']").checked;

                metricsJson.push({
                    metric: metricName,
                    target: target,
                    actual: actual,
                    selected: isChecked
                });
            });

            // Prepare JSON for Form Fields
            const formData = {
                ProgramID: programId,
                SubProgramID: subProgramId,
                AgentID: agentId,
                QaManager: qaManagerId,
                Review1: review1,
                Review2: review2,
                Review3: review3,
                Review4: review4,
                 Review5: review5,
                  Review6: review6
            };

            console.log("Form Data:", formData);
            console.log("Metrics Data:", metricsJson);

            // Post to C# Controller
            try {
                const response = await fetch('/Coaching/SubmitCoachingData', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ formData, metricsJson })
                });

                const result = await response.json();
                alert(result.message || "Form submitted successfully!");
                 location.reload();
                clearAllFields();
            } catch (error) {
                console.error("Submission failed:", error);
                alert("Something went wrong. Please try again.");
            }
        }


    async function onSubProgramChange() {
        const selectedValue = $('#SUBProgramID').val();
        if (selectedValue === '') {
            alert('Please select a valid Sub Program Name.');
            return;
        }

        const programId = $('#ProgramID').val();

        try {

            const agentResponse = await fetch("/Coaching/getAndAgentListQuatile", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: programId })
            });
            const agentData = await agentResponse.json();

            const agentDropdown = $('#AgentID');
            agentDropdown.empty();
            agentDropdown.append('<option value="">Select Agent</option>');

            agentData.agentTlList.forEach(function (agent) {
                agentDropdown.append('<option value="' + agent.empCode + '">' + agent.empCode + '</option>');
            });


            const qaResponse = await fetch("/Coaching/getQaManagertList", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: programId })
            });
            const qaData = await qaResponse.json();

            $('#QaManager').find('option:not(:first)').remove();
            if (qaData.agentTlList && Array.isArray(qaData.agentTlList)) {
                qaData.agentTlList.forEach(function (agent) {
                    $('#QaManager').append(
                        $('<option>', {
                            value: agent.user_Id,
                            text: agent.userName
                        })
                    );
                });
            }

                const MatrixListData = await fetch("/Coaching/getMatrix", {
        method: "POST",
        headers: { "Content-Type": "application/json; charset=utf-8" },
        body: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: programId })
    });

    const MatrixList = await MatrixListData.json();
    console.log("MatrixList Response:", MatrixList);

    const tableBody = document.querySelector("#MatrixList table tbody");
    tableBody.innerHTML = ""; // Clear old rows

    MatrixList.agentTlList.forEach((item, index) => {
        const row = document.createElement("tr");

        row.innerHTML = `
            <td>${item.matrix}</td>
            <td>${item.target}</td>
            <td></td>
            <td><input type="checkbox" class="metric-checkbox" data-index="${item.matrix}" /></td>
        `;

        tableBody.appendChild(row);
    });




        } catch (error) {
            console.error("Error occurred:", error);
        }
    }

    async function onProgramChange() {
        const programId = $('#ProgramID').val();
        if (programId === "") {
            alert("Please Select Program first");
            return;
        }

        try {
            const response = await fetch("/Admin/GetSUBProcessList", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ id: programId })
            });
            const data = await response.json();

            const dropdown = $('#SUBProgramID');
            dropdown.empty();
            dropdown.append('<option value="">Select Sub Process</option>');

            data.proces.forEach(function (item) {
                dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
            });
        } catch (error) {
            console.error("Error occurred:", error);
        }
    }


     async function onAgentChange() {
        const AgentID = $('#AgentID').val();

        console.log("Agent ID" + AgentID);
        if (AgentID === "") {
            alert("Please Select Agent  first");
            return;
        }

        try {
            const responsePer = await fetch("/Coaching/GetActualPerformanceList", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ id: AgentID })
            });
                const text = await responsePer.text();
    console.log("Raw Response Text:", text);
    const Performancedata = JSON.parse(text);

           const performanceArray = Performancedata.performance;
             const matrixList = Performancedata.matrixList;
              if (!matrixList || matrixList.length === 0) {
            console.error("matrixList is not defined or is empty.");

        }
        const tableBody = document.querySelector("#MatrixList table tbody");
        const rows = tableBody.querySelectorAll("tr");

        rows.forEach((row, index) => {
            if (performanceArray.length > index) {
                row.cells[2].innerText = performanceArray[index];
            }
            if (matrixList.length > index) {
                const checkbox = row.querySelector("input[type='checkbox']");
                if (checkbox) {
                        checkbox.checked = false; // Check the checkbox if matrixList[index] is 1
                }
            }
        });

    //      if (matrixList.length > index) {
    //     const checkbox = row.querySelector("input[type='checkbox']");
    //     if (checkbox) {
    //         checkbox.checked = matrixList[index] === 1;  // Check the checkbox if matrixList[index] is 1
    //     }
    // }

        } catch (error) {
            console.error("Error occurred:", error);
        }



        $('#MatrixList').show();
        $('#MatrixList2').show();


        try {
            const responsePer = await fetch("/Coaching/IsCouchingExtend", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ id: AgentID })
            });
                const text = await responsePer.text();
            console.log("EXTEND Status:", text);
            const Performancedata = JSON.parse(text);
      console.log("jaosn Status:", Performancedata);
      $('#LastDate').val(Performancedata.fourthDate);
    //       if (Performancedata.performance === "extend") {
    //     // Show review 5 & 6
    //     $('#labelReview5').show();
    //     $('#review5').show();
    //     $('#labelReview6').show();
    //     $('#review6').show();

    //     // Hide review 1–4
    //     $('#labelReview1, #review1').hide();
    //     $('#labelReview2, #review2').hide();
    //     $('#labelReview3, #review3').hide();
    //     $('#labelReview4, #review4').hide();
    // } else {
    //     // Show review 1–4
    //     $('#labelReview1, #review1').show();
    //     $('#labelReview2, #review2').show();
    //     $('#labelReview3, #review3').show();
    //     $('#labelReview4, #review4').show();

    //     // Hide review 5 & 6
    //     $('#labelReview5, #review5').hide();
    //     $('#labelReview6, #review6').hide();
    // }
           $('#labelReview1, #review1').show();
        $('#labelReview2, #review2').show();
        $('#labelReview3, #review3').show();
        $('#labelReview4, #review4').show();
                 $('#labelReview5, #review5').hide();
             $('#labelReview6, #review6').hide();

                 $('#submite').show();
                            $('#SubmiteExted').hide();
        } catch (error) {
            console.error("Error occurred:", error);
        }
    }


          async function viewAgent(button) {

              const AgentID = button.getAttribute("data-agentid");
        selectedAgentID = AgentID;
        selectedProcess = button.getAttribute("data-process");
        selectedSubProcess = button.getAttribute("data-subprocess");
    
   

            
                            const MatrixListData = await fetch("/Coaching/getMatrixByProcess", {
            method: "POST",
            headers: { "Content-Type": "application/json; charset=utf-8" },
                            body: JSON.stringify({ SUBProcessID: selectedSubProcess, ProcessID: selectedProcess })
        });

        const MatrixList = await MatrixListData.json();
        console.log("MatrixList Response:", MatrixList);

        const tableBody = document.querySelector("#MatrixList table tbody");
        tableBody.innerHTML = ""; // Clear old rows

        MatrixList.agentTlList.forEach((item, index) => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td>${item.matrix}</td>
                <td>${item.target}</td>
                <td></td>
                <td><input type="checkbox" class="metric-checkbox" data-index="${item.matrix}" /></td>
            `;

            tableBody.appendChild(row);
        });

                 $('#submite').hide();
                            $('#SubmiteExted').show();
                           

        if (AgentID === "") {
            alert("Please Select Agent  first");
            return;
        }

        try {
            const responsePer = await fetch("/Coaching/GetActualPerformanceList", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ id: AgentID })
            });
                const text = await responsePer.text();
    console.log("Raw Response Text:", text);
    const Performancedata = JSON.parse(text);

           const performanceArray = Performancedata.performance;
             const matrixList = Performancedata.matrixList;
              if (!matrixList || matrixList.length === 0) {
            console.error("matrixList is not defined or is empty.");

        }
        const tableBody = document.querySelector("#MatrixList table tbody");
        const rows = tableBody.querySelectorAll("tr");

        rows.forEach((row, index) => {
            if (performanceArray.length > index) {
                row.cells[2].innerText = performanceArray[index];
            }
            if (matrixList.length > index) {
                const checkbox = row.querySelector("input[type='checkbox']");
                if (checkbox) {
                    checkbox.checked = matrixList[index] === 1; // Check the checkbox if matrixList[index] is 1
                }
            }
        });

         if (matrixList.length > index) {
        const checkbox = row.querySelector("input[type='checkbox']");
        if (checkbox) {
            checkbox.checked = matrixList[index] === 1;  // Check the checkbox if matrixList[index] is 1
        }

    }

        } catch (error) {
            console.error("Error occurred:", error);
        }



        $('#MatrixList').show();
        $('#MatrixList2').show();


        try {
            const responsePer = await fetch("/Coaching/IsCouchingExtend", {
                method: "POST",
                headers: { "Content-Type": "application/json; charset=utf-8" },
                body: JSON.stringify({ id: AgentID })
            });
                const text = await responsePer.text();
            console.log("EXTEND Status:", text);
            const Performancedata = JSON.parse(text);
      console.log("jaosn Status:", Performancedata);
      $('#LastDate').val(Performancedata.fourthDate);
          if (Performancedata.performance === "extend") {
       
        $('#labelReview5').show();
        $('#review5').show();
        $('#labelReview6').show();
        $('#review6').show();

        // Hide review 1–4
        $('#labelReview1, #review1').hide();
        $('#labelReview2, #review2').hide();
        $('#labelReview3, #review3').hide();
        $('#labelReview4, #review4').hide();
    } else {
        // Show review 1–4
        $('#labelReview1, #review1').show();
        $('#labelReview2, #review2').show();
        $('#labelReview3, #review3').show();
        $('#labelReview4, #review4').show();

        // Hide review 5 & 6
        $('#labelReview5, #review5').hide();
        $('#labelReview6, #review6').hide();
    }
         
        } catch (error) {
            console.error("Error occurred:", error);
        }
    }


</script>
