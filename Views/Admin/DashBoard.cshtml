@using System.Data
@model System.Data.DataTable
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNetCore.Http





<div class="col-md-12 my-4" id="AuditDiv">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title">  </h5>
            <div class="row">


                <div class="form-group col-md-6">
                    <label for="ProgramID">Select Program</label>
                    @Html.DropDownList("ProgramID", (List<SelectListItem>)ViewBag.Process, "Select Program", new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()" })
                </div>
                <div class="form-group col-md-6">
                    <label for="SUBProgramID">Sub Program Name</label>
                    <select name="SUBProgramID" id="SUBProgramID" class="custom-select">
                    </select>
                </div>

                <div class="form-group col-md-4">
                    <label for="ViewType">Data View</label>
                    <select name="ViewType" id="ViewType" class="custom-select">
                        <option value="day">--Select Data View--</option>
                        <option value="day">Day</option>
                        <option value="month">Month</option>
                        <option value="week">Week</option>
                    </select>
                </div>

                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <button id="SaveForm" class="btn btn-primary mt-4" onclick="GetDashBoard(this)">Search</button>
                    </div>

                </div>


            </div>
        </div>
    </div>
</div>


<div class="col-md-12 my-4">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title"></h5>
            <table id="SuperAdminTable" class="table table-bordered table-hover mb-0">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Location Name</th>
                        <th>Process Name</th>
                        <th>Active Status</th>
                        <th>Created Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DataRow row in Model.Rows)
                    {
                        <tr>
                            <td>@row["ID"]</td>
                            <td>@row["LocationName"]</td>
                            <td>@row["ProcessName"]</td>
                            <td>@(row["Active_Status"].ToString() == "1" ? "Yes" : "No")</td>
                            <td>@row["Created_Date"]</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="row" id="dashboardContainer"></div>


<script src="~/js/jquery.min.js"></script>
@await Html.PartialAsync("_MailModal")
<script src="~/js/xlsx.full.min.js"></script>

<script src="~/js/notification.js"></script>

<script>
        function GetDashBoard(event) {
        var Program = $("#ProgramID").val();
        var SubProgram = $("#SUBProgramID").val();
        var filter =  $("#ViewType").val();
        

        console.log("Program: " + Program);
        console.log("SubProgram: " + SubProgram);
        console.log("Filter: " + filter);

                  $.ajax({
        url: "/Admin/Getdashboad",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ Program: Program, SubProgram: SubProgram, filter: filter }),
        success: function (response) {
            $('#dashboardContainer').empty();

            let data = typeof response === 'string' ? JSON.parse(response) : response;

            if (!Array.isArray(data) || data.length === 0) {
                $('#dashboardContainer').html('<p>No data found</p>');
                return;
            }

            data.forEach(function (item, index) {
                let callQuality = parseFloat((item["Call Quality"] || "0").replace('%', ''));
                let monitoring = parseFloat((item["Monitoring"] || "0").replace('%', ''));
                let feedback = parseFloat((item["Feedback"] || "0").replace('%', ''));

                // Unique chart IDs
                let callChartId = `callQualityChart_${index}`;
                let monitoringChartId = `monitoringChart_${index}`;
                let feedbackChartId = `feedbackChart_${index}`;

                // Generate three cards with separate chart IDs
                let cardsHtml = `
                    <div class="col-md-4 my-4">
                        <div class="card shadow">
                            <div class="card-body text-center">
                                <div id="${callChartId}"></div>
                                <div class="mt-3"><strong>Date:</strong> ${item["Period"]}</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 my-4">
                        <div class="card shadow">
                            <div class="card-body text-center">
                                <div id="${monitoringChartId}"></div>
                                <div class="mt-3"><strong>Monitoring:</strong> ${item["Monitoring"]}</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 my-4">
                        <div class="card shadow">
                            <div class="card-body text-center">
                                <div id="${feedbackChartId}"></div>
                                <div class="mt-3"><strong>Feedback:</strong> ${item["Feedback"]}</div>
                            </div>
                        </div>
                    </div>
                `;

                $('#dashboardContainer').append(cardsHtml);

                // Function to clone options and render chart
                function renderRadialChart(chartId, value, label) {
                    let options = JSON.parse(JSON.stringify(strokeRadialOptions));
                    options.series = [value];
                    options.labels = [label];

                    let chart = new ApexCharts(document.querySelector("#" + chartId), options);
                    chart.render();
                }

                renderRadialChart(callChartId, callQuality, "Call Quality");
                renderRadialChart(monitoringChartId, monitoring, "Monitoring");
                renderRadialChart(feedbackChartId, feedback, "Feedback");
            });
        },
        error: function (xhr, status, error) {
            console.error("AJAX Error:", error);
            $('#dashboardContainer').html('<p>Error loading dashboard</p>');
        }
    });

    }

     function onProgramChange() {
        var programId = document.getElementById("ProgramID").value;


        if (programId == "") {
            alert("Please Select Program first");
            return;
        }
        $.ajax({
            type: "POST",
            data: JSON.stringify({ id: programId }),

            url: "/Admin/GetSUBProcessList",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {

                var dropdown = $('#SUBProgramID');
                dropdown.empty();
                dropdown.append('<option value="">Select Sub Process</option>');
                response.proces.forEach(function (item) {
                    dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                });
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });




    }

</script>