@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model List<CalibrationRowViewModel>
<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f7f7f7;
    }

    .scrollable-table {
        overflow-x: auto;
        margin: 30px 0;
        background: #ffffff;
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 10px;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        min-width: 1000px;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 10px 8px;
        text-align: center;
        font-size: 14px;
        color: #333;
    }

    thead tr:first-child th {
        background-color: #f2f2f2;
        font-size: 15px;
        font-weight: 600;
    }

    thead tr:nth-child(2) th {
        background-color: #f9f9f9;
        font-weight: 500;
    }

    tbody tr:nth-child(even) {
        background-color: #fcfcfc;
    }

    tbody tr:hover {
        background-color: #f1f1f1;
        transition: background 0.2s ease-in-out;
    }

    tfoot td {
        background-color: #f5f5f5;
        font-weight: 600;
        color: #222;
    }

    td[colspan="3"] {
        text-align: right;
        background-color: #f5f5f5;
    }

    td strong {
        color: #000;
    }
</style>



<div class="scrollable-table">
    <table>
        <thead>
            <tr>
                <th colspan="3"></th>
                @foreach (var participant in Model.FirstOrDefault()?.ParticipantData.Keys)
                {
                    var colspan = participant == "Master" ? 4 : 5;
                    <th colspan="@colspan">@participant</th>
                }
            </tr>
            <tr>
                <th>Category</th>
                <th>Level</th>
                <th>Section Name</th>
                @foreach (var participant in Model.FirstOrDefault()?.ParticipantData.Keys)
                {
                    <th>QA Rating</th>
                    <th>Scorable</th>
                    <th>Score</th>
                    <th>Fatal</th>
                    if (participant != "Master")
                    {
                        <th>Variance</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in Model)
            {
                <tr>
                    <td>@row.Category</td>
                    <td>@row.Level</td>
                    <td>@row.SectionName</td>
                    @foreach (var participant in row.ParticipantData)
                    {
                        <td>@participant.Value.QA_rating</td>
                        <td>@participant.Value.Scorable</td>
                        <td>@participant.Value.Weightage</td>
                        <td>@participant.Value.Fatal</td>
                        if (participant.Key != "Master")
                        {
                            <td>@participant.Value.Variance</td>
                        }
                    }
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3"></td>
                @foreach (var participantKey in Model.FirstOrDefault()?.ParticipantData.Keys)
                {
                    var totalScore = Model.Sum(r =>
                    r.ParticipantData.ContainsKey(participantKey)
                    ? Convert.ToDouble(r.ParticipantData[participantKey].Weightage)
                    : 0);

                    <td></td>
                    <td>CQ Score</td>
                    <td><strong>@totalScore</strong></td>
                    <td></td>
                    if (participantKey != "Master")
                    {
                        var falseCount = Model.Count(r =>
                        r.ParticipantData.ContainsKey(participantKey) &&
                        r.ParticipantData[participantKey].Variance?.ToLower() == "false");

                        <td><strong>@falseCount</strong></td>
                    }
                }
            </tr>
            <tr>
                <td colspan="3"></td>
                @foreach (var participantKey in Model.FirstOrDefault()?.ParticipantData.Keys)
                {
                    <td></td>
                    if (participantKey != "Master")
                    {
                        <td colspan="3">Parameter wise Variance</td>
                    }
                    else
                    {
                        <td colspan="3"></td>
                    }

                    if (participantKey != "Master")
                    {
                        var falseCount = Model.Count(r =>
                        r.ParticipantData.ContainsKey(participantKey) &&
                        r.ParticipantData[participantKey].Variance?.ToLower() == "false");
                        var percentage = Math.Round((falseCount / 17.0) * 100);
                        <td><strong>@percentage%</strong></td>
                    }
                }
            </tr>
        </tfoot>
    </table>
</div>
