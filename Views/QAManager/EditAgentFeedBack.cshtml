@model AgentFeedBackSectionList
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="col-md-12" style="margin-bottom: 58px;
    border-radius: 19px">

    <div id="recordingContainer"></div>

</div>

<div class="card shadow mb-4" id="SectionGried" style="@(Model.sectionList.Any() ? "display:block" : "display:none")">
    <div class="card-header">
        <strong class="card-title"> Section </strong>
    </div>
    <div class="card-body">
        <table id="sectionGrid" class="table table-bordered">
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Parameters</th>
                    <th>Sub Parameters</th>
                
                    <th>Section Name</th>
                    <th>QA Rating</th>
                    <th>Scorable</th>
                    <th>Score</th>
                    <th>Comments Section</th>
                    <th>Level</th>
                    <th>Fatal</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.sectionList)
                {
                    <tr>
                        <td>@item.category</td>
                          <td>@item.parameters</td>
                        <td>@item.subparameters</td>
                      
                        <td>@item.SectionName</td>
                        <td>
                            <select class="qa-rating form-control">
                                <option value="">Select Rating</option>
                                @{
                                    var ratings = item.ratingdrop?.Split(',') ?? Array.Empty<string>();
                                }
                                @foreach (var rating in ratings)
                                {
                                    var trimmedRating = rating.Trim();
                                    <option value="@trimmedRating" selected="@(trimmedRating == item.QA_rating ? "selected" : null)">
                                        @trimmedRating
                                    </option>
                                }
                            </select>
                        </td>


                        <td class="scorable">@item.Scorable</td>
                        <td class="score-col" data-original-score="@item.Weightage">@item.Weightage</td>

               
                        <td>
                            <input type="text" class="form-control" id="Comments_Section" placeholder="Enter Comments Section" value="@item.Commentssection" />
                        </td>
                        <td>@item.level</td>
                        <td>
                            <select class="fatal-select form-control" @(item.Fatal?.Trim() == "No" ? "disabled" : "")>
                                <option value="">Select Fatal</option>
                                <option value="Yes" selected="@(item.Fatal?.Trim() == "Yes" ? "selected" : null)">Yes</option>
                                <option value="No" selected="@(item.Fatal?.Trim() == "No" ? "selected" : null)">No</option>
                            </select>
                        </td>
                    </tr>
                }

                <!-- Footer Row -->
                <tr>
                    <td colspan="5" class="text-right font-weight-bold">CQ Scores:</td>
                    <td id="totalScore" class="font-weight-bold">0</td>
                    <td colspan="2"></td>
                </tr>
            </tbody>
        </table>

    </div>
</div>
   

<div class="col-md-12 my-4" id="AuditDiv">
    <div class="card shadow" style="border-radius: 10px; border: 1px solid #ddd;">
        <div class="card-body" style="padding: 20px;">
            <h5 class="card-title" style="font-weight: bold; color: #ced2d1;">Dispute Feedback </h5>


            <div class="row">
                <div class="form-group col-md-12">
                    <label for="QAComments" style="font-weight: 600; color: #ffffff;">QA Comments</label> <span style="color:red">*</span>
                    <input type="text" value="@ViewBag.Remarks" id="QA_Comments" required readonly
                           style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; background-color: #181b25; color: #ccc;">
                </div>
            </div>

            <div class="row">
                <div class="form-group col-md-12">
                    <label for="AgentComent" style="font-weight: 600; color: #ffffff;">Agent Comments</label>
                    <input type="text" id="AgentComent" readonly value="@ViewBag.Agent_Comment"
                           style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; background-color: #181b25;color: #ccc;">
                </div>
            </div>

            <div class="row">
                <div class="form-group col-md-12">
                    <label for="AgentComent" style="font-weight: 600; color: #ffffff;">Calibrated Comments</label>
                    <input type="text" id="Calibrated" placeholder="Enter your comments"  
                           style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;background-color: #181b25;  color: #ccc;">
                </div>
            </div>
           
            <div class="row">
                <div class="form-group col-md-2">
                    <button type="submit" onclick="submitDispute()"
                            style="background-color: #24294a; color: white;border:white;border: solid white 1px; padding: 10px 15px; border-radius: 5px; font-weight: 600; cursor: pointer;">
                        Acknowledge
                    </button>
                </div>

            </div>
        </div>
    </div>
</div>



<script src="~/js/jquery.min.js"></script>


<script src="~/js/jquery.min.js"></script>
<script>
    let sectionData = [];

    function InsertSectionAudit() {
        var isValid = true;
        var gridData = [];
    $("#sectionGrid tbody tr:not(:last-child)").each(function () {
        var $row = $(this);
        var category = $row.find("td:eq(0)").text().trim();
        var level = $row.find("td:eq(1)").text().trim();
        var sectionName = $row.find("td:eq(2)").text().trim();
        var qaRating = $row.find(".qa-rating").val();
        var scorable = $row.find("td:eq(4)").text().trim();
        var score = $row.find("td:eq(5)").text().trim();
        var comments = $row.find("#Comments_Section").val().trim(); // updated here
        var fatal = $row.find(".fatal-select").val(); // fixed class

        console.log("fatal value: " + fatal);

        if (category === "" && level === "" && sectionName === "") {
            return;
        }

        if (qaRating === "") {
            isValid = false;
            $row.find(".qa-rating").addClass("border border-danger");
        } else {
            $row.find(".qa-rating").removeClass("border border-danger");
        }

        if (comments === "") {
            isValid = false;
            $row.find("#Comments_Section").addClass("border border-danger");
        } else {
            $row.find("#Comments_Section").removeClass("border border-danger");
        }

        gridData.push({
            category: category,
            level: level,
            sectionName: sectionName,
            qaRating: qaRating,
            scorable: scorable,
            score: score,
            comments: comments,
            Transaction_ID: "",
            ProgramID: "",
            SUBProgramID: "",
            fatal: fatal
        });
    });


        if (!isValid) {
            alert("Please select QA Rating and enter Comments In Section ");
            return false;
        }

        return gridData;
    }

    function initializeSectionData() {
        sectionData = [];

        $("#sectionGrid tbody tr:not(:last-child)").each(function () {
            var $row = $(this);
            var category = $row.find("td:eq(0)").text().trim();
            var level = $row.find("td:eq(1)").text().trim();
            var sectionName = $row.find("td:eq(2)").text().trim();
            var score = parseInt($row.find("td:eq(5)").text()) || 0;

            if (category === "" && level === "" && sectionName === "") {
                return;
            }

            sectionData.push({
                category: category,
                level: level,
                sectionName: sectionName,
                score: score
            });
        });
    }
             function bindEventHandlers() {
        $(".fatal-select").on("change", function () {
            calculateTotalScore();
        });

        $(".qa-rating").on("change", function () {
            var $row = $(this).closest("tr");
            var selectedValue = ($(this).val() || "").toLowerCase().trim();
            var scoreCell = $row.find(".score-col");

            
            var originalScore = parseInt(scoreCell.attr("data-original-score")) || 0;
             console.log("selected");
            console.log(selectedValue);
            console.log("orignal");
              console.log(originalScore);
               console.log("validate");
              
      
            const validValues = [
                "met",
       
                "meeting_expectations",
                "exceeding expectations",
                    "partially met"
            ];
        
            if (validValues.includes(selectedValue)) {
              
                scoreCell.text(originalScore); // valid: show original score
            } else {
              
                scoreCell.text(0); // invalid: show zero
            }

            calculateTotalScore();
        });

        // Initial calculation on page load
        calculateTotalScore();
    }

    function calculateTotalScore() {
        let isFatal = false;
        let total = 0;
        
        $("#sectionGrid tbody tr").each(function () {
            var scorable = $(this).find(".scorable").text().trim().toLowerCase();
            var score = parseInt($(this).find(".score-col").text()) || 0;
            var fatalValue = $(this).find(".fatal-select").val();

            if (fatalValue === "Yes") {
                isFatal = true;
            }

            if (scorable === "yes") {
                total += score;
            }
        });

        $("#totalScore").text(isFatal ? "0" : total);
    }

    $(document).ready(function () {
        bindEventHandlers();
        initializeSectionData();

               
    
       bindEventHandlers();

        $.ajax({
            type: "POST",
            data: JSON.stringify({ id: '@ViewBag.TransactionID' }),
            url: "/Monitor/GetRecording",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (!response.success) return;

                let container = document.getElementById("recordingContainer");
                container.innerHTML = "";

                container.style.cssText = `
                    background-image: url('/images/image.png');
                background-size: 100% 185%; /* Stretches fully */
                background-repeat: no-repeat;
                background-position: center;
                width: 100%;
                height: 300px; /* You can adjust this height */
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                padding: 20px;
                position: relative;
                    border-radius: 12px;
                 
                `;

                if (!response.audioData) {
                    console.error("No audio data received.");
                    return;
                }

                try {
                    let byteCharacters = atob(response.audioData);
                    let byteNumbers = new Uint8Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }

                    let blob = new Blob([byteNumbers], { type: "audio/mpeg" });
                    let audioUrl = URL.createObjectURL(blob);

                    let audioPlayer = document.createElement("audio");
                    audioPlayer.controls = true;
                    audioPlayer.src = audioUrl;
                    audioPlayer.style.cssText = `
                        width: 100%;
                    max-width: 643px;
                    margin-top: 197px;
                    `;
                    container.appendChild(audioPlayer);
                    audioPlayer.play().catch(console.error);
                } catch (e) {
                    console.error("Invalid Base64 audio data:", e);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });
    });

    function submitDispute() {
        let sectionAuditData = InsertSectionAudit();
        if (!sectionAuditData) return;

        $.ajax({
            url: "/QAManager/InsertSectionAudit",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(sectionAuditData),
            success: function () { }
        });

        var calibration = $("#Calibrated").val();
        var QA_Comments = $("#QA_Comments").val().trim();
        var totalScore = $("#totalScore").text().trim();

        if (QA_Comments === "") {
            alert("Please enter a comment before acknowledging.");
            return;
        }

        $.ajax({
            url: '/QAManager/SubmitDisputeFeedbackByQA',
            type: 'POST',
            data: { comment: QA_Comments, calibration: calibration, totalScore: totalScore },
            success: function (response) {
                alert(response.message);
                $("#QA_Comments").val("");

                if (response.success) {
                    window.location.href = '/QAManager/Dashboard';
                }
            },
            error: function () {
                alert("Error submitting the comment.");
            }
        });
    }
</script>