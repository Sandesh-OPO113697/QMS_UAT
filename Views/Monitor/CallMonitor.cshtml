﻿@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .audit-panel {
        background: #1a1d2d;
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 4px 7px rgb(0 0 2.3);
        padding: 24px;
       
        width: 100%;
        display: grid;
        grid-template-columns: 1fr;
        gap: 20px;
    }

    .button-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .circle-btn {
        width: 64px;
        height: 64px;
        background: radial-gradient(circle at 30% 30%, #eee, #bbb);
        border-radius: 50%;
        box-shadow: inset -3px -3px 8px #fff, inset 3px 3px 8px #aaa;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

        .circle-btn:hover {
            transform: scale(1.05);
        }

        .circle-btn svg {
            width: 28px;
            height: 28px;
            fill: #333;
        }

    .info-boxes {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
    }

    .info-box {
        background: linear-gradient(to bottom right, #ababab, #ffffff);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        border-radius: 31px;
        padding: 7px;
        text-align: center;
        font-weight: 500;
        color: #222;
        font-size: 14px;
    }

  

    }
</style>
<div class="col-md-12 my-4" id="AuditDiv">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title">  </h5>
            <div class="row">


                <div class="form-group col-md-6">
                    <label for="ProgramID">Select Program</label>
                    @Html.DropDownList("ProgramID", (List<SelectListItem>)ViewBag.Process, "Select Program", new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()" })
                </div>
                <div class="form-group col-md-6">
                    <label for="SUBProgramID">Sub Program Name</label>
                    <select name="SUBProgramID" id="SUBProgramID" class="custom-select" onchange="onSubProgramChange()">
                    </select>
                </div>
                <div class="form-group col-md-6" id="Audit_Type" style="display:none">
                    <label for="ProgramID">Audit Type</label> <span style="color:red">*</span>
                    <input type="hidden" id="hiddenValue">
                    <input type="hidden" id="hiddencat1">
                    <input type="hidden" id="hiddencat2">
                    <input type="hidden" id="hiddencat3">
                    <input type="hidden" id="hiddencat4">
                    <input type="hidden" id="hiddencat5">
                    <input type="hidden" id="Predictivecstahident">

                    @Html.DropDownList("AuditID", (List<SelectListItem>)ViewBag.AuditTypeList, "Select AditType", new { @class = "custom-select", id = "AuditID", onchange = "OnAuditChange()" })
                </div>
                <div class="form-group col-md-6" id="DispoID" style="display:none">
                    <label for="dispositionId">Disposition</label>
                    <select name="dispositionId" id="dispositionId" class="custom-select" onchange="onDispositionChange()">
                    </select>
                </div>
                <div class="form-group col-md-6" id="SUBDispoID" style="display:none">
                    <label for="SubDispositionID">Sub Disposition</label>
                    <select name="SubDispositionID" id="SubDispositionID" class="custom-select">
                    </select>
                </div>

                <div class="form-group col-md-6" id="Cat_1" style="display:none">
                    <label for="Cat1">Category 1</label>
                    <select name="Cat1" id="Cat1" class="custom-select">
                    </select>
                </div>
                <div class="form-group col-md-6" id="Cat_2" style="display:none">
                    <label for="Cat2">Category 2</label>
                    <select name="Cat2" id="Cat2" class="custom-select">
                    </select>
                </div>

                <div class="form-group col-md-6" id="Cat_3" style="display:none">
                    <label for="Cat3">Category 3</label>
                    <select name="Cat3" id="Cat3" class="custom-select">
                    </select>
                </div>
                <div class="form-group col-md-6" id="Cat_4" style="display:none">
                    <label for="Cat4">Category 4</label>
                    <select name="Cat4" id="Cat4" class="custom-select">
                    </select>
                </div>
                <div class="form-group col-md-6" id="Cat_5" style="display:none">
                    <label for="Cat5">SubCategory 5</label>
                    <select name="Cat5" id="Cat5" class="custom-select">
                    </select>
                </div>


            </div>
        </div>
    </div>
</div>




<div class="col-md-12 my-4" id="SerchRecoding">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title"> Search Recording </h5>
            <div class="row">

                <div class="form-group col-md-6">
                    <label for="FromDate">From Date</label>
                    <input type="date" id="FromDate" class="form-control" style="color:white">
                </div>

                <div class="form-group col-md-6">
                    <label for="ToDate">To Date</label>
                    <input type="date" id="Todate" class="form-control">
                </div>

                <div class="form-group col-md-6">
                    <label for="AgentID">Agent Name</label>
                    <select name="AgentID" id="AgentID" class="custom-select" onchange="onAgentIDChange()">
                    </select>
                </div>

                <div class="form-group col-md-6">
                    <label for="TL_id">TL Name</label>
                    <input type="text" placeholder="TL Name" class="form-control" id="TL_id" readonly />
                </div>

                <div class="form-group col-md-6">
                    <label for="ConnID">Transaction_ID</label>
                    <input type="text" class="form-control" id="Transaction_ID" aria-describedby="button-addon2" readonly>

                </div>

                <div class="form-group col-md-6">
                    <label for="Monitored_date">Monitored date</label>
                    <input type="text" class="form-control" id="Monitored_date" aria-describedby="button-addon2" readonly>

                </div>

                <div class="form-group col-md-6">
                    <label for="Transaction_Date">Transaction Date</label>
                    <input type="text" class="form-control" id="Transaction_Date" aria-describedby="button-addon2" readonly>

                </div>
                <div class="form-group col-md-6">
                    <label for="Year">Year</label>
                    <input type="text" class="form-control" id="Year" aria-describedby="button-addon2" readonly>

                </div>
                <div class="form-group col-md-6">
                    <label for="Month">Month</label>
                    <input type="text" class="form-control" id="Month" aria-describedby="button-addon2" readonly>

                </div>
                <div class="form-group col-md-6">
                    <label for="Week">Week</label>
                    <input type="text" class="form-control" id="Week" aria-describedby="button-addon2" readonly>

                </div>

            </div>
        </div>
    </div>
</div>




<div class="col-md-12 my-4" id="NonVoice" style="display:none">
    <div class="card shadow">
        <div class="card-body">
            <h5 class="card-title">  </h5>
            <div class="row">


                <div class="form-group col-md-6">
                    <label for="ConnID">Transaction_ID</label>
                    <input type="text" class="form-control" id="Transaction_ID2" aria-describedby="button-addon2" onkeydown="handleEnter(event)">

                </div>



                <div class="form-group col-md-6">
                    <label for="Monitored_date">Monitored date</label>
                    <input type="text" class="form-control" id="Monitored_date2" aria-describedby="button-addon2" readonly>

                </div>

                <div class="form-group col-md-6">
                    <label for="Transaction_Date">Transaction Date</label>
                    <input type="text" class="form-control" id="Transaction_Date2" aria-describedby="button-addon2" readonly>

                </div>
                <div class="form-group col-md-6">
                    <label for="Year">Year</label>
                    <input type="text" class="form-control" id="Year2" aria-describedby="button-addon2" readonly>

                </div>
                <div class="form-group col-md-6">
                    <label for="Month">Month</label>
                    <input type="text" class="form-control" id="Month2" aria-describedby="button-addon2" readonly>

                </div>
                <div class="form-group col-md-6">
                    <label for="Week">Week</label>
                    <input type="text" class="form-control" id="Week2" aria-describedby="button-addon2" readonly>

                </div>

            </div>
        </div>
    </div>
</div>




<div id="RelListDiv" style="display:none">
    <div class="card shadow">
        <div class="container-fluid">
            <div class="row justify-content-center">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th> Play</th>
                            <th>Agent ID</th>
                            <th>Transaction ID</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody id="recTableBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="row" id="LastReansaction" style="display: flex; display:none; align-items: stretch;">
    <div class="col-md-6 my-4" style="display: flex; flex-direction: column;">

        <div id="recordingContainer"></div>

    </div>

    <div class="col-md-6 my-4" style=" display: flex; flex-direction: column;">
        <div class="card shadow">
            <div class="container-fluid">
                <div class="row justify-content-center" >
                    <table class="table table-bordered">
                        <thead>
                            <tr>

                                <th class="w-40">ID</th>
                                <th class="w-40">Transaction ID</th>
                                <th class="w-40">CQ_Score</th>
                            </tr>
                        </thead>
                        <tbody id="lastRecTableBody">
                            @if (ViewBag.LastTransaction != null)
                            {
                                foreach (System.Data.DataRow row in ViewBag.LastTransaction.Rows)
                                {
                                    <tr>
                                        <td>@row["ID"]</td>
                                        <td>@row["TransactionID"]</td>
                                        <td>@row["CQ_Score"]</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="3" class="text-center">No data available</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div>

                    <div class="col-md-12">
                        @* <div class="form-group mb-3 d-flex align-items-center justify-content-start gap-4" *@
                        @*      style="padding: 10px; border: 1px solid #ddd; border-radius: 8px; background: #f8f9fa;"> *@

                        @*     <button id="StartAudit" class="btn btn-primary" onclick="startAudit()" *@
                        @*             style="padding: 10px 20px; font-size: 16px;"> *@
                        @*         Start Audit *@
                        @*     </button> *@

                        @*     <button id="pauseButton" onclick="togglePause()" *@
                        @*             style="display: flex; align-items: center; justify-content: center;margin-left:20px; width: 50px; height: 50px; border: none; border-radius: 50%; background: linear-gradient(135deg, #007bff, #0056b3); color: white; cursor: pointer; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); transition: all 0.3s ease;" *@
                        @*             disabled> *@
                        @*         <i id="pauseIcon" class="fe fe-24 fe-play"></i> *@
                        @*     </button> *@

                        @*     <span id="timer" style="font-size: 20px; font-weight: bold; min-width: 70px; text-align: center;"> *@
                        @*         00:00 *@
                        @*     </span> *@

                        @*     <span id="pauseCount" style="font-size: 16px; font-weight: bold; min-width: 90px;"> *@
                        @*         Pauses: 0 *@
                        @*     </span> *@
                        @*     <span id="pauseLimit" style="font-size: 16px; font-weight: bold; min-width: 100px;"> *@
                        @*         Limit Of Pauses: *@
                        @*     </span> *@


                        @* </div> *@



                        <div class="audit-panel">
                            <div class="button-row">
                                <!-- Start Button -->
                                <div class="circle-btn" id="StartAudit" onclick="startAudit()" title="Start" role="button" tabindex="0">
                                    <svg viewBox="0 0 24 24" aria-hidden="true">
                                        <path d="M8 5v14l11-7z"></path>
                                    </svg>
                                </div>

                                <!-- Pause Button -->
                              

                                <div class="circle-btn" id="pauseButton" onclick="togglePause()" title="Pause" role="button" tabindex="0">
                                    <svg viewBox="0 0 24 24" id="pauseIcon" aria-hidden="true">
                                        <path d="M6 5h4v14H6zm8 0h4v14h-4z" />
                                    </svg>
                                </div>

                                <!-- Stop Button -->
                                <div class="circle-btn" title="Stop">
                                    <svg viewBox="0 0 24 24">
                                        <path d="M6 6h12v12H6z" />
                                    </svg>
                                </div>
                            </div>

                            <!-- Info Section -->
                            <div class="info-boxes">
                                <div class="info-box">⏱ <span id="timer" style="font-size: 20px; font-weight: bold; min-width: 70px; text-align: center;"> 
                              00:00 
                           </span> </div>
                                <div class="info-box">⏸ <span id="pauseCount" style="font-size: 16px; font-weight: bold; min-width: 90px;"> 
                                Pauses: 0 
                            </span></div>
                                <div class="info-box">🔁 <span id="pauseLimit" style="font-size: 16px; font-weight: bold; min-width: 100px;"> 
                               Limit: 
                           </span> </div>
                                <div class="info-box">⚙️ Status: Running</div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


<div class="card shadow mb-4" id="SectionGried" style="display:none">
    <div class="card-header">
        <strong class="card-title"> Section</strong>

    </div>
    <div class="card-body">

        <table id="sectionGrid" class="table table-bordered">
            <thead>
                <tr>

                    <th>Category</th>
                    <th>Level</th>
                    <th>Section Name</th>
                    <th>QA Rating</th>
                    <th>Scorable</th>

                    <th>Weightage</th>
                    <th>Comments Section</th>
                    <th>Fatal</th>



                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>
</div>




<div class="card shadow mb-4" id="rooutcause" style="display:none">
    <div class="card-header">
        <strong class="card-title">Root Cause Analysis</strong>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="rootCauseTable" class="table table-bordered">
                <thead>
                    <tr>

                        <th>Metric RCA</th>
                        <th>Controllable</th>
                        <th>RCA 1</th>
                        <th>RCA 2</th>
                        <th>RCA 3</th>
                        <th>Comments Section</th>

                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>




<div class="card shadow mb-4" id="Predictivediv" style="display:none">
    <div class="card-header">
        <strong class="card-title">Predictive Analysis</strong>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="predictiveAnalysisTable" class="table table-bordered">
                <thead>
                    <tr>

                        <th>Predictive - CSAT</th>
                        <th>Predictive - NPS</th>
                        <th>Predictive - FCR</th>
                        <th>Predictive - Repeat</th>
                        <th>Predictive - Sales effort</th>
                        <th>Predictive - Collection effort</th>
                        <th>Predictive - Probable escalation</th>

                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>



<div class="card shadow mb-4" id="Zerotollernce" style="display:none">
    <div class="card-header">
        <strong class="card-title">Zero Tolerance Behaviour</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <label><strong>Was there any Zero Tolerance Behaviour identified?</strong></label>
            <div class="form-check form-check-inline" style="margin-left: 75px;">
                <input class="form-check-input" type="checkbox" id="yesCheckbox" name="zeroTolerance" value="Yes">
                <label class="form-check-label" for="yesCheckbox">Yes</label>
            </div>
            <div class="form-check form-check-inline" style="margin-left: 75px;">
                <input class="form-check-input" type="checkbox" id="noCheckbox" name="zeroTolerance" value="No">
                <label class="form-check-label" for="noCheckbox">No</label>
            </div>

        </div>
    </div>
</div>


<div class="card shadow mb-4" id="ZtClassfictions" style="display:none">
    <div class="card-header">
        <strong class="card-title">ZT Classification</strong>

    </div>
    <div class="card-body">
        <div class="row col-md-4">
            <label for="ZTClassification">Select  ZT Classification</label>
            <select id="ZTClassification" class="custom-select">
            </select>

        </div>
    </div>
</div>


<div class="card shadow mb-4" id="Remarks" style="display:none">
    <div class="card-header">
      

    </div>
    <div class="card-body">
        <div class="row col-md-4">
            <label for="ConnID">Remarks</label>
            <input type="text" class="form-control" id="txtRemarks" placeholder="Enter remarks">


        </div>
    </div>
</div>


<div class="card shadow mb-4" id="ButtonForAudit" style="display:none">
    <div class="card-header">
    </div>
    <div class="card-body">
        <div class="row d-flex flex-wrap" style="gap: 10px; display: flex;  flex-wrap: wrap; justify-content: flex-start;">

            <div class="col-md-2" style="flex: 1;">
                <div class="form-group mb-3">
                    <button id="btnSubmite" class="btn btn-primary mt-4" onclick="SubMitedata()">Submit</button>
                </div>
            </div>

            <div class="col-md-2" style="flex: 1;">
                <div class="form-group mb-3">
                    <button id="btnClearForm" class="btn btn-primary mt-4">Clear Form</button>
                </div>

            </div>


            <div class="col-md-2" style="flex: 1;">
                <div class="form-group mb-3">
                    <button id="SaveForm" class="btn btn-primary mt-4" onclick="SaveEndTime()">Save Form</button>
                </div>
                <input type="hidden" id="hiddenEndTime">
            </div>
            <div class="col-md-2" style="flex: 1;">
                <div class="form-group mb-3">
                    <button id="btnVoicefeed" class="btn btn-primary mt-4">Record voice Feedback</button>
                </div>

            </div>
        </div>
    </div>
</div>
<div id="voiceModal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background: white; padding: 20px; box-shadow: 0px 0px 10px gray; border-radius: 10px; z-index: 1000;">

    <h4 style="color: #121621;">Record Your Voice Message</h4>

    <button id="startRecording" style="background-color: gray; color: white; border: none; padding: 10px;
        margin: 5px; cursor: pointer; border-radius: 5px;">
        Start Recording
    </button>

    <button id="stopRecording" style="background-color: gray; color: white; border: none; padding: 10px;
        margin: 5px; cursor: pointer; border-radius: 5px;" disabled>
        Stop Recording
    </button>

    <p id="recordingIndicator" style="display: none; color: red; font-weight: bold;">🔴 Recording...</p>

    <audio id="audioPlayback" controls style="display: none; margin-top: 10px;"></audio>

    <button id="saveRecording" style="background-color: blue; color: white; border: none; padding: 10px;
        margin: 5px; cursor: pointer; border-radius: 5px;" disabled>
        Save
    </button>

    <button id="closeModal" style="background-color: gray; color: white; border: none; padding: 10px;
        margin: 5px; cursor: pointer; border-radius: 5px;">
        Close
    </button>

</div>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script>
    document.getElementById("btnVoicefeed").addEventListener("click", function () {
        document.getElementById("voiceModal").style.display = "block";
    });

    document.getElementById("closeModal").addEventListener("click", function () {
        document.getElementById("voiceModal").style.display = "none";
    });

    let mediaRecorder;
    let audioChunks = [];

    document.getElementById("startRecording").addEventListener("click", async function () {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();
            audioChunks = [];

            // Show recording indicator
            document.getElementById("recordingIndicator").style.display = "block";

            mediaRecorder.ondataavailable = event => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
                const audioURL = URL.createObjectURL(audioBlob);
                document.getElementById("audioPlayback").src = audioURL;
                document.getElementById("audioPlayback").style.display = "block";
                document.getElementById("saveRecording").disabled = false;

                // Hide recording indicator
                document.getElementById("recordingIndicator").style.display = "none";
            };

            document.getElementById("stopRecording").disabled = false;
            document.getElementById("startRecording").disabled = true;
        } catch (error) {
            console.error("Error accessing microphone:", error);
        }
    });

    document.getElementById("stopRecording").addEventListener("click", function () {
        mediaRecorder.stop();
        document.getElementById("stopRecording").disabled = true;
        document.getElementById("startRecording").disabled = false;
        document.getElementById("recordingIndicator").style.display = "none"; // Hide indicator
    });

               document.getElementById("saveRecording").addEventListener("click", async function () {
        const audioBlob = new Blob(audioChunks, { type: "audio/wav" });

        const reader = new FileReader();
        reader.readAsDataURL(audioBlob); // Convert to Base64
        reader.onloadend = async function () {
            const base64Audio = reader.result.split(",")[1]; // Extract Base64 data

            var Transaction_ID = $("#Transaction_ID").val();
            var Transaction_ID2 = $("#Transaction_ID2").val();

            var finalTransactionID = Transaction_ID || Transaction_ID2;

            if (!finalTransactionID) {
                alert("No valid Transaction ID found!");
                return;
            }

            $.ajax({
                url: "/save-voice-message",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({
                    TransactionId: finalTransactionID,
                    AudioData: base64Audio  // Send Base64 string instead of array
                }),
                success: function (response) {
                     Swal.fire({
        icon: 'success',
        title: 'Saved!',
        text: 'Form saved successfully!',
        confirmButtonText: 'OK',
            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
    });
                     document.getElementById("voiceModal").style.display = "none";
                },
                error: function (error) {
                    console.error("Error saving voice message:", error);
                     Swal.fire({
                    icon: 'error',
                    title: 'Submission Error',
                    text: 'An error occurred while submitting root cause data.',
                        timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                });
                }
            });
        };
    });


</script>
<script>
    function handleEnter(event) {
        console.log("Key Pressed:", event.key); // Debugging

        if (event.key === "Enter" || event.keyCode === 13) {
            event.preventDefault(); // Prevents accidental form submission if inside a form


            myFunction(); // Call your function
        }
    }


    function myFunction() {
        let value = document.getElementById("Transaction_ID2").value.trim(); // Get the input value and trim spaces

        if (!value) {
            alert("Please enter a Transaction ID.");
            return;
        }

        console.log("Transaction ID entered:", value);

        $.ajax({
            type: "POST",
            url: "/Monitor/CheckTheAuditIsDone",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify({ id: value }),
            success: function (response) {
                console.log("AJAX Response:", response);

                if (response.success) {
                    if (response.connid && response.connid.trim() !== "") {
                        alert("For This Transaction ID, Audit Has Been Done.");

                        $("#RelListDiv").hide();
                        return;
                    }
                    else{
                         $("#LastReansaction").show();
                    }
                } else {

                    console.error("Error:", response.message || "Unknown error occurred.");
                }

                GetSectionGried();
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", error);
            }
        });
    }
</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        let yesCheckbox = document.getElementById("yesCheckbox");
        let noCheckbox = document.getElementById("noCheckbox");
        let btnLogZT = document.getElementById("btnLogZT");

        function toggleButton() {
            if (yesCheckbox.checked) {
                btnLogZT.style.display = "block";
                $("#ZtClassfictions").show();
            } else {
                btnLogZT.style.display = "none";
                  $("#ZtClassfictions").hide();
            }
        }


        yesCheckbox.addEventListener("change", function () {
            noCheckbox.checked = !yesCheckbox.checked;
              $("#ZtClassfictions").show();
            toggleButton();
        });

        noCheckbox.addEventListener("change", function () {
            yesCheckbox.checked = !noCheckbox.checked;
                   $("#ZtClassfictions").hide();
            toggleButton();


        });
    });
</script>
<script>

    function InsertCallAudit() {

        var selectedZTClassification = $("#ZTClassification").val();
        var zeroToleranceValue = $("input[name='zeroTolerance']:checked").val();
          var Transaction_ID = $("#Transaction_ID").val();
        var Transaction_ID2 = $("#Transaction_ID2").val();
         var Remarks = $("#txtRemarks").val();
        var finalTransactionID = Transaction_ID || Transaction_ID2;
        var CcID = finalTransactionID;
        var totalScoreValue = $("#totalScore").text().trim();



        if (!zeroToleranceValue ) {
            alert("Please  selected  zero ToleranceValue .");

            if (zeroToleranceValue=="Yes")
            {
                  if (!selectedZTClassification ) {
                    alert("Please  selected ZTC lassification  .");
                    return false;
                  }
            }
            return false;
        }
        if (!CcID) {
            alert("Please Select Call For  Audit  .");
            return false;
        }

        if (!Remarks) {
            alert("Please Enter Remarks.");
            return false;
        }

        return {
            AuditID: $("#AuditID").val(),
            ProgramID: $("#ProgramID").val(),
            SUBProgramID: $("#SUBProgramID").val(),
            dispositionId: $("#dispositionId").val(),
            SubDispositionID: $("#SubDispositionID").val(),
             Cat1: $("#Cat1").val(),
             Cat2: $("#Cat2").val(),
             Cat3: $("#Cat3").val(),
             Cat4: $("#Cat4").val(),
             Cat5: $("#Cat5").val(),
            FromDate: $("#FromDate").val(),
            ToDate: $("#Todate").val(),
            AgentID: $("#AgentID").val(),
            TL_id: $("#TL_id").val(),
            Transaction_ID: CcID,
            Monitored_date: $("#Monitored_date").val(),
            Transaction_Date: $("#Transaction_Date").val(),
            Year: $("#Year").val(),
            Month: $("#Month").val(),
            Week: $("#Week").val(),
            ZTClassification: selectedZTClassification,
            ZeroTolerance: zeroToleranceValue,
            CQ_Scrore: totalScoreValue,
             Remarks:Remarks
        };
    }

    function InsertSectionAudit() {

         var isValid = true;
            var gridData = [];


                $("#sectionGrid tbody tr:not(:last-child)").each(function () {
                    var $row = $(this);
                    var category = $row.find("td:eq(0)").text()?.trim() || "";
                    var level = $row.find("td:eq(1)").text()?.trim() || "";
                    var sectionName = $row.find("td:eq(2)").text()?.trim() || "";
                    var qaRating = $row.find(".qa-rating").val();
                    var scorable = $row.find("td:eq(4)").text()?.trim() || "";
                    var score = $row.find("td:eq(5)").text()?.trim() || "";
                   var comments = $row.find("input[type='text']").val()?.trim() || "";
                    var fatal = $row.find(".fatal-select").val()?.trim() || "";

                    if (category === "" && level === "" && sectionName === "") {
                        return;
                    }
                    if (qaRating === "") {
                        isValid = false;
                        $row.find(".qa-rating").addClass("border border-danger");

                    } else {
                        $row.find(".qa-rating").removeClass("border border-danger");

                    }

                    if (qaRating === "Met") {
                             if ( comments === "") {
                                isValid = false;

                                 $row.find("input[type='text']").addClass("border border-danger");
                            } else {

                                 $row.find("input[type='text']").removeClass("border border-danger");
                            }

                    } else {
                        $row.find("input[type='text']").removeClass("border border-danger");

                    }

                     if (fatal === "") {
                        isValid = false;
                         return;
                        $row.find(".fatal-select").addClass("border border-danger");

                    } else {
                        $row.find(".fatal-select").removeClass("border border-danger");

                    }



                    gridData.push({
                        category: category,
                        level: level,
                        sectionName: sectionName,
                        qaRating: qaRating,
                        scorable: scorable,
                        score: score,
                        comments: comments,
                        Transaction_ID: $("#Transaction_ID").val(),
                        ProgramID: $("#ProgramID").val(),
                        SUBProgramID: $("#SUBProgramID").val(),
                        fatal:fatal
                    });
                });


            if (!isValid) {
                alert("Please select All Feilds ");
                return;
            }


        return isValid ? gridData : false;
    }

    function RootCauseEvaluation() {
          let tableData = [];
        let isValid = true;

        $("#rootCauseTable tbody tr").each(function () {
            let row = $(this);
            let metricRCA = row.find("td:eq(0)").text().trim();
            let controllable = row.find(".qa-rating[data-index]").val();
            let rca1 = row.find(".rca1").val();
            let rca2 = row.find(".rca2").val();
            let rca3 = row.find(".rca3").val();
            let comments = row.find("input[type='text']").val().trim();


             let fields = [
                { element: row.find(".qa-rating[data-index]"), value: controllable },
                { element: row.find(".rca1"), value: rca1 },
                { element: row.find(".rca2"), value: rca2 },
                { element: row.find(".rca3"), value: rca3 },
                { element: row.find("input[type='text']"), value: comments }
            ];

            fields.forEach(field => {
                if (!field.value) {
                    isValid = false;
                    field.element.addClass("border border-danger");
                } else {
                    field.element.removeClass("border border-danger");
                }
            });

            tableData.push({
                metricRCA: metricRCA,
                controllable: controllable,
                rca1: rca1,
                rca2: rca2,
                rca3: rca3,
                comments: comments,
                Transaction_ID: $("#Transaction_ID").val(),
                ProgramID: $("#ProgramID").val(),
                SUBProgramID: $("#SUBProgramID").val()
            });
        });

        if (!isValid) {
            alert("Please fill all fields  in Root Cause Evaluation before submitting.");
            return;
        }
        return isValid ? tableData : false;
    }

    function InsertPredictiveEvaluation() {
          let tableId = "#predictiveAnalysisTable";
        let tableBody = $(tableId + " tbody");
        let dataToSend = [];
        let isValid = true;
        let transactionId = $("#Transaction_ID").val();
        let programId = $("#ProgramID").val();
        let subProgramId = $("#SUBProgramID").val();

        tableBody.find("tr").each(function () {
            let row = $(this);
            let rowData = {
                Transaction_ID: transactionId,
                ProgramID: programId,
                SUBProgramID: subProgramId
            };

            rowData["PredictiveCSAT"] = row.find("td:eq(0)").text().trim();
            row.find("select").each(function (index) {
                let dropdown = $(this);
                let selectedValue = dropdown.val();

                if (!selectedValue) {
                    isValid = false;
                    dropdown.addClass("is-invalid");
                } else {
                    dropdown.removeClass("is-invalid");
                }

                let columnNames = [
                    "PredictiveNPS",
                    "PredictiveFCR",
                    "PredictiveRepeat",
                    "PredictiveSalesEffort",
                    "PredictiveCollectionEffort",
                    "PredictiveEscalation"
                ];
                rowData[columnNames[index]] = selectedValue;
            });

            dataToSend.push(rowData);
        });


        if (!isValid) {
            alert("Please select all dropdown values in Predictive Evaluation before submitting.");
            return;
        }
        return isValid ? dataToSend : false;
    }

    function clearValues() {
        $("#sectionGrid tbody").find("tr").each(function () {
            $(this).find(".qa-rating").val("");

            $(this).find("#Comments_Section").val("");
        });
             $("#rootCauseTable tbody, #predictiveAnalysisTable tbody").find("tr").each(function () {
            $(this).find("select").val("");
            $(this).find("input[type='text']").val("");
        });

          $("#ZTClassification").val("");
        $("#yesCheckbox, #noCheckbox").prop("checked", false);

           let container = document.getElementById("recordingContainer");
            container.innerHTML = "";
            container.style.display = "none";

             $("#SectionGried").hide();
           $("#rooutcause").hide();
             $("#Predictivediv").hide();
             $("#ZtClassfictions").hide();
             $("#Zerotollernce").hide();
             $("#ButtonForAudit").hide();
             $("#Remarks").hide();
                 $("#LastReansaction").hide();

                $("#AuditDiv").show();
                 $("#SerchRecoding").show();
                  $("#RelListDiv").show();
                     $("#LastReansaction").show();



    }
    function Reload()
    {

         location.reload();

    }


          function GetCheckAndSubmite() {
        let pauseIcon = document.getElementById("pauseIcon");

        if (pauseIcon.classList.contains("fe-pause")) {
            Swal.fire({
                icon: 'warning',
                title: 'Resume Required',
                text: 'Please resume before submitting the audit.',
                    timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
            });
            return;
        }

        var Transaction_ID = $("#Transaction_ID").val();
        var Transaction_ID2 = $("#Transaction_ID2").val();
        var finalTransactionID = Transaction_ID || Transaction_ID2;
        var CcID = finalTransactionID;

        if (!CcID) {
            Swal.fire({
                icon: 'warning',
                title: 'Missing Call',
                text: 'Please select a call for audit first.',
                    timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
            });
            return false;
        }

        var AuditType = $("#AuditID").val();

        if (AuditType == 2) {
            if ($('#hiddenValue').val() === "Disposition") {
                var dispositionId = $("#dispositionId").val();
                var SubDispositionID = $("#SubDispositionID").val();
                if (!dispositionId || !SubDispositionID) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Fields',
                        text: 'Please select Disposition and SubDisposition before submitting.',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                    return;
                }
            } else {
                if ($('#hiddencat1').val() === "YES" && !$('#Cat1').val()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Category 1',
                        text: 'Category 1 is visible but not selected!',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                    return;
                }

                if ($('#hiddencat2').val() === "YES" && !$('#Cat2').val()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Category 2',
                        text: 'Category 2 is visible but not selected!',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                    return;
                }

                if ($('#hiddencat3').val() === "YES" && !$('#Cat3').val()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Category 3',
                        text: 'Category 3 is visible but not selected!',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                    return;
                }

                if ($('#hiddencat4').val() === "YES" && !$('#Cat4').val()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Category 4',
                        text: 'Category 4 is visible but not selected!',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                    return;
                }

                if ($('#hiddencat5').val() === "YES" && !$('#Cat5').val()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Category 5',
                        text: 'SubCategory 5 is visible but not selected!',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                    return;
                }
            }
        }

        let callAuditData = InsertCallAudit();
        let sectionAuditData = InsertSectionAudit();
        let rootCauseData = RootCauseEvaluation();
        let predictiveData = InsertPredictiveEvaluation();

        console.log("Call Audit", JSON.stringify(callAuditData));
        console.log("Section", JSON.stringify(sectionAuditData));
        console.log("Root Cause", JSON.stringify(rootCauseData));
        console.log("Predictive", JSON.stringify(predictiveData));

        if (!callAuditData || !sectionAuditData || !rootCauseData || !predictiveData) {
            Swal.fire({
                icon: 'warning',
                title: 'Incomplete Submission',
                    timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true,
                text: 'Please fill all required fields before submitting.',
            });
            return;
        } else {
            endAudit();

            $.ajax({
                url: "/Monitor/FormMinitoringAuditr",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(callAuditData),
                success: function () { }
            });

            $.ajax({
                url: "/Monitor/InsertSectionAudit",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(sectionAuditData),
                success: function () { }
            });

            $.ajax({
                url: "/Monitor/InsertRouutCoauseAudit",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(rootCauseData),
                success: function (response) {
                    // handle if needed
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Submission Error',
                        text: 'An error occurred while submitting root cause data.',
                            timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                    });
                }
            });

            if ($('#Predictivecstahident').val() === "yes") {
                $.ajax({
                    type: "POST",
                    url: "/Monitor/InsertPridictiveCoauseAudit",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(predictiveData),
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Call Evaluation submitted successfully!',
                                    timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Submission Failed',
                                text: 'Failed to submit Evaluation data.',
                                    timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error occurred: " + error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while submitting data.',
                                timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                        });
                    }
                });
            }

            clearValues();
            Reload();
        }
    }



    function SubMitedata() {
         GetCheckAndSubmite();

    }


</script>


<script>
      function getWeekNumber(date) {
        var firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
        var dayOfMonth = date.getDate();
        var weekNumber = Math.ceil((dayOfMonth + firstDayOfMonth.getDay()) / 7);
        return weekNumber;
    }
    document.addEventListener("DOMContentLoaded", function () {
         var today = new Date();


        var formattedDate = today.toISOString().split('T')[0];


        document.getElementById("Monitored_date").value = formattedDate;
        document.getElementById("Transaction_Date").value = formattedDate;
          document.getElementById("Monitored_date2").value = formattedDate;
        document.getElementById("Transaction_Date2").value = formattedDate;


         var year = today.getFullYear();
        var month = today.toLocaleString('default', { month: 'long' });
        var weekNumber = getWeekNumber(today);
             document.getElementById("Year").value = year;
          document.getElementById("Month").value = month;
          document.getElementById("Week").value = weekNumber;

           document.getElementById("Year2").value = year;
          document.getElementById("Month2").value = month;
          document.getElementById("Week2").value = weekNumber;


            function configureDatePicker(id) {
                const dateInput = document.getElementById(id);

                dateInput.max = new Date().toISOString().split("T")[0]; // Prevent future dates

                dateInput.addEventListener("change", function () {
                    validateDate(id);
                });
            }

            function validateDate(id) {
                let selectedDate = new Date(document.getElementById(id).value);
                let currentDate = new Date();
                let minAllowedDate = new Date(currentDate.getTime() - (48 * 60 * 60 * 1000)); // 48 hours ago

                if (selectedDate > currentDate) {
                    alert("Selected date cannot be in the future.");
                    document.getElementById(id).value = "";
                } else if (selectedDate < minAllowedDate) {
                    alert("Selected date must be within the last 48 hours.");
                    document.getElementById(id).value = "";
                }
            }

            configureDatePicker("FromDate");
            configureDatePicker("ToDate");
        });
</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const yesCheckbox = document.getElementById("yesCheckbox");
        const noCheckbox = document.getElementById("noCheckbox");

        yesCheckbox.addEventListener("change", function () {
            if (this.checked) {
                noCheckbox.checked = false;
            }
        });

        noCheckbox.addEventListener("change", function () {
            if (this.checked) {
                yesCheckbox.checked = false;
            }
        });
    });
</script>
<script>


    document.addEventListener("click", function (event) {

        let target = event.target;
        if (target.classList.contains("play-audio")) {
            document.querySelectorAll(".play-audio").forEach(el => el.style.color = "gray");
            target.style.color = "#03FD03";
            target.style.setProperty("color", "#03FD03", "important");

                $("#LastReansaction").hide();
                  $("#RelListDiv").hide();
                   $("#LastReansaction").hide();
                    $("#SerchRecoding").hide();
                      $("#AuditDiv").hide();


            var audioPath = target.getAttribute("data-path");

                              $.ajax({
                        type: "POST",
                        url: "/Monitor/CheckTheAuditIsDone",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: JSON.stringify({ id: audioPath }),
                        success: function (response) {
                            if (response.success) {
                                if (response.connid && response.connid.trim() !== "") {
                                    alert("For This Transaction ID, Audit Has Been Done");
                                      $("#LastReansaction").hide();
                                    $("#RelListDiv").hide();

                                    $("#SerchRecoding").show();
                                    $("#AuditDiv").show();

                                    return;
                                }

                                else{

                                 $("#LastReansaction").show();
                                  $("#RelListDiv").hide();

                                      $("#Transaction_ID").val(audioPath);
                                        $.ajax({
                                            type: "POST",
                                            data: JSON.stringify({ id: audioPath }),
                                            url: "/Monitor/GetRecording",
                                            contentType: "application/json; charset=utf-8",
                                            dataType: "json",
                                            success: function (response) {
                                                if (response.success) {

                                                    let container = document.getElementById("recordingContainer");
                                                    container.innerHTML = ""; // Clear previous content
                                                    let imagePath = '/images/man.gif';
                                                    console.log("Image Path:", imagePath); // Debugging

                                                    container.style.backgroundImage = `url('${imagePath}')`;
                                                    container.style.backgroundSize = "cover";
                                                    container.style.backgroundPosition = "center";
                                                    container.style.backgroundRepeat = "no-repeat";
                                                    container.style.minHeight = "300px"; // Adjust height as needed
                                                    container.style.display = "flex";
                                                    container.style.alignItems = "center";
                                                    container.style.justifyContent = "center";
                                                    container.style.flexDirection = "column"; // Stack elements vertically
                                                    container.style.padding = "20px";
                                                    container.style.borderRadius = "19px";
                                                    if (!response.audioData) {
                                                        console.error("No audio data received.");
                                                        return;
                                                    }

                                                    let byteCharacters;
                                                    try {
                                                        byteCharacters = atob(response.audioData);
                                                    } catch (e) {
                                                        console.error("Invalid Base64 audio data:", e);
                                                        return;
                                                    }

                                                    let byteNumbers = new Uint8Array(byteCharacters.length);
                                                    for (let i = 0; i < byteCharacters.length; i++) {
                                                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                                                    }

                                                    let blob = new Blob([byteNumbers], { type: "audio/mpeg" });
                                                    let audioUrl = URL.createObjectURL(blob);

                                                    console.log("Audio URL:", audioUrl); // Debugging


                                                    let audioPlayer = document.createElement("audio");
                                                    audioPlayer.controls = true;
                                                    audioPlayer.src = audioUrl;
                                                    audioPlayer.style.width = "100%";
                                                    audioPlayer.style.maxWidth = "439px";
                                                    audioPlayer.style.margin = "5px auto";
                                                    audioPlayer.style.marginTop = "449px";
                                                    audioPlayer.autoplay = true;
                                                    container.appendChild(audioPlayer);
                                                    audioPlayer.play().catch(error => {
                                                        console.error("Autoplay blocked:", error);
                                                    });
                                                } else {
                                                    console.error("Error: " + response.message);
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                console.error("Error occurred: " + error);
                                            }
                                        });
                                }
                            } else {
                                console.error("Error: " + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                    });





        }
    });



</script>

<script>
    let timerInterval, startTime, pauseTime, resumeTime, endTime , SaveEnodTimes;
    let elapsedSeconds = 0, pauseCount = 0, pauseLimit=0, totalPauseDuration = 0;
    let auditLogs = [];


    function updateTimerDisplay() {
        let minutes = Math.floor(elapsedSeconds / 60);
        let seconds = elapsedSeconds % 60;
        document.getElementById("timer").innerText =
            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    function startAudit() {
        DisplayDiv();




         var selectedValue = document.getElementById("SUBProgramID").value;
         $.ajax({
             type: "POST",
             url: "/Monitor/GetPauseLimit",
             contentType: "application/json; charset=utf-8",
             dataType: "json",
             data: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: $('#ProgramID').val() }),
             success: function (response) {

                      pauseLimit = response.pauselimit;
                       document.getElementById("pauseLimit").innerText = `Limit Of Pauses: ${pauseLimit}`;

             },
             error: function (xhr, status, error) {
                 console.error("Error occurred: " + error);
             }
         });


        startTime = new Date();
        document.getElementById("pauseButton").disabled = false;

        document.getElementById("StartAudit").disabled = true;

        auditLogs.push({ type: "Start", time: startTime });

        timerInterval = setInterval(() => {
            elapsedSeconds++;
            updateTimerDisplay();
        }, 1000);
    }

     function SaveEndTime() {
        let SavendTime = new Date();
        document.getElementById("hiddenEndTime").value = SavendTime;
        clearInterval(timerInterval);

        Swal.fire({
            icon: 'success',
            title: 'Saved!',
            text: 'Form saved successfully!',
            confirmButtonText: 'OK',
                timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
        });
    }


       function togglePause() {
        let pauseButton = document.getElementById("pauseButton");
        let pauseIcon = document.getElementById("pauseIcon");

        if (timerInterval) {
            if (pauseCount >= pauseLimit) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Pause Limit Reached',
                    text: `Now you cannot take a pause because you have reached the pause limit: ${pauseLimit}`,
                    confirmButtonText: 'OK',
                        timer: 4000, // 4000ms = 4 seconds
    timerProgressBar: true
                });
                return;
            }

            clearInterval(timerInterval);
            timerInterval = null;
            pauseTime = new Date();
            pauseCount++;
            pauseIcon.classList.replace("fe-play", "fe-pause");

            auditLogs.push({ type: "Pause", time: pauseTime });

            document.getElementById("pauseCount").innerText = `Pauses: ${pauseCount}`;

            pauseTimeout = setTimeout(() => {
                resumeTimer();
            }, 30000);
        } else {
            clearTimeout(pauseTimeout);
            resumeTimer();
        }
    }

        function resumeTimer() {
        resumeTime = new Date();
        let pauseDuration = (resumeTime - pauseTime) / 1000;
        totalPauseDuration += pauseDuration;

        auditLogs.push({ type: "Resume", time: resumeTime, pauseDuration });

        timerInterval = setInterval(() => {
            elapsedSeconds++;
            updateTimerDisplay();
        }, 1000);

        let pauseIcon = document.getElementById("pauseIcon");
        pauseIcon.classList.replace("fe-pause", "fe-play");
    }
    function endAudit() {
        clearInterval(timerInterval);
        timerInterval = null;
        // endTime = new Date();
         let hiddenEndTimeValue = document.getElementById("hiddenEndTime").value;
      let endTime = hiddenEndTimeValue ? new Date(hiddenEndTimeValue) : new Date();
        auditLogs.push({ type: "End", time: endTime });

        // Prepare Data for AJAX
        let auditData = {
            startTime: startTime,
            endTime: endTime,
            totalDuration: elapsedSeconds,
            totalPauseCount: pauseCount,
            totalPauseDuration: totalPauseDuration,
            logs: auditLogs,
             Transaction_ID: $("#Transaction_ID").val(),
                ProgramID: $("#ProgramID").val(),
                SUBProgramID: $("#SUBProgramID").val()

        };

        console.log("Audit Data Sent:", auditData); // Debugging
    fetch('/save-audit', {
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify(auditData)
       })
       .then(response => response.json())
       .then(data => {
           console.log("Server Response:", data);
           alert("Audit Saved Successfully!");
       })
       .catch(error => console.error("Error:", error))
        // Reset UI
        document.getElementById("StartAudit").disabled = false;
        document.getElementById("pauseButton").disabled = true;

        document.getElementById("pauseCount").innerText = "Pauses: 0";
        elapsedSeconds = 0;
        pauseCount = 0;
        totalPauseDuration = 0;
        auditLogs = [];
        updateTimerDisplay();
    }
</script>
<script>


     function HideDiv()
     {

         $("#SectionGried").hide();
           $("#rooutcause").hide();
             $("#Predictivediv").hide();
             $("#ZtClassfictions").hide();
             $("#Zerotollernce").hide();
               $("#ButtonForAudit").hide();
                   $("#Remarks").hide();

                $("#AuditDiv").show();
                 $("#SerchRecoding").show();
                  $("#RelListDiv").show();


     }

     function DisplayDiv()
     {

         $("#SectionGried").show();
           $("#rooutcause").show();
                if($('#Predictivecstahident').val()==="yes")
                    { $("#Predictivediv").show();


                    }
                    else
                    {  $("#Predictivediv").hide();

                    }

            // $("#ZtClassfictions").show();
             $("#Remarks").show();
             $("#Zerotollernce").show();
               $("#ButtonForAudit").show();
     }
    function OnAuditChange()
    {
               var selectedValue = document.getElementById("SUBProgramID").value;

    $.ajax({
           type: "POST",
           url: "/Monitor/GetDispositoin",
           contentType: "application/json; charset=utf-8",
           dataType: "json",
           data: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: $('#ProgramID').val() }),
           success: function (response) {

                      var dropdown = $('#dispositionId');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Disposition</option>');

                    if (response.success && response.samplesize) {
                        response.samplesize.forEach(function (item) {
                            dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }


                      var dropdown = $('#AgentID');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Agent Name</option>');

                    console.log(JSON.stringify(response)); // Debugging

                    // Ensure we use the correct response property
                    if (response.success && response.agentlist) {
                        response.agentlist.forEach(function (item) {
                            dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }





                      var dropdownCat1 = $('#Cat1');
                    dropdownCat1.empty();
                    dropdownCat1.append('<option value="">Select Category 1</option>');


                      var dropdownCat2 = $('#Cat2');
                    dropdownCat2.empty();
                    dropdownCat2.append('<option value="">Select Category 2</option>');


                      var dropdownCat3 = $('#Cat3');
                    dropdownCat3.empty();
                    dropdownCat3.append('<option value="">Select Category 3</option>');


                      var dropdownCat4 = $('#Cat4');
                    dropdownCat4.empty();
                    dropdownCat4.append('<option value="">Select Category 4</option>');


                      var dropdownCat5 = $('#Cat5');
                    dropdownCat5.empty();
                    dropdownCat5.append('<option value="">Select Category 5</option>');



                     if (response.success && response.cat1) {
                        response.cat1.forEach(function (item) {
                            dropdownCat1.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }
                     if (response.success && response.cat2) {
                        response.cat2.forEach(function (item) {
                            dropdownCat2.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }
                     if (response.success && response.cat3) {
                        response.cat3.forEach(function (item) {
                            dropdownCat3.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }
                     if (response.success && response.cat4) {
                        response.cat4.forEach(function (item) {
                            dropdownCat4.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }
                     if (response.success && response.cat5) {
                        response.cat5.forEach(function (item) {
                            dropdownCat5.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }



               var audit = $("#AuditID").val();
                    if(audit==2)
                    {
                         if(response.typeOfDisposition==="Disposition")
                           {
                                     $("#SUBDispoID").show();
                                      $("#DispoID").show();
                                      $("#Cat_1").hide();
                                      $("#Cat_2").hide();
                                      $("#Cat_3").hide();
                                      $("#Cat_4").hide();
                                      $("#Cat_5").hide();
                           }
                           else{
                                       $("#SUBDispoID").hide();
                                        $("#DispoID").hide();
                                          if (response.success && response.cat1) {

                            let allEmpty = response.cat1.every(item => item.text.trim() === "" && item.value.trim() === "");

                            if (allEmpty || response.cat1.length === 0) {
                                $('#Cat_1').hide();
                                  $('#hiddencat1').val("NO");
                            } else {
                                $('#Cat_1').show();
                                  $('#hiddencat1').val("YES");
                                   dropdownCat1.empty();
                                     dropdownCat1.append('<option value="">Select Category 1</option>');
                                response.cat1.forEach(function (item) {

                                    dropdownCat1.append('<option value="' + item.value + '">' + item.text + '</option>');
                                });
                            }
                        }
                        if (response.success && response.cat2) {

                            let allEmpty = response.cat2.every(item => item.text.trim() === "" && item.value.trim() === "");

                            if (allEmpty || response.cat2.length === 0) {
                                $('#Cat_2').hide();
                                  $('#hiddencat2').val("NO");
                            } else {
                                $('#Cat_2').show();
                                  $('#hiddencat2').val("YES");
                                     dropdownCat2.empty();
                                       dropdownCat2.append('<option value="">Select Category 2</option>');
                                response.cat2.forEach(function (item) {

                                    dropdownCat2.append('<option value="' + item.value + '">' + item.text + '</option>');
                                });
                            }
                        }
                        if (response.success && response.cat3) {

                            let allEmpty = response.cat3.every(item => item.text.trim() === "" && item.value.trim() === "");

                            if (allEmpty || response.cat3.length === 0) {
                                $('#Cat_3').hide();
                                  $('#hiddencat3').val("No");
                            } else {
                                $('#Cat_3').show();
                                  $('#hiddencat3').val("YES");
                                    dropdownCat3.empty();
                                      dropdownCat3.append('<option value="">Select Category 3</option>');
                                response.cat3.forEach(function (item) {

                                    dropdownCat3.append('<option value="' + item.value + '">' + item.text + '</option>');
                                });
                            }
                        }
                        if (response.success && response.cat4) {

                            let allEmpty = response.cat4.every(item => item.text.trim() === "" && item.value.trim() === "");

                            if (allEmpty || response.cat4.length === 0) {
                                $('#Cat_4').hide();
                                  $('#hiddencat4').val("NO");
                            } else {
                                $('#Cat_4').show();
                                  $('#hiddencat4').val("YES");
                                   dropdownCat4.empty();
                                     dropdownCat4.append('<option value="">Select Category 4</option>');
                                response.cat4.forEach(function (item) {

                                    dropdownCat4.append('<option value="' + item.value + '">' + item.text + '</option>');
                                });
                            }
                        }
                        if (response.success && response.cat5) {

                            let allEmpty = response.cat5.every(item => item.text.trim() === "" && item.value.trim() === "");

                            if (allEmpty || response.cat5.length === 0) {
                                $('#Cat_5').hide();
                                  $('#hiddencat5').val("No");
                            } else {
                                $('#Cat_5').show();
                                  $('#hiddencat5').val("YES");
                                    dropdownCat5.empty();
                                      dropdownCat5.append('<option value="">Select Category 5</option>');
                                response.cat5.forEach(function (item) {

                                    dropdownCat5.append('<option value="' + item.value + '">' + item.text + '</option>');
                                });
                            }
                        }

                           }
                    }
                    else{
                                    $("#DispoID").hide();
                                    $("#SUBDispoID").hide();
                                      $("#Cat_1").hide();
                                      $("#Cat_2").hide();
                                      $("#Cat_3").hide();
                                      $("#Cat_4").hide();
                                      $("#Cat_5").hide();
                    }

           },
           error: function (xhr, status, error) {
               console.error("Error occurred: " + error);
           }
       });




    }
        function clearFields() {
        $("#SUBProgramID").empty().append('<option value="">Select Sub Program</option>');
        $("#dispositionId").empty().append('<option value="">Select Disposition</option>');
        $("#SubDispositionID").empty().append('<option value="">Select Sub Disposition</option>');
        $("#AgentID").empty().append('<option value="">Select Agent</option>');

        $("#TL_id").val("");
        $("#RelListDiv").hide();
            $("#LastReansaction").hide();
    }

        function clearFieldsSubProcesssChange() {

        $("#dispositionId").empty().append('<option value="">Select Disposition</option>');
        $("#SubDispositionID").empty().append('<option value="">Select Sub Disposition</option>');
        $("#AgentID").empty().append('<option value="">Select Agent</option>');

        $("#TL_id").val("");
        $("#RelListDiv").hide();
            $("#LastReansaction").hide();
    }
    function onProgramChange() {
           var programId = document.getElementById("ProgramID").value;


           if (programId == "") {
               alert("Please Select Program first");
               return;
           }
           $.ajax({
               type: "POST",
               data: JSON.stringify({ id: programId }),

               url: "/Admin/GetSUBProcessList",
               contentType: "application/json; charset=utf-8",
               dataType: "json",
               success: function (response) {

                   var dropdown = $('#SUBProgramID');
                   dropdown.empty();
                   dropdown.append('<option value="">Select Sub Process</option>');
                   response.proces.forEach(function (item) {
                       dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                   });
               },
               error: function (xhr, status, error) {
                   console.error("Error occurred: " + error);
               }
           });


           clearFields();

       }


        function onAgentIDChange() {

             var fromDate = $("#FromDate").val();
                var toDate = $("#Todate").val();
                var agentId = $("#AgentID").val();


                      if (!fromDate || !toDate ) {
                                $("#FromDate").val("");
                                $("#Todate").val("");
                                alert("Invalid date selection. Dates have been cleared.");
                                return;
                            }
                if (!agentId) {
                    alert("Please select an Agent.");
                    return;
                }
           var programId = document.getElementById("AgentID").value;
             console.log("Agent ID .. " +programId );

           if (programId == "") {
               alert("Please Select Agent first");
               return;
           }
           $.ajax({
               type: "POST",
               data: JSON.stringify({ id: programId }),

               url: "/Monitor/GetTLName",
               contentType: "application/json; charset=utf-8",
               dataType: "json",
               success: function (response) {
                if (response.success) {
                    $("#TL_id").val(response.tl_name);

                } else {
                    alert("Error fetching TL Name.");
                    $("#RelListDiv").hide();
                }
               },
               error: function (xhr, status, error) {
                   console.error("Error occurred: " + error);
               }
           });



           $.ajax({
                    type: "POST",
                    data: JSON.stringify({ fromDate: fromDate, toDate: toDate, agentId: agentId }),
                    url: "/Monitor/GetRecListBydate",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            $("#RelListDiv").show();
                             let recList = JSON.parse(response.reclist);


                              var tableBody = document.getElementById("recTableBody");

                                recList.forEach(function (rec) {
                                    var row = `<tr>
                                        <td class="text-center">
                                            <div >
                                             <span class="fe fe-24 fe-headphones play-audio" style="color: gray;" data-path="${rec.CONNID}"></span>

                                            </div>

                                        </td>
                                        <td >${rec.AgentId}</td>
                                         <td >${rec.CONNID}</td>

                                        <td >${rec.StartTime}</td>
                                        <td >${rec.EndTime}</td>
                                        <td >${rec.CallDuration}</td>
                                    </tr>`;

                                    tableBody.innerHTML += row;
                                });
                        } else {
                            alert("Error processing date range.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error occurred: " + error);
                    }
                });
                GetSectionGried();

       }

        function populateGrid(data, ratingList) {
        var tableBody = $("#sectionGrid tbody");
        tableBody.empty();

        if (data.length === 0) {
            tableBody.append("<tr><td colspan='10' class='text-center'>No records found</td></tr>");
            return;
        }

        $.each(data, function (index, item) {
            // Create options dynamically from ratingList
            var ratingOptions = `<option value="">Select Rating</option>`;
            $.each(ratingList, function (_, rating) {
                ratingOptions += `<option value="${rating.text}">${rating.text}</option>`;
            });

            var row = `<tr>
                <td>${item.category}</td>
                <td>${item.level}</td>
                <td>${item.sectionName}</td>
                <td>
                    <select class="qa-rating form-control" data-index="${index}">
                        ${ratingOptions}
                    </select>
                </td>
                <td>${item.scorable}</td>
                <td class="score-col">${item.score}</td>
                <td><input type="text" class="form-control" id="Comments_Section" placeholder="Enter Comments Section"></td>
                <td>
                    <select class="fatal-select form-control" data-index="${index}">
                        <option value="">Select Fatal</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                </td>
            </tr>`;

            tableBody.append(row);
        });

        var footerRow = `<tr>
            <td colspan="5" class="text-right font-weight-bold">CQ Scores:</td>
            <td id="totalScore" class="font-weight-bold">0</td>
        </tr>`;
        tableBody.append(footerRow);

        // Bind event handlers for score calculation
        $(".fatal-select").on("change", function () {
            calculateTotalScore();
        });

        $(".qa-rating").on("change", function () {
            var selectedValue = $(this).val();
            var rowIndex = $(this).data("index");
            var scoreCell = $(this).closest("tr").find(".score-col");

            if (selectedValue === "Yes" || selectedValue ===  "Met" ||selectedValue === "Meeting_expectations"||selectedValue ===  "exceeding expectations" ||selectedValue === "Partially Met") {
                scoreCell.text(data[rowIndex].score);
            } else {
                scoreCell.text(0);
            }
            calculateTotalScore();
        });

        calculateTotalScore();
    }

     function calculateTotalScore() {
      let isFatal = false;
        let total = 0;
        $("#sectionGrid tbody tr").each(function () {
            var scorable = $(this).find("td:nth-child(5)").text().trim(); // 5th column (scorable)
            var score = parseInt($(this).find(".score-col").text()) || 0;
             var fatalValue = $(this).find(".fatal-select").val();

        if (fatalValue === "Yes" ) {
            isFatal = true;
        }
            if (scorable === "Yes") {
                total += score;
            }
        });
        $("#totalScore").text(isFatal ? "0" : total);
    }

       function GetSectionGried()
       {
           var selectedValue = document.getElementById("SUBProgramID").value;
            $.ajax({
                type: "POST",
                url: "/ManageForm/GetSectionGried",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: $('#ProgramID').val() }),
                success: function (response) {
                  console.log(JSON.stringify(response));
                      populateGrid(response.sectionGrid, response.filteredRatingList);

                            if (response?.filteredPredictiveList?.length > 0) {

                                 populateTable("#predictiveAnalysisTable", response.filteredPredictiveList, "Predictive");
                                  $('#Predictivecstahident').val("yes");
                            } else {
                                console.error("filteredPredictiveList is empty.");
                                 $('#Predictivecstahident').val("bo");

                                    $("#Predictivediv").hide();
                            }


                            if (response?.filteredZTClassificationList?.length > 0) {
                                // populateTable("#ztClassificationTable", response.filteredZTClassificationList, "ZTClassification");
                                  const dropdown = document.getElementById("ZTClassification");

                                    dropdown.innerHTML = '<option value="">Select  ZT Classification</option>';

                                     response.filteredZTClassificationList.forEach(item => {
                                        let option = document.createElement("option");
                                        option.value = item.value;
                                        option.textContent = item.text;
                                        dropdown.appendChild(option);
                                    });

                            } else {
                                console.error("filteredZTClassificationList is empty.");
                            }

                              if (response?.filteredRoutwCauseList?.length > 0) {
                                populateTable("#rootCauseTable", response.filteredRoutwCauseList, "RootCause");
                            } else {
                                console.error("filteredRoutwCauseList is empty.");
                            }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });
       }
    function onSubProgramChange() {

        var selectedValue = document.getElementById("SUBProgramID").value;

        if (selectedValue === '') {
            alert('Please select a valid Sub Program Name.');
         return;
        } else {
            console.log("Selected Sub Program ID:", selectedValue);


            $.ajax({
                type: "POST",
                url: "/Monitor/GetDispositoin",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: $('#ProgramID').val() }),
                success: function (response) {

                    $('#hiddenValue').val(response.typeOfDisposition);
                    $("#Audit_Type").show();
                      console.log(JSON.stringify(response.typeOfDisposition));
                    // if(response.typeOfDisposition==="Disposition")
                    // {
                    //         $("#SUBDispoID").show();
                    //            $("#DispoID").show();
                    //            $("#Cat_1").hide();
                    //            $("#Cat_2").hide();
                    //            $("#Cat_3").hide();
                    //            $("#Cat_4").hide();
                    //            $("#Cat_5").hide();
                    // }
                    // else{
                    //     $("#SUBDispoID").hide();
                    //      $("#DispoID").hide();
                    //        $("#Cat_1").show();
                    //            $("#Cat_2").show();
                    //            $("#Cat_3").show();
                    //            $("#Cat_4").show();
                    //            $("#Cat_5").show();

                    // }

                    console.log(response.typeofprocess);
                    if(response.typeofprocess==="Non_Voice")
                    {
                        $("#NonVoice").show();
                        $("#SerchRecoding").hide();

                    }
                    else{
                         $("#NonVoice").hide();
                        $("#SerchRecoding").show();
                    }


                    if (response.success && response.samplesize) {
                        response.samplesize.forEach(function (item) {
                            dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }




                      var dropdown = $('#AgentID');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Agent Name</option>');

                    console.log(JSON.stringify(response)); // Debugging

                    // Ensure we use the correct response property
                    if (response.success && response.agentlist) {
                        response.agentlist.forEach(function (item) {
                            dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }





                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });
        }
        clearFieldsSubProcesssChange();
    }



    function onDispositionChange() {

        var selectedValue = document.getElementById("SUBProgramID").value;
        var Disposition = document.getElementById("dispositionId").value;

        if (Disposition === '') {
            alert('Please select a valid Disposition Name.');
      return;
        } else {
            console.log("Selected Sub Program ID:", selectedValue);


            $.ajax({
                type: "POST",
                url: "/Monitor/GetSubDispositoin",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({ SUBProcessID: selectedValue, ProcessID: $('#ProgramID').val()  ,Disposition:Disposition}),
                success: function (response) {
                  var dropdown = $('#SubDispositionID');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Sub Disposition</option>');

                    console.log(JSON.stringify(response));
                    if (response.success && response.samplesize) {
                        response.samplesize.forEach(function (item) {
                            dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                        });
                     }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });
        }
    }



        function populateTable(tableId, data, type) {
        let tableBody = $(tableId + " tbody");
        tableBody.empty();

        // Fetch RCA values once and then populate table
        $.ajax({
            type: "GET",
            url: "/Monitor/GetRCAValues",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (!response.success) {
                    console.error("Failed to fetch RCA values.");
                    return;
                }

                console.log("Rec List");

                console.log(JSON.stringify(response));
                let rca1Options = generateDropdownOptions(response.rca1);
                let rca2Options = generateDropdownOptions(response.rca2);
                let rca3Options = generateDropdownOptions(response.rca3);

                data.forEach((item, index) => {
                    let extraColumns = "";

                    if (type === "RootCause") {
                        extraColumns = `
                            <td>
                                <select class="qa-rating form-control" data-index="${index}">
                                    <option value="">Select Controllable</option>
                                    <option value="Yes" ${item.controllable === "Yes" ? "selected" : ""}>Yes</option>
                                    <option value="No" ${item.controllable === "No" ? "selected" : ""}>No</option>
                                </select>
                            </td>
                            <td>
                                <select class="qa-rating form-control rca1" data-index="${index}">
                                    <option value="">Select RCA 1</option>
                                    ${generateDropdownOptions(response.rca1, item.rca1)}
                                </select>
                            </td>
                            <td>
                                <select class="qa-rating form-control rca2" data-index="${index}">
                                    <option value="">Select RCA 2</option>
                                    ${generateDropdownOptions(response.rca2, item.rca2)}
                                </select>
                            </td>
                            <td>
                                <select class="qa-rating form-control rca3" data-index="${index}">
                                    <option value="">Select RCA 3</option>
                                    ${generateDropdownOptions(response.rca3, item.rca3)}
                                </select>
                            </td>
                            <td>
                                <input type="text" class="form-control" placeholder="Enter value" value="${item.textValue || ''}" />
                            </td>`;
                    }
                        else if (type === "Predictive") {
                                        extraColumns = `
                                        <td>
                                            <select class="qa-rating form-control" data-index="${index}">
                                                <option value="">Select NPS</option>
                                                <option value="Positive">Positive</option>
                                                <option value="Neutral">Neutral</option> <!-- Fixed spelling -->
                                                <option value="Negative">Negative</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="qa-rating form-control" data-index="${index}">
                                                <option value="">Select FCR</option>
                                                <option value="YES">YES</option>
                                                <option value="NO">NO</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="qa-rating form-control" data-index="${index}">
                                                <option value="">Select Repeat</option>
                                                <option value="YES">YES</option>
                                                <option value="NO">NO</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="qa-rating form-control" data-index="${index}">
                                                <option value="">Select Sales effort</option>
                                                <option value="YES">YES</option>
                                                <option value="NO">NO</option>
                                            </select>
                                        </td>
                                         <td>
                                            <select class="qa-rating form-control" data-index="${index}">
                                                <option value="">Select Collection effort</option>
                                                <option value="YES">YES</option>
                                                <option value="NO">NO</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="qa-rating form-control" data-index="${index}">
                                                <option value="">Select Escalation</option>
                                                <option value="YES">YES</option>
                                                <option value="NO">NO</option>
                                            </select>
                                        </td>`;
                                    }

                    let row = `<tr>

                        <td>${item.text}</td>
                        ${extraColumns}
                    </tr>`;
                    tableBody.append(row);
                });
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });
    }

    function generateDropdownOptions(data, selectedValue = "") {
        return data.map(item => `
            <option value="${item.id}" ${item.id == selectedValue ? "selected" : ""}>
                ${item.rcA_Value}
            </option>`).join("");
    }



</script>