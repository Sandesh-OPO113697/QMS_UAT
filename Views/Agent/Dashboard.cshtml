

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Newtonsoft.Json
@model AgentDashboardViewModel
@{
    var now = DateTime.Now;
}

<style>
    .accordion-body {
        display: none;
        overflow: hidden;
        transition: max-height 0.4s ease;
    }

    .accordion-header {
        cursor: pointer;
    }

        .accordion-header:hover {
            background-color: #1f2233;
        }

    .table-responsive-wrapper {
        overflow-x: auto;
        overflow-y: auto;
        max-height: 400px;
        margin-top: 15px;
        border: 1px solid #ddd;
    }

    .table {
        min-width: 800px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1050;
        padding-top: 80px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(128, 128, 128, 0.6);
    }

    .modal-content {
        background-color: #1f2233;
        margin: auto;
        padding: 25px;
        border-radius: 10px;
        width: 80%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(128, 128, 128, 0.6);
        animation: fadeIn 0.4s ease-in-out;
    }

    .btn-wrapper {
        text-align: right;
        margin-top: 15px;
    }

    .close-btn {
        padding: 8px 16px;
        background-color: #FF581C;
        border: none;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        cursor: pointer;
    }

        .close-btn:hover {
            background-color: #FF581C;
            color: wheat;
        }
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
    body {
        background-color: #1e1e2f;
        font-family: "Segoe UI", sans-serif;
        padding: 40px;
        color: #ffffff;
    }

    .dashboard {
        max-width: 1000px;
        margin: auto;
       
        padding: 30px 40px;
        border-radius: 15px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    }

    h2 {
        text-align: center;
        color: #f0f0f0;
        margin-bottom: 30px;
    }

    canvas {
        width: 100% !important;
        height: 400px !important;
    }
</style>
<div class="dashboard card shadow mb-4">

    <div class="card-header accordion-header">
        <strong class="card-title">Agent Performance</strong>
    </div>
    <table style="width: 100%; margin-top: 30px; border-collapse: collapse; color: #e0e0e0; font-family: Arial;">
        <thead style="background-color: #333;">
            <tr>
                <th style="padding: 10px; border: 1px solid #555;">Matrix</th>
                <th style="padding: 10px; border: 1px solid #555;">Target/Goal</th>
                <th style="padding: 10px; border: 1px solid #555;">Actual Performance(MTD)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.performanceMatrix)
            {
                <tr>
                    <td style="padding: 10px; border: 1px solid #555;">@item.Matrix</td>
                    <td style="padding: 10px; border: 1px solid #555;">@item.Target</td>
                    <td style="padding: 10px; border: 1px solid #555;">@item.Actual_Performance</td>
                </tr>
            }
        </tbody>
    </table>

</div>


<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Pending Feedback Acknowledgement</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Monitoring ID</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.FeedbackList != null && Model.FeedbackList.Any())
                {
                    foreach (var item in Model.FeedbackList)
                    {
                        bool isOlderThan24Hours = (DateTime.Now - item.CreatedDate).TotalHours > 24;
                        <tr>
                            <td class="@(isOlderThan24Hours ? "text-danger" : "")">@item.TransactionID</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AgentFeedBack?TransactionID=@item.TransactionID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No pending feedback.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Accordion Section: Agent Survey -->
<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title"> Agent Survey </strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Monitoring ID</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.agentsurvey != null && Model.agentsurvey.Any())
                {
                    foreach (var item in Model.agentsurvey)
                    {
                        <tr>
                            <td>@item.TransactionID</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AttemptAgentSurvey?TransactionID=@item.TransactionID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No agent survey.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Online Assessment</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Assigned Test</th>
                    <th>Test Category</th>
                    <th>To be Completed by Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.assmentonl != null && Model.assmentonl.Any())
                {
                    foreach (var item in Model.assmentonl)
                    {
                        bool isExpired = item.expiryType == "date" ? item.expiryDate < now :
                        item.expiryType == "hours" ? item.CreatedDate.AddHours(item.expiryHours) < now :
                        false;
                        string rowClass = isExpired ? "table-danger" : "";

                        <tr style="color:@(isExpired ? "#ec011a" : "transparent")">
                            <td>@item.TestName</td>
                            <td>@item.TestCategory</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AttempAssesment?TestID=@item.TestID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center">No pending online assessments.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



<div class="card shadow mb-4">
    <div style="font-family:'Segoe UI',sans-serif;padding:40px;color:#ffffff;display:flex;justify-content:center;gap:40px;margin-top:40px;">

        <!-- Calls MTD Circle Gauge -->
        <div style="background-color:#2b2b3c;border-radius:12px;padding:30px;text-align:center;width:345px;box-shadow:0 6px 20px rgba(0,0,0,0.4);transition:transform 0.3s ease;">
            <div style="font-size:18px;margin-bottom:20px;color:#ccc;">Calls Quality</div>
            @{
                var callPercent = @Model.monthlyData.Call_MTD;
                var callStroke = callPercent > 85 ? "#00e676" : (callPercent >= 80 ? "#ffca28" : "#ff5252");
                var callDash = 440 * (callPercent / 100.0);
            }
            <svg width="160" height="160" viewBox="0 0 160 160">
                <circle cx="80" cy="80" r="70" stroke="#555" stroke-width="20" fill="none" />
                <circle cx="80" cy="80" r="70" stroke="@callStroke" stroke-width="20" fill="none"
                        stroke-dasharray="440" stroke-dashoffset="@((440 - callDash).ToString("F0"))"
                        transform="rotate(-90 80 80)" stroke-linecap="round" />
                <text x="80" y="90" text-anchor="middle" fill="@callStroke" font-size="24" font-weight="bold">
                    @Model.monthlyData.Call_MTD
                </text>
                <text x="80" y="115" text-anchor="middle" fill="#ccc" font-size="14">@callPercent%</text>
            </svg>
        </div>

        <!-- Audits MTD Circle Gauge -->
        <div style="background-color:#2b2b3c;border-radius:12px;padding:30px;text-align:center;width:345px;box-shadow:0 6px 20px rgba(0,0,0,0.4);transition:transform 0.3s ease;">
            <div style="font-size:18px;margin-bottom:20px;color:#ccc;"># Of  Audits</div>
            @{
                var auditPercent = @Model.monthlyData.AuditMTD;
                var auditStroke = auditPercent > 85 ? "#00e676" : (auditPercent >= 80 ? "#ffca28" : "#ff5252");
                var auditDash = 440 * (auditPercent / 100.0);
            }
            <svg width="160" height="160" viewBox="0 0 160 160">
                <circle cx="80" cy="80" r="70" stroke="#555" stroke-width="20" fill="none" />
                <circle cx="80" cy="80" r="70" stroke="@auditStroke" stroke-width="20" fill="none"
                        stroke-dasharray="440" stroke-dashoffset="@((440 - auditDash).ToString("F0"))"
                        transform="rotate(-90 80 80)" stroke-linecap="round" />
                <text x="80" y="90" text-anchor="middle" fill="@auditStroke" font-size="24" font-weight="bold">
                    @Model.monthlyData.AuditMTD
                </text>
                <text x="80" y="115" text-anchor="middle" fill="#ccc" font-size="14">@auditPercent%</text>
            </svg>
        </div>

    </div>

</div>

<!-- Modal Section: Sign-Off Details -->
@if (Model.ZtSignOffDataAgent != null && Model.ZtSignOffDataAgent.Any())
{
    <div id="popupModal" class="modal">
        <div class="modal-content">
            <h4>Sign-Off Details</h4>
            <div class="table-responsive-wrapper">
                <table class="table table-bordered table-striped">
                    <thead style="color:#ffff; background-color:#525452">
                        <tr>
                            <th>Process</th>
                            <th>Subprocess</th>
                            @for (int i = 1; i <= 10; i++)
                            {
                                <th>Procedure @i</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ZtSignOffDataAgent)
                        {
                            <tr>
                                <td>@item.Process</td>
                                <td>@item.SubProcessName</td>
                                <td>@item.Process_1</td>
                                <td>@item.Process_2</td>
                                <td>@item.Process_3</td>
                                <td>@item.Process_4</td>
                                <td>@item.Process_5</td>
                                <td>@item.Process_6</td>
                                <td>@item.Process_7</td>
                                <td>@item.Process_8</td>
                                <td>@item.Process_9</td>
                                <td>@item.Process_10</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="btn-wrapper">
                <button class="close-btn" onclick="closePopup()">Agent Acknowledgement</button>
            </div>
        </div>
    </div>
}

<!-- Accordion Section: Disputes -->
<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Pending Dispute Acknowledgement</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Monitoring ID</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.DisputeList != null && Model.DisputeList.Any())
                {
                    foreach (var item in Model.DisputeList)
                    {
                        bool isOlderThan24Hours = (DateTime.Now - item.CreatedDate).TotalHours > 24;
                        <tr>
                            <td class="@(isOlderThan24Hours ? "text-danger" : "")">@item.TransactionID</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AgentDisputeFeedBack?TransactionID=@item.TransactionID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No pending disputes.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



<!-- Accordion Section: Disputes -->
<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Last Update</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>UserCode</th>
                    <th>Subject</th>
                    <th>Body</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.lastUpdate != null && Model.lastUpdate.Any())
                {
                    foreach (var item in Model.lastUpdate)
                    {
                       
                        <tr>
                            <td >@item.Subject</td>
                            <td>@item.Subject</td>
                            <td>@item.Body</td>
                            <td>
                                <button class="btn btn-primary btn-sm view-update" data-id="@item.Id">View</button>

                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No pending disputes.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<style>
    body {
        background-color: #1e1e2f;
        font-family: "Segoe UI", sans-serif;
        padding: 40px;
        color: #ffffff;
    }

    .summary-container {
        display: flex;
        justify-content: center;
        gap: 40px;
        margin-top: 40px;
    }

    .summary-box {
        background-color: #2b2b3c;
        border-radius: 12px;
        padding: 30px;
        text-align: center;
        width: 200px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
        transition: transform 0.3s ease;
    }

        .summary-box:hover {
            transform: scale(1.05);
        }

    .summary-label {
        font-size: 18px;
        margin-bottom: 15px;
        color: #ccc;
    }

    .summary-value {
        font-size: 40px;
        font-weight: bold;
        color: #4bc0c0;
    }

    .summary-box.audit .summary-value {
        color: #ff9f40;
    }

    h2 {
        text-align: center;
        color: #f0f0f0;
    }
</style>
<script>
    const monthlyCtx = document.getElementById('monthlySummaryChart').getContext('2d');

    new Chart(monthlyCtx, {
      type: 'bar',
      data: {
        labels: ['Calls Quality', '# of Audits'],
        datasets: [{
          label: 'Monthly Totals',
          data: [@Model.monthlyData.Call_MTD, @Model.monthlyData.AuditMTD],
          backgroundColor: ['#36a2eb', '#ff6384'],
          borderRadius: 6,
          barThickness: 40
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: 'Calls vs Audits - MTD',
            color: '#fff',
            font: { size: 20 }
          }
        },
        scales: {
          x: {
            ticks: { color: '#ccc' },
            grid: { color: '#444' }
          },
          y: {
            beginAtZero: true,
            ticks: { color: '#ccc' },
            grid: { color: '#444' }
          }
        }
      }
    });
</script>

<!-- JavaScript for accordion and popup -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const headers = document.querySelectorAll('.accordion-header');
        headers.forEach(header => {
            header.addEventListener('click', function () {
                const body = this.nextElementSibling;
                if (body.style.display === "none" || body.style.display === "") {
                    body.style.display = "block";
                } else {
                    body.style.display = "none";
                }
            });
        });

        const popup = document.getElementById("popupModal");
        if (popup) {
            popup.style.display = "block";
        }
    });

    function closePopup() {
        document.getElementById("popupModal").style.display = "none";
        fetch('/QAManager/Agentacknowledements', {
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => console.log('Server Response:', data))
            .catch(error => console.error('AJAX Error:', error));
    }
</script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

@await Html.PartialAsync("_MailModal")
<script src="~/js/xlsx.full.min.js"></script>

<script src="~/js/notification.js"></script>

<script>

    function handlePDF(data) {
        const cleanedBase64 = data.fileBase64.replace(/\s/g, '');
        const byteCharacters = atob(cleanedBase64);
        const byteArray = new Uint8Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteArray[i] = byteCharacters.charCodeAt(i);
        }

        const file = new Blob([byteArray], { type: 'application/pdf' });
        const url = URL.createObjectURL(file); // Create a URL for the Blob

        const html = `
            <iframe src="${url}" width="100%" height="500px" style="border: 1px solid #ccc; border-radius: 6px;"></iframe>

        `;
        $('#mailModalAttachment').html(html);
       
        showRestrictedModal();
    }

    // Example function to handle Image
    function handleImage(data) {
        const byteCharacters = atob(data.fileBase64);
        const byteArray = new Uint8Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteArray[i] = byteCharacters.charCodeAt(i);
        }

        const file = new Blob([byteArray], { type: `image/${data.attachmentFileName.split('.').pop().toLowerCase()}` });
        const url = URL.createObjectURL(file);

        const html = `<img src="${url}" alt="Attachment Image" style="max-width: 100%; height: auto; border-radius: 6px; box-shadow: 0 0 8px rgba(0,0,0,0.1);">`;
        $('#mailModalAttachment').html(html);
          $('#mailModal').modal('show');
        showRestrictedModal();
    }

    // Example function to handle Spreadsheet
    function handleSpreadsheet(data) {
        const byteCharacters = atob(data.fileBase64);
        const byteArray = new Uint8Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteArray[i] = byteCharacters.charCodeAt(i);
        }

        const file = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const reader = new FileReader();

        reader.onload = function (e) {
            const result = e.target.result;
            const workbook = XLSX.read(result, { type: 'binary' });
            const sheetName = workbook.SheetNames[0];
            let rawHtml = XLSX.utils.sheet_to_html(workbook.Sheets[sheetName]);

            rawHtml = rawHtml
                .replace(/<table[^>]*>/, `<table style="width: 100%; border-collapse: collapse; font-family: 'Segoe UI', sans-serif; font-size: 14px; margin-top: 10px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05); overflow-x: auto;">`)
                .replace(/<thead>/, `<thead style="background-color: #f1f5f9;">`)
                .replace(/<th[^>]*>/g, `<th style="background-color: #e8f0fe; border: 1px solid #d0d7de; padding: 12px 14px; text-align: left; font-weight: 600; color: #333; white-space: nowrap; border-bottom: 2px solid #d0d7de;">`)
                .replace(/<td[^>]*>/g, `<td style="border: 1px solid #e0e0e0; padding: 10px 12px; color: #444; background-color: #ffffff;">`);

            const html = `
                <div style="max-height: 500px; overflow-x: auto; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; padding: 10px; background-color: #fefefe; box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.05);">
                    <style>
                        #mailModalAttachment table tr:nth-child(even) td {
                            background-color: #f9f9f9;
                        }
                        #mailModalAttachment table tr:hover td {
                            background-color: #eef6ff;
                            transition: background-color 0.3s;
                        }
                    </style>
                    ${rawHtml}
                </div>`;

            $('#mailModalAttachment').html(html);

            showRestrictedModal();


        };

        reader.readAsBinaryString(file);
    }
        function showRestrictedModal() {
                console.log("Modal element exists?", $('#mailModal').length > 0);
    console.log("Attempting to show modal...");

       const $modal = $('#mailModal');

    if ($modal.length === 0) {
        console.error("Modal not found in DOM.");
        return;
    }

    // Reset state if it's stuck
    $modal.removeClass('fade').removeClass('show').hide();

    $modal.modal({
        backdrop: 'static',
        keyboard: false
    }).modal('show');
    }
    // Example function to handle Unknown files
    function handleUnknownFile() {
        $('#mailModalAttachment').html(`<p style="color:red;">Cannot preview this file type.</p>`);

        showRestrictedModal();
    }

        $(document).on('click', '.view-update', function () {
        var updateId = $(this).data('id');

        // First AJAX: Get LastUpdate details
        $.ajax({
            url: '/Agent/LastUpdate',
            method: 'GET',
            data: { UpdateID: updateId },
            success: function (response) {
                console.log('Success:', response);

              
                $.ajax({
                    url: '/LogIn/GetNotification',
                    type: 'GET',
                    success: function (data) {

                        if (!data || !data.fileBase64 || !data.attachmentFileName) {
                         
                            $('#mailModal').modal('hide');
                            return;
                        }
                      
                        $('#mailModalSubject').text(data.subject);
                        $('#mailModalBody').html(data.body);

                        const fileExtension = data.attachmentFileName.split('.').pop().toLowerCase();
                        console.log('File Extension:', fileExtension);

                        if (fileExtension === 'pdf') {
                            console.log("PDF file detected.");
                            handlePDF(data);
                        } else if (["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(fileExtension)) {
                            console.log("Image file detected.");
                            handleImage(data);
                        } else if (["xlsx", "xls", "csv"].includes(fileExtension)) {
                            console.log("Spreadsheet file detected.");
                            handleSpreadsheet(data);
                        } else {
                            console.log("Unknown file type.");
                            handleUnknownFile();
                        }
                    },
                    error: function (xhr) {
                        console.error("Error loading notification:", xhr);
                        $('#mailModalAttachment').html(`<p style="color:red;">Error loading notification.</p>`);
                        $('#mailModal').modal('hide');
                    }
                });
            },
            error: function (xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Failed to load update.');
            }
        });
    });

</script>


       