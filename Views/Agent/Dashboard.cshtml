

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Newtonsoft.Json
@model AgentDashboardViewModel
@{
    var now = DateTime.Now;
}

<style>
    .accordion-body {
        display: none;
        overflow: hidden;
        transition: max-height 0.4s ease;
    }

    .accordion-header {
        cursor: pointer;
    }

        .accordion-header:hover {
            background-color: #1f2233;
        }

    .table-responsive-wrapper {
        overflow-x: auto;
        overflow-y: auto;
        max-height: 400px;
        margin-top: 15px;
        border: 1px solid #ddd;
    }

    .table {
        min-width: 800px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1050;
        padding-top: 80px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(128, 128, 128, 0.6);
    }

    .modal-content {
        background-color: #1f2233;
        margin: auto;
        padding: 25px;
        border-radius: 10px;
        width: 80%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(128, 128, 128, 0.6);
        animation: fadeIn 0.4s ease-in-out;
    }

    .btn-wrapper {
        text-align: right;
        margin-top: 15px;
    }

    .close-btn {
        padding: 8px 16px;
        background-color: #FF581C;
        border: none;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        cursor: pointer;
    }

        .close-btn:hover {
            background-color: #FF581C;
            color: wheat;
        }
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
    body {
        background-color: #1e1e2f;
        font-family: "Segoe UI", sans-serif;
        padding: 40px;
        color: #ffffff;
    }

    .dashboard {
        max-width: 1000px;
        margin: auto;
       
        padding: 30px 40px;
        border-radius: 15px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    }

    h2 {
        text-align: center;
        color: #f0f0f0;
        margin-bottom: 30px;
    }

    canvas {
        width: 100% !important;
        height: 400px !important;
    }
</style>
<div class="dashboard">
   
    <canvas id="performanceChart"></canvas>
</div>

<div class="card shadow mb-4">
<div style="font-family:'Segoe UI',sans-serif;padding:40px;color:#ffffff;display:flex;justify-content:center;gap:40px;margin-top:40px;">

    <!-- Calls MTD Circle Gauge -->
    <div style="background-color:#2b2b3c;border-radius:12px;padding:30px;text-align:center;width:345px;box-shadow:0 6px 20px rgba(0,0,0,0.4);transition:transform 0.3s ease;">
        <div style="font-size:18px;margin-bottom:20px;color:#ccc;">Calls MTD</div>
        @{
            var callPercent = @Model.monthlyData.Call_MTD;
            var callStroke = callPercent > 85 ? "#00e676" : (callPercent >= 80 ? "#ffca28" : "#ff5252");
            var callDash = 440 * (callPercent / 100.0);
        }
        <svg width="160" height="160" viewBox="0 0 160 160">
            <circle cx="80" cy="80" r="70" stroke="#555" stroke-width="20" fill="none" />
            <circle cx="80" cy="80" r="70" stroke="@callStroke" stroke-width="20" fill="none"
                    stroke-dasharray="440" stroke-dashoffset="@((440 - callDash).ToString("F0"))"
                    transform="rotate(-90 80 80)" stroke-linecap="round" />
            <text x="80" y="90" text-anchor="middle" fill="@callStroke" font-size="24" font-weight="bold">
                @Model.monthlyData.Call_MTD
            </text>
            <text x="80" y="115" text-anchor="middle" fill="#ccc" font-size="14">@callPercent%</text>
        </svg>
    </div>

    <!-- Audits MTD Circle Gauge -->
    <div style="background-color:#2b2b3c;border-radius:12px;padding:30px;text-align:center;width:345px;box-shadow:0 6px 20px rgba(0,0,0,0.4);transition:transform 0.3s ease;">
        <div style="font-size:18px;margin-bottom:20px;color:#ccc;">Audits MTD</div>
        @{
            var auditPercent = @Model.monthlyData.AuditMTD;
            var auditStroke = auditPercent > 85 ? "#00e676" : (auditPercent >= 80 ? "#ffca28" : "#ff5252");
            var auditDash = 440 * (auditPercent / 100.0);
        }
        <svg width="160" height="160" viewBox="0 0 160 160">
            <circle cx="80" cy="80" r="70" stroke="#555" stroke-width="20" fill="none" />
            <circle cx="80" cy="80" r="70" stroke="@auditStroke" stroke-width="20" fill="none"
                    stroke-dasharray="440" stroke-dashoffset="@((440 - auditDash).ToString("F0"))"
                    transform="rotate(-90 80 80)" stroke-linecap="round" />
            <text x="80" y="90" text-anchor="middle" fill="@auditStroke" font-size="24" font-weight="bold">
                @Model.monthlyData.AuditMTD
            </text>
            <text x="80" y="115" text-anchor="middle" fill="#ccc" font-size="14">@auditPercent%</text>
        </svg>
    </div>

</div>

</div>

<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Pending Feedback Acknowledgement</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.FeedbackList != null && Model.FeedbackList.Any())
                {
                    foreach (var item in Model.FeedbackList)
                    {
                        bool isOlderThan24Hours = (DateTime.Now - item.CreatedDate).TotalHours > 24;
                        <tr>
                            <td class="@(isOlderThan24Hours ? "text-danger" : "")">@item.TransactionID</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AgentFeedBack?TransactionID=@item.TransactionID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No pending feedback.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Accordion Section: Agent Survey -->
<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Pending Agent Survey Acknowledgement</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.agentsurvey != null && Model.agentsurvey.Any())
                {
                    foreach (var item in Model.agentsurvey)
                    {
                        <tr>
                            <td>@item.TransactionID</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AttemptAgentSurvey?TransactionID=@item.TransactionID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No agent survey.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Accordion Section: Online Assessment -->
<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Online Assessment</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Test Name</th>
                    <th>Test Category</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.assmentonl != null && Model.assmentonl.Any())
                {
                    foreach (var item in Model.assmentonl)
                    {
                        bool isExpired = item.expiryType == "date" ? item.expiryDate < now :
                        item.expiryType == "hours" ? item.CreatedDate.AddHours(item.expiryHours) < now :
                        false;
                        string rowClass = isExpired ? "table-danger" : "";

                        <tr class="@rowClass">
                            <td>@item.TestName</td>
                            <td>@item.TestCategory</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AttempAssesment?TestID=@item.TestID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center">No pending online assessments.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Section: Sign-Off Details -->
@if (Model.ZtSignOffDataAgent != null && Model.ZtSignOffDataAgent.Any())
{
    <div id="popupModal" class="modal">
        <div class="modal-content">
            <h4>Sign-Off Details</h4>
            <div class="table-responsive-wrapper">
                <table class="table table-bordered table-striped">
                    <thead style="color:#ffff; background-color:#525452">
                        <tr>
                            <th>Process</th>
                            <th>Subprocess</th>
                            @for (int i = 1; i <= 10; i++)
                            {
                                <th>Procedure @i</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ZtSignOffDataAgent)
                        {
                            <tr>
                                <td>@item.Process</td>
                                <td>@item.SubProcessName</td>
                                <td>@item.Process_1</td>
                                <td>@item.Process_2</td>
                                <td>@item.Process_3</td>
                                <td>@item.Process_4</td>
                                <td>@item.Process_5</td>
                                <td>@item.Process_6</td>
                                <td>@item.Process_7</td>
                                <td>@item.Process_8</td>
                                <td>@item.Process_9</td>
                                <td>@item.Process_10</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="btn-wrapper">
                <button class="close-btn" onclick="closePopup()">Agent Acknowledgement</button>
            </div>
        </div>
    </div>
}

<!-- Accordion Section: Disputes -->
<div class="card shadow mb-4">
    <div class="card-header accordion-header">
        <strong class="card-title">Pending Dispute Acknowledgement</strong>
    </div>
    <div class="card-body accordion-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Date</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.DisputeList != null && Model.DisputeList.Any())
                {
                    foreach (var item in Model.DisputeList)
                    {
                        bool isOlderThan24Hours = (DateTime.Now - item.CreatedDate).TotalHours > 24;
                        <tr>
                            <td class="@(isOlderThan24Hours ? "text-danger" : "")">@item.TransactionID</td>
                            <td>@item.CreatedDate</td>
                            <td>
                                <a href="/Agent/AgentDisputeFeedBack?TransactionID=@item.TransactionID" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No pending disputes.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<style>
    body {
        background-color: #1e1e2f;
        font-family: "Segoe UI", sans-serif;
        padding: 40px;
        color: #ffffff;
    }

    .summary-container {
        display: flex;
        justify-content: center;
        gap: 40px;
        margin-top: 40px;
    }

    .summary-box {
        background-color: #2b2b3c;
        border-radius: 12px;
        padding: 30px;
        text-align: center;
        width: 200px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
        transition: transform 0.3s ease;
    }

        .summary-box:hover {
            transform: scale(1.05);
        }

    .summary-label {
        font-size: 18px;
        margin-bottom: 15px;
        color: #ccc;
    }

    .summary-value {
        font-size: 40px;
        font-weight: bold;
        color: #4bc0c0;
    }

    .summary-box.audit .summary-value {
        color: #ff9f40;
    }

    h2 {
        text-align: center;
        color: #f0f0f0;
    }
</style>
<script>
    const monthlyCtx = document.getElementById('monthlySummaryChart').getContext('2d');

    new Chart(monthlyCtx, {
      type: 'bar',
      data: {
        labels: ['Calls MTD', 'Audits MTD'],
        datasets: [{
          label: 'Monthly Totals',
          data: [@Model.monthlyData.Call_MTD, @Model.monthlyData.AuditMTD],
          backgroundColor: ['#36a2eb', '#ff6384'],
          borderRadius: 6,
          barThickness: 40
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: 'Calls vs Audits - MTD',
            color: '#fff',
            font: { size: 20 }
          }
        },
        scales: {
          x: {
            ticks: { color: '#ccc' },
            grid: { color: '#444' }
          },
          y: {
            beginAtZero: true,
            ticks: { color: '#ccc' },
            grid: { color: '#444' }
          }
        }
      }
    });
</script>
<script>
     const labels = @Html.Raw(JsonConvert.SerializeObject(Model.performanceMatrix.Select(m => m.Matrix)));
    const targetData = @Html.Raw(JsonConvert.SerializeObject(Model.performanceMatrix.Select(m => m.Target)));
    const actualData = @Html.Raw(JsonConvert.SerializeObject(Model.performanceMatrix.Select(m => m.Actual_Performance)));


    const ctx = document.getElementById('performanceChart').getContext('2d');

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Target',
                    data: targetData,
                    backgroundColor: '#4bc0c0',
                    borderRadius: 6,
                    barThickness: 30
                },
                {
                    label: 'Actual',
                    data: actualData,
                    backgroundColor: '#ff9f40',
                    borderRadius: 6,
                    barThickness: 30
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        color: '#e0e0e0',
                        font: { size: 14 }
                    }
                },
                title: {
                    display: true,
                    text: 'Target vs Actual Performance',
                    color: '#ffffff',
                    font: { size: 20 }
                },
                tooltip: {
                    backgroundColor: '#333',
                    titleColor: '#fff',
                    bodyColor: '#fff'
                }
            },
            scales: {
                x: {
                    ticks: {
                        color: '#d0d0d0',
                        font: { size: 13 }
                    },
                    grid: {
                        color: '#444'
                    }
                },
                y: {
                    beginAtZero: true,
                    max: 120,
                    ticks: {
                        color: '#d0d0d0'
                    },
                    grid: {
                        color: '#444'
                    },
                    title: {
                        display: true,
                        text: 'Score',
                        color: '#ccc'
                    }
                }
            }
        }
    });
</script>

<!-- JavaScript for accordion and popup -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const headers = document.querySelectorAll('.accordion-header');
        headers.forEach(header => {
            header.addEventListener('click', function () {
                const body = this.nextElementSibling;
                if (body.style.display === "none" || body.style.display === "") {
                    body.style.display = "block";
                } else {
                    body.style.display = "none";
                }
            });
        });

        const popup = document.getElementById("popupModal");
        if (popup) {
            popup.style.display = "block";
        }
    });

    function closePopup() {
        document.getElementById("popupModal").style.display = "none";
        fetch('/QAManager/Agentacknowledements', {
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => console.log('Server Response:', data))
            .catch(error => console.error('AJAX Error:', error));
    }
</script>

<script src="~/js/jquery.min.js"></script>
@await Html.PartialAsync("_MailModal")
<script src="~/js/xlsx.full.min.js"></script>

<script src="~/js/notification.js"></script>