@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model  List<MonitoredSectionGridModel>
@* <div class="card shadow mb-4" id="SectionGried" style="display:none">
    <div class="card-header">
        <strong class="card-title"> Section</strong>
    </div>
    <div class="card-body">
        <table id="sectionGrid" class="table table-bordered">
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Level</th>
                    <th>Section Name</th>
                    <th>QA Rating</th>
                    <th>Scorable</th>
                    <th>Weightage</th>
                    <th>Comments Section</th>
                    <th>Fatal</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
 *@
<div class="col-md-12">

    <div id="recordingContainer"></div>

</div>


<div class="card shadow mb-4" id="SectionGried2" >
    <div class="card-header">
        <strong class="card-title"> Section </strong>
    </div>
    <div class="card-body">
        <div style="overflow-x: auto;">
            <table id="sectionGrid2" class="table table-bordered">
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Parameters</th>
                        <th>Sub Parameters</th>

                        <th>Section Name</th>
                        <th>QA Rating</th>
                        <th>Scorable</th>
                        <th>Score</th>
                        <th>Comments Section</th>
                        <th>Level</th>
                        <th>Fatal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.category</td>
                            <td>@item.parameters</td>
                            <td>@item.subparameters</td>

                            <td>@item.SectionName</td>
                            <td>
                                <select class="qa-rating form-control">
                                    <option value="">Select Rating</option>
                                    @{
                                        var ratings = item.ratingdrop?.Split(',') ?? Array.Empty<string>();
                                    }
                                    @foreach (var rating in ratings)
                                    {
                                        var trimmedRating = rating.Trim();
                                        <option value="@trimmedRating" selected="@(trimmedRating == item.QA_rating ? "selected" : null)">
                                            @trimmedRating
                                        </option>
                                    }
                                </select>
                            </td>


                            <td class="scorable">@item.Scorable</td>
                            <td class="score-col" data-original-score="@item.Weightage">@item.Weightage</td>


                            <td>
                                <input type="text" class="form-control Comments_Section" id="Comments_Section" placeholder="Enter Comments Section" value="@item.Commentssection" />
                            </td>
                            <td>@item.level</td>
                            <td>
                                <select class="fatal-select form-control" @(item.Fatal?.Trim() == "No" ? "disabled" : "")>
                                    <option value="">Select Fatal</option>
                                    <option value="Yes" selected="@(item.Fatal?.Trim() == "Yes" ? "selected" : null)">Yes</option>
                                    <option value="No" selected="@(item.Fatal?.Trim() == "No" ? "selected" : null)">No</option>
                                </select>
                            </td>
                        </tr>
                    }

                    <!-- Footer Row -->
                    <tr>
                        <td colspan="5" class="text-right font-weight-bold">CQ Scores:</td>
                        <td id="totalScore" class="font-weight-bold">0</td>
                        <td colspan="2"></td>
                    </tr>
                </tbody>
            </table>

        </div>
    </div>
</div>



<div class="card shadow mb-4" id="MasterCalibrator" style="display:none;margin-top:15px">
    <div class="card-header">
        <strong class="card-title"></strong>

    </div>
    <div class="card-body">

        <div class="row">
            <div class="form-group col-md-6">
                <label for="ProgramID"> Calibrator Comments</label> <span style="color:red">*</span>
                <input type="text" id="Master_Comments" class="form-control" />
            </div>

        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <button onclick="SubMiteSection()" class="btn btn-primary" id="calibration"> Calibrate</button>
            </div>

        </div>

    </div>


</div>
<script src="~/js/jquery.min.js"></script>
<script>
     var transactionId = '@ViewBag.TransactionID';
            var process = '@ViewBag.Process';
            var subProcess = '@ViewBag.subProcess';

     $(document).ready(function () {
        var transactionId = '@ViewBag.TransactionID';
        var process = '@ViewBag.Process';
        var subProcess = '@ViewBag.subProcess';

        GetSectionGrid(process, subProcess);

         $.ajax({
            type: "POST",
            data: JSON.stringify({ id: '@ViewBag.TransactionID' }),
            url: "/Monitor/GetRecording",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (!response.success) return;

                let container = document.getElementById("recordingContainer");
                container.innerHTML = "";

                container.style.cssText = `
                    background-image: url('/images/image.png');
                background-size: 100% 185%; /* Stretches fully */
                background-repeat: no-repeat;
                background-position: center;
                width: 100%;
                height: 300px; /* You can adjust this height */
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                padding: 20px;
                position: relative;
                     border-radius: 19px;
                `;

                if (!response.audioData) {
                    console.error("No audio data received.");
                    return;
                }

                try {
                    let byteCharacters = atob(response.audioData);
                    let byteNumbers = new Uint8Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }

                    let blob = new Blob([byteNumbers], { type: "audio/mpeg" });
                    let audioUrl = URL.createObjectURL(blob);

                    let audioPlayer = document.createElement("audio");
                    audioPlayer.controls = true;
                    audioPlayer.src = audioUrl;
                    audioPlayer.style.cssText = `
                         width: 100%;
                    max-width: 643px;
                    margin-top: 197px;
                    `;
                    container.appendChild(audioPlayer);
                    audioPlayer.play().catch(console.error);
                } catch (e) {
                    console.error("Invalid Base64 audio data:", e);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });
    });






         function InsertSectionAudit() {
        var isValid = true;
        var gridData = [];

        $("#sectionGrid2 tbody tr:not(:last-child)").each(function () {
            var $row = $(this);

            var category = $row.find("td:eq(0)").text().trim();
            var parameters = $row.find("td:eq(1)").text().trim();
            var subparameters = $row.find("td:eq(2)").text().trim();
            var sectionName = $row.find("td:eq(3)").text().trim();

            var $qaRatingSelect = $row.find(".qa-rating");
            var qaRatingValue = $qaRatingSelect.val();
            var qaRatingText = $qaRatingSelect.find("option:selected").text();

            var scorable = $row.find("td:eq(5)").text().trim();
            var score = $row.find("td:eq(6)").text().trim();

            var $commentsInput = $row.find(".Comments_Section");
            var comments = $commentsInput.val().trim();

            var level = $row.find("td:eq(8)").text().trim();

            var $fatalSelect = $row.find(".fatal-select");
            var fatalValue = $fatalSelect.val();
            var fatalText = $fatalSelect.find("option:selected").text();

            // Validation
            if (qaRatingValue === "") {
                isValid = false;
                $qaRatingSelect.addClass("border border-danger");
            } else {
                $qaRatingSelect.removeClass("border border-danger");
            }

            if (comments === "") {
                isValid = false;
                $commentsInput.addClass("border border-danger");
            } else {
                $commentsInput.removeClass("border border-danger");
            }

            // Push to gridData
            gridData.push({
                category: category,
                parameters: parameters,
                subparameters: subparameters,
                sectionName: sectionName,
                qaRating: qaRatingValue,
                qaRatingText: qaRatingText,
                scorable: scorable,
                score: score,
                comments: comments,
                level: level,
                fatal: fatalValue,
                fatalText: fatalText,
                Transaction_ID:transactionId,
                ProgramID: process,
                SUBProgramID:subProcess
            });
        });

        if (!isValid) {
            alert("Please select QA Rating and enter Comments in Section.");
            return false;
        }

        return gridData;
    }
        function SubMiteSection()
        {
             let sectionAuditData = InsertSectionAudit();
               console.log(JSON.stringify(sectionAuditData));
               
                     
                  
                       

              $.ajax({
                url: "/Operation/InsertSectionAudit",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(sectionAuditData),
                success: function (
                ) {  alert("Submit Calibration");
        window.location.href = "/Operation/Dashboard";
                }
            });
            
        }

      
            function populateGrid(data, ratingList) {
            var tableBody = $("#sectionGrid tbody");
            tableBody.empty();

            if (data.length === 0) {
                tableBody.append("<tr><td colspan='10' class='text-center'>No records found</td></tr>");
                return;
            }

            $.each(data, function (index, item) {
                var ratingOptions = `<option value="">Select Rating</option>`;
                $.each(ratingList, function (_, rating) {
                    ratingOptions += `<option value="${rating.text}">${rating.text}</option>`;
                });

                var row = `<tr>
                    <td>${item.category}</td>
                    <td>${item.level}</td>
                    <td>${item.sectionName}</td>
                    <td>
                        <select class="qa-rating form-control" data-index="${index}">
                            ${ratingOptions}
                        </select>
                    </td>
                    <td>${item.scorable}</td>
                    <td class="score-col">${item.score}</td>
                    <td><input type="text" class="form-control" id="Comments_Section" placeholder="Enter Comments Section"></td>
                    <td>
                        <select class="fatal-select form-control" data-index="${index}">
                            <option value="">Select Fatal</option>
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                        </select>
                    </td>
                </tr>`;

                tableBody.append(row);
            });

            var footerRow = `<tr>
                <td colspan="5" class="text-right font-weight-bold">CQ Scores:</td>
                <td id="totalScore" class="font-weight-bold">0</td>
            </tr>`;
            tableBody.append(footerRow);

            $(".fatal-select").on("change", function () {
                calculateTotalScore();
            });

            $(".qa-rating").on("change", function () {
                var selectedValue = $(this).val();
                var rowIndex = $(this).data("index");
                var scoreCell = $(this).closest("tr").find(".score-col");

                if (selectedValue === "Yes" || selectedValue ===  "Met" ||selectedValue === "Meeting_expectations"||selectedValue ===  "exceeding expectations" ||selectedValue === "Partially Met") {
                    scoreCell.text(data[rowIndex].score);
                } else {
                    scoreCell.text(0);
                }
                calculateTotalScore();
            });

            calculateTotalScore();
        }

         function calculateTotalScore() {
          let isFatal = false;
            let total = 0;
            $("#sectionGrid tbody tr").each(function () {
                var scorable = $(this).find("td:nth-child(5)").text().trim(); // 5th column (scorable)
                var score = parseInt($(this).find(".score-col").text()) || 0;
                 var fatalValue = $(this).find(".fatal-select").val();

            if (fatalValue === "Yes" ) {
                isFatal = true;
            }
                if (scorable === "Yes") {
                    total += score;
                }
            });
            $("#totalScore").text(isFatal ? "0" : total);
        }
          function GetSectionGrid(program , subprogram)
           {
               
                $.ajax({
                    type: "POST",
                    url: "/ManageForm/GetSectionGried",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                   data: JSON.stringify({ SUBProcessID: subprogram, ProcessID: program }),
                    success: function (response) {
                      console.log(JSON.stringify(response));

                          populateGrid(response.sectionGrid, response.filteredRatingList);

                              $('#SectionGried').show();
                              $('#MasterCalibrator').show();

                    },
                    error: function (xhr, status, error) {
                        console.error("Error occurred: " + error);
                    }
                });
           }

        

</script>
