@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="card shadow mb-4" style="display:none">
    <div class="card-header">
        <strong class="card-title"> Select process</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="ProgramID">Program Name</label>
                    @Html.DropDownList(
                             "ProgramID",
                             (List<SelectListItem>)ViewBag.ProcessList,
                             "Select Program",
                             new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()" }
                             )
                </div>

            </div>

            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="SUBProgramID">Sub Program Name</label>
                    <select name="SUBProgramID" id="SUBProgramID" class="custom-select" onchange="onSubProgramChange()">
                        <option value="">Select Process</option>
                    </select>
                </div>

            </div>

        </div>
    </div>
</div>

<div id="ReplicateModal"
     style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.5); z-index: 1000;">

    <div style=" background-color: white; width: 60%; margin: 5% auto; padding: 20px; border-radius: 8px; position: relative;">
        <!-- Modal Header -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <h5 style="    color: black;">Select Process For Form Replicate</h5>
            <span id="closeReplicateModal" style="font-size: 24px; font-weight: bold; cursor: pointer;">&times;</span>
        </div>

        <!-- Modal Body -->
        <div>
            <div style="display: flex; flex-wrap: wrap; gap: 20px;">
                <div style="flex: 1; min-width: 250px;">
                    <label for="Location_ForReplic">Select Location Name</label><br />
                    @Html.DropDownList(
                             "Location_ForReplic",
                             (List<SelectListItem>)ViewBag.Locations,
                             "Select Location",
                             new
                             {
                                 @style = "width:100%; padding: 6px; border: 1px solid #ccc; border-radius: 4px;",
                                 id = "Location_ForReplic",
                                 onchange = "onLocationChange_ForReplic()"
                             })
                </div>
            </div>

            <div id="ReplicateProcessDiv" style="display:none; margin-top: 20px;">
                <div style="display: flex; flex-wrap: wrap; gap: 20px;">
                    <div style="flex: 1; min-width: 250px;">
                        <label for="ProgramID_ForReplic">Program Name</label><br />
                        <select name="ProgramID_ForReplic" id="ProgramID_ForReplic"
                                onchange="onProgramChange_ForReplic()"
                                style="width:100%; padding: 6px; border: 1px solid #ccc; border-radius: 4px;">
                            <option value="">Select Process</option>
                        </select>
                    </div>

                    <div style="flex: 1; min-width: 250px;">
                        <label for="SUBProgramID_ForReplic">Sub Program Name</label><br />
                        <select name="SUBProgramID" id="SUBProgramID_ForReplic"
                                onchange="onSubProgramChange_ForReplic()"
                                style="width:100%; padding: 6px; border: 1px solid #ccc; border-radius: 4px;">
                            <option value="">Select Process</option>
                        </select>
                    </div>

                    <div style="flex: 1; min-width: 250px;">
                        <button id="Disableformreplcation" onclick="DisabeFormReplicate()"
                                style="display:none; margin-top: 28px; width: 100%; padding: 8px; background-color: #dc3545; color: white; border: none; border-radius: 4px;">
                            Disable And Replicate
                        </button>

                        <button id="Replicateformreplcation" onclick="ReplicateFormReplicate()"
                                style="display:none; margin-top: 24px; width: 100%; padding: 8px; background-color: rgb(11 13 20 / 81%); color: white; border: none; border-radius: 4px;">
                            Replicate
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4" id="SectionGried">
    <div class="card-header">
        <strong class="card-title"> Section</strong>
        <button id="AddSection" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px">ADD</button>
    </div>
    <div class="card-body">

        <table id="sectionGrid" class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Category</th>
                    <th>Parameters</th>
                    <th>Sub Parameters</th>
                    <th>Section Name</th>
                    <th>Rating</th>
                    <th>Scorable</th>
                    <th>Weightage</th>
                    <th>Level</th>
                    <th>Fatal</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>


    </div>
</div>


@* 
<div id="editModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Section</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editId">

                    <div class="form-group">
                        <label>Category</label>
                        <input type="text" class="form-control" id="editCategory">
                    </div>
                     <div class="form-group">
                        <label>Parameters</label>
                        <input type="text" class="form-control" id="Parameters">
                    </div>
                    <div class="form-group">
                        <label>Sub Parameters</label>
                        <input type="text" class="form-control" id="Sub_Parameters">
                    </div>

                    <div class="form-group">
                        <label>Section</label>
                        <select id="editSection" class="form-control"></select>
                    </div>
                    <div class="form-group" style="background-color: #495057;">
                        <label for="ratingCheckboxes">Rating</label><span style="color:red">*</span>
                        <div style="position: relative;" id="ratingDropdown">
                            <div id="selectedRatings"
                                 style="border: 1px solid #ccc; padding: 8px 10px; background-color: #2b2f45; color: #fff; border-radius: 4px; cursor: pointer;">
                                Select Ratings
                            </div>
                            <div id="ratingCheckboxes"
                                 style="display: none; border: 1px solid #ccc; border-top: none; max-height: 150px; overflow-y: auto;
                        background-color: #2b2f45; position: absolute; width: 100%; z-index: 1000; border-radius: 0 0 4px 4px;">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Scorable</label>
                        <select id="editScorable" class="form-control">
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Weightage</label>
                        <input type="text" class="form-control" id="editScore">
                    </div>

                    <div class="form-group">
                        <label>Level</label>

                        <select id="editLevel" class="form-control">
                            <option value="">Select</option>
                            <option  value="1">Level 1</option>
                            <option value="2">Level 2</option>
                            <option value="3">Level 3</option>
                            <option value="4">Level 4</option>
                            <option value="5">Level 5</option>
                            <option value="6">Level 6</option>
                            <option value="7">Level 7</option>
                            <option value="8">Level 8</option>
                            <option value="9">Level 9</option>

                        </select>
                    </div>



                    <button type="button" class="btn btn-primary" onclick="updateSection()">Update</button>
                </form>
            </div>
        </div>
    </div>
</div>

 *@

<div id="editModal"
     style="display:none; position:fixed; z-index:1000; left:0; top:0; width:100%; height:100%; overflow:auto; background-color:rgba(0,0,0,0.5);">

    <div style=" margin:10% auto; padding:20px; border:1px solid #888; width:60%; border-radius:8px; color:#000;">
        <div style="margin-bottom:10px;">
            <span id="closeEditModal"
                  style="float:right; font-size:24px; font-weight:bold; cursor:pointer;">&times;</span>
            <h5>Edit Section</h5>
        </div>

        <div style="margin-bottom:10px;">
            <form id="editForm">
                <input  type="hidden" id="editId">

                <div class="form-group">
                    <label style="color: white;">Category</label>
                    <input type="text" class="form-control" id="editCategory">
                </div>
                <div class="form-group">
                    <label style="color: white;" >Parameters</label>
                    <input type="text" class="form-control" id="Parameters">
                </div>
                <div class="form-group">
                    <label style="color: white;" >Sub Parameters</label>
                    <input type="text" class="form-control" id="Sub_Parameters">
                </div>

                <div class="form-group">
                    <label style="color: white;" >Section</label>
                    <select id="editSection" class="form-control"></select>
                </div>
                <div class="form-group" style="background-color: #0b0d14;;">
                    <label style="color: white;"  for="ratingCheckboxes">Rating</label><span style="color:red">*</span>
                    <div style="position: relative;" id="ratingDropdown">
                        <div id="selectedRatings"
                             style="border: 1px solid #ccc; padding: 8px 10px; background-color: #2b2f45; color: #fff; border-radius: 4px; cursor: pointer;">
                            Select Ratings
                        </div>
                        <div id="ratingCheckboxes"
                             style="display: none; border: 1px solid #ccc; border-top: none; max-height: 150px; overflow-y: auto;
                        background-color: #2b2f45; position: absolute; width: 100%; z-index: 1000; border-radius: 0 0 4px 4px;">
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label style="color: white;" >Scorable</label>
                    <select id="editScorable" class="form-control">
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                </div>

                <div class="form-group">
                    <label style="color: white;" >Weightage</label>
                    <input type="text" class="form-control" id="editScore">
                </div>

                <div class="form-group">
                    <label style="color: white;" >Level</label>

                    <select id="editLevel" class="form-control">
                        <option value="">Select</option>
                        <option value="1">Level 1</option>
                        <option value="2">Level 2</option>
                        <option value="3">Level 3</option>
                        <option value="4">Level 4</option>
                        <option value="5">Level 5</option>
                        <option value="6">Level 6</option>
                        <option value="7">Level 7</option>
                        <option value="8">Level 8</option>
                        <option value="9">Level 9</option>

                    </select>
                </div>



                <button type="button" class="btn btn-primary" onclick="updateSection()">Update</button>
            </form>
        </div>
    </div>
</div>


<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Root Cause Analysis</strong>
        <button id="RoouAdd" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px" onclick="AddDropDawon('rootcause')">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="rootCauseTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Value</th>
                        <th>Controllable</th>
                        <th>RCA 1</th>
                        <th>RCA 2</th>
                        <th>RCA 3</th>
                        <th>Comments Section</th>

                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>




<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Predictive Analysis</strong>
        <button id="PredictiveAdd" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px" onclick="AddDropDawon('predictive')">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="predictiveAnalysisTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Value</th>
                        <th>Predictive - NPS</th>
                        <th>Predictive - FCR</th>
                        <th>Predictive - Repeat</th>
                        <th>Predictive - Sales effort</th>
                        <th>Predictive - Collection effort</th>
                        <th>Predictive - Probable escalation</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>


<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">ZT Classification</strong>
        <button id="ZTAdd" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px" onclick="AddDropDawon('ztclassification')">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="ztClassificationTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>


<div class="card shadow mb-4" id="DisposaitionListDiv" style="display:none">
    <div class="card-header">
        <strong class="card-title">Disposition List</strong>
        <button id="AddDisposition" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">

            <table id="dispositionTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th style="display:none">Disposition ID</th>
                        <th>Disposition Name</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>


<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Sub Disposition List</strong>
        <button id="AddSubDisposition" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">

            <table id="subdispositionTable" class="table table-bordered">
                <thead>
                    <tr>
                   
                        <th>SubDisposition Name</th>
                        <th>Disposition Name</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="subDispositionModal" tabindex="-1" aria-labelledby="subDispositionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <label for="dispositionDropdown" class="form-label">Select Disposition:</label>
                <select id="dispositionDropdown" class="form-control">
                    <option value="">-- Select Disposition --</option>
                </select>

                <label for="subDispositionName" class="form-label mt-3">Sub Disposition Name:</label>
                <input type="text" id="subDispositionName" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="CancleSubDisposition" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="saveSubDisposition">Save</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="dispositionModal" tabindex="-1" aria-labelledby="dispositionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
           
            <div class="modal-body">
                <label for="dispositionName" class="form-label">Disposition Name:</label>
                <input type="text" id="dispositionName" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="saveDisposition">Save</button>
            </div>
        </div>
    </div>
</div>




<div class="card shadow mb-4">
    <div class="card-header">
    </div>
    <div class="card-body">
        <div class="row">

            <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="UpdateDynamicAllFeilds" class="btn btn-primary mt-4">Update</button>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="Disableform" class="btn btn-primary mt-4" onclick="DisabeForm()">Disable</button>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="Disableform" class="btn btn-primary mt-4" onclick="ReplicateForm()">Replicate-Form</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="dropdownModal" tabindex="-1" aria-labelledby="dropdownModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dropdownModalLabel">Select an Option</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="dynamicDropdown">Select Item:</label>
                <select id="dynamicDropdown" class="form-control">
                    <option value="">Loading...</option>
                </select>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="dropdownModalADD" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select an Option</h5>
                <button type="button" class="close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <label for="dropdownSelect">Select:</label>
                <select id="dropdownSelect" class="form-control"></select>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addSectionModal" tabindex="-1" role="dialog" aria-labelledby="addSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSectionModalLabel">Add Section</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="sectionForm">
                    <div class="form-group">
                        <label>Category</label>
                        <input type="text" class="form-control" id="category" required>
                    </div>
                    <div class="form-group">
                        <label>Section Name</label>
                        @Html.DropDownList("Section_ID", (List<SelectListItem>)ViewBag.Section_Category, "Select Section", new { @class = "custom-select", id = "Section_ID" })
                    </div>
                    <div class="form-group">
                        <label>Scorable</label>
                        <select class="form-control" id="scorable">
                            <option value="">Select</option>
                            <option value="Yes">YES</option>
                            <option value="No">NO</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Weightage</label>
                        <input type="number" class="form-control" id="score" required>
                    </div>
                    <div class="form-group">
                        <label>Level</label>
                        <select id="LevelDropdown" class="custom-select">
                            <option value="">Select</option>
                            <option value="1">Level 1</option>
                            <option value="2">Level 2</option>
                            <option value="3">Level 3</option>
                        </select>
                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveSection">Add</button>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
<script>
       $(document).ready(function () {
        // Open the modal on ADD button click
        $("#AddDisposition").click(function () {
            $("#dispositionModal").modal("show");
        });
          // Close modal on "Close" button click
            $(".btn-secondary").click(function () {
                $("#dispositionModal").modal("hide");
            });
        // Handle the Save button click
        $("#saveDisposition").click(function () {
            var dispositionName = $("#dispositionName").val().trim();

            if (dispositionName === "") {
                alert("Please enter a disposition name.");
                return;
            }

            // Create a unique ID (for demo purposes, you may replace this with a real ID from the backend)
            var uniqueID = new Date().getTime();

            // Append the new row to the table
            var newRow = `<tr>
                <td style="display:none">${uniqueID}</td>
                <td>${dispositionName}</td>
                <td><button class="btn btn-danger removeDisposition">Remove</button></td>
            </tr>`;

            $("#dispositionTable tbody").append(newRow);

            // Close the modal and clear the input
            $("#dispositionModal").modal("hide");
            $("#dispositionName").val("");
        });

        // Remove row when clicking the remove button
        $(document).on("click", ".removeDisposition", function () {
            $(this).closest("tr").remove();
        });
    });

     function bindDispositionGrid(data) {
        var table = $("#dispositionTable");
        var tbody = table.find("tbody");
        tbody.empty(); // Clear previous data

        if (data.length === 0) {
            alert("No data available.");
            return;
        }
      
        data.forEach(function (item) {
            var row = `<tr>
                <td  style="display:none">${item.dispostition_ID}</td>
                <td>${item.disposition_name}</td>
                   <td><button class="btn btn-danger removeDisposition">Remove</button></td>
            </tr>`;
            tbody.append(row);
        });

        table.show(); // Show table after binding data
    }
    </script>
<script>
        $(document).ready(function () {
        var dispositionList = []; // Store disposition data for dropdown


        $("#AddSubDisposition").click(function () {
            $("#subDispositionModal").modal("show");
        });


        $("#CancleSubDisposition").click(function () {
            $("#subDispositionModal").modal("hide");
        });


       

        // Handle Save button click
        $("#saveSubDisposition").click(function () {
            var subDispositionName = $("#subDispositionName").val().trim();
            var selectedDispositionID = $("#dispositionDropdown").val();
            var selectedDispositionText = $("#dispositionDropdown option:selected").text();

            if (selectedDispositionID === "" || subDispositionName === "") {
                alert("Please select a disposition and enter a sub disposition name.");
                return;
            }

            // Append new row to the table
            var newRow = `<tr>
                <td>${subDispositionName}</td>
                <td>${selectedDispositionText}</td>
                <td><button class="btn btn-danger removeDisposition">Remove</button></td>
            </tr>`;

            $("#subdispositionTable tbody").append(newRow);

            // Close modal and clear input
            $("#subDispositionModal").modal("hide");
            $("#subDispositionName").val("");
        });

        // Remove row on click
        $(document).on("click", ".removeDisposition", function () {
            $(this).closest("tr").remove();
        });

    });

      function populateDispositionDropdown(data) {
            dispositionList = data; // Store for later use
            var dropdown = $("#dispositionDropdown");
            dropdown.empty();
            dropdown.append('<option value="">-- Select Disposition --</option>');

            data.forEach(function (item) {
                dropdown.append(`<option value="${item.dispostition_ID}">${item.disposition_name}</option>`);
            });
        }

     function bindSubDispositionGrid(data) {
        var table = $("#subdispositionTable");
        var tbody = table.find("tbody");
        tbody.empty(); // Clear previous data

        if (data.length === 0) {
            alert("No data available.");
            return;
        }

        data.forEach(function (item) {
            var row = `<tr>
                <td >${item.subDisposition}</td>
                <td>${item.disposition}</td>
                   <td><button class="btn btn-danger removeDisposition">Remove</button></td>
            </tr>`;
            tbody.append(row);
        });

        table.show(); // Show table after binding data
    }
</script>

<script>

           function onLocationChange_ForReplic() {
        var programId = document.getElementById("Location_ForReplic").value;
        if (programId === "") {
            alert("Select a Valid Location");
            return;
        }

        console.log("Test " + programId);
        $.ajax({
            type: "POST",
            url: "/ManageForm/GetProcessListAsync",
            data: JSON.stringify({ id: programId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
                console.log("Success:", response);

                var dropdown = $('#ProgramID_ForReplic');
                dropdown.empty();
                dropdown.append('<option value="">Select Process</option>');

                // Ensure the response contains processList and it is an array
                if (response.success && Array.isArray(response.processList)) {
                    response.processList.forEach(function(item) {
                        dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                    });
                } else {
                    console.error("Error: processList is missing or not an array");
                }
                $("#ReplicateProcessDiv").show();
            },
            error: function(xhr, status, error) {
                console.error("Error:", xhr.status, xhr.statusText, error);
            }
        });
    }

</script>

<script>




        $(document).ready(function () {
        var sectionData = [];

        $("#AddSection").click(function () {
            $("#addSectionModal").modal("show");
        });

        $("#saveSection").click(function () {
            var category = $("#category").val();
            var sectionName = $("#Section_ID").val();
            var scorable = $("#scorable").val();
            var score = parseInt($("#score").val()) || 0;
            var level = $("#LevelDropdown").val();
            if (category === "") {
            alert("Please enter a category.");
            return;
        }
        if (sectionName === "" || sectionName === "Select Section") {
            alert("Please select a section.");
            return;
        }
        if (scorable === "") {
            alert("Please select Scorable (Yes/No).");
            return;
        }

        if (score === "" || isNaN(score) || parseInt(score) <= 0) {
            alert("Please enter a valid weightage greater than 0.");
            return;
        }

            if (scorable === "Yes" && score >= 100) {
                alert("Weightage must be less than 100 if Scorable is YES.");
                return;
            }


            if (scorable === "Yes" && (score > 100)) {
                alert("Total Weightage of all Scorable YES Weightage cannot exceed 100.");
                return;
            }
           var sectionText = $("#Section_ID option:selected").text();


            var newSection = {
                id: sectionData.length + 1,
                category: category,
                sectionName: sectionText,
                scorable: scorable,
                score: score,
                level: level
            };

            sectionData.push(newSection);
            console.log(JSON.stringify(sectionData));
      var totalWeightage = 0;
              $("#sectionGrid tbody tr").each(function () {
        var rowScorable = $(this).find("td:eq(3)").text().trim().toLowerCase(); // "Scorable" column (4th column, index 3)
        var rowScore = parseFloat($(this).find("td:eq(4)").text().trim()); // "Weightage" column (5th column, index 4)

        if (rowScorable === "yes" && !isNaN(rowScore)) {
            totalWeightage += rowScore;
        }
    });

    var score = parseInt($("#score").val()) || 0; // Get the entered score


    if (scorable === "Yes" && (totalWeightage + score > 100)) {
        alert("The total weightage of all 'Scorable: YES' sections cannot exceed 100. Current total after addition: " + (totalWeightage + score));
        return;
    }


            var tableBody = $("#sectionGrid tbody");
            var row = "<tr>" +
                "<td>" + newSection.id + "</td>" +
                "<td>" + newSection.category + "</td>" +
                "<td>" + newSection.sectionName + "</td>" +
                "<td>" + newSection.scorable + "</td>" +
                "<td>" + newSection.score + "</td>" +
                "<td>" + newSection.level + "</td>" +
                "<td>" +
                "<button class='btn btn-primary' onclick='editSection(" + JSON.stringify(newSection) + ")'>Edit</button> " +
                "<button class='btn btn-danger' onclick='deleteSection(" + newSection.id + ")'>Delete</button>" +
                "</td>" +
                "</tr>";

            tableBody.append(row);


            $("#addSectionModal").modal("hide");
            $("#sectionForm")[0].reset();
        });
    });


</script>


<script>





    function ReplicateFormReplicate()
    {
         var programId = document.getElementById("ProgramID_ForReplic").value;
        var subProgramId = document.getElementById("SUBProgramID_ForReplic").value;

           var ProcessIDOLD = document.getElementById("ProgramID").value;
        var SUBProcessIDOLD = document.getElementById("SUBProgramID").value;

        if (subProgramId === "") {

            alert("Select Valid Sub Program");

        } else {


                  $.ajax({
                        type: "POST",
                        data: JSON.stringify({ ProcessIDOLD: ProcessIDOLD, SUBProcessIDOLD: SUBProcessIDOLD , ProcessID: programId , SUBProcessID: subProgramId  }),
                        url: "/ManageForm/FormReplication",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                             if (response.success && response.data === 1) {
                                 alert("Form Is Replicated Successfully...!");
                                  window.location.href = "/ManageForm/FormBuilder";
                                 $('#ReplicateModal').fadeOut();
                        } else {
                            alert("Failed to Replicated the form. Please try again.");
                        }

                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                });


        }
    }
    function DisabeFormReplicate()
    {
         var programId = document.getElementById("ProgramID_ForReplic").value;
        var subProgramId = document.getElementById("SUBProgramID_ForReplic").value;

           var ProcessIDOLD = document.getElementById("ProgramID").value;
        var SUBProcessIDOLD = document.getElementById("SUBProgramID").value;

        if (subProgramId === "") {

            alert("Select Valid Sub Program");

        } else {

                $.ajax({
                        type: "POST",
                        data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
                        url: "/ManageForm/Formdisable",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                             if (response.success && response.data === 1) {

                        } else {
                            alert("Failed to disable the form. Please try again.");
                        }

                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                });

                  $.ajax({
                        type: "POST",
                        data: JSON.stringify({ ProcessIDOLD: ProcessIDOLD, SUBProcessIDOLD: SUBProcessIDOLD , ProcessID: programId , SUBProcessID: subProgramId  }),
                        url: "/ManageForm/FormReplication",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                             if (response.success && response.data === 1) {
                                 alert("Form Is Replicated Successfully...!");
                         window.location.href = "/ManageForm/FormBuilder";
                                 $('#ReplicateModal').fadeOut();
                        } else {
                            alert("Failed to Replicated the form. Please try again.");
                        }

                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                });


        }

    }
    function onSubProgramChange_ForReplic()
    {

    var programId = document.getElementById("ProgramID_ForReplic").value;
           var subProgramId = document.getElementById("SUBProgramID_ForReplic").value;

           if (subProgramId === "") {

               alert("Select Valid Sub Program");

           } else {


       $.ajax({
           type: "POST",
           data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
           url: "/ManageForm/CheckIsFormvaialableOrNot",
           contentType: "application/json; charset=utf-8",
           dataType: "json",
           success: function (response) {

                     if (response.data === 1) {

                           alert("For this Program And Sub Program Form Is Already created,...!");
                           $("#Disableformreplcation").show();
                            $("#Replicateformreplcation").hide();
                     }
                     else
                     {
                            $("#Replicateformreplcation").show();
                              $("#Disableformreplcation").hide();

                     }

           },
           error: function (xhr, status, error) {
               console.error("Error occurred: " + error);
           }
       });


           }
    }

    function ReplicateForm()
    {
          $('#ReplicateModal').fadeIn();
    }



    function onProgramChange_ForReplic() {
        var programId = document.getElementById("ProgramID_ForReplic").value;
        if (programId === "") {
            alert("Select Valid  Program");
            return;

        }
        $.ajax({
            type: "POST",
            data: JSON.stringify({ id: programId }),

            url: "/Admin/GetSUBProcessList",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {

                console.log(response.d);
                var dropdown = $('#SUBProgramID_ForReplic');
                dropdown.empty();
                dropdown.append('<option value="">Select Process</option>');
                response.proces.forEach(function (item) {
                    dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                });


            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });

    }




    $(document).ready(function () {
         var programId = "@ViewBag.ProgramId";
        var subProgramId = "@ViewBag.SubProgramId";

        $("#ProgramID").val(programId).trigger("change");

        setTimeout(function () {
            if (subProgramId) {
                $("#SUBProgramID").val(subProgramId).trigger("change");


                onSubProgramChange();
            }
        }, 500);
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const yesCheckbox = document.getElementById("yesCheckbox");
        const noCheckbox = document.getElementById("noCheckbox");

        yesCheckbox.addEventListener("change", function () {
            if (this.checked) {
                noCheckbox.checked = false;
            }
        });

        noCheckbox.addEventListener("change", function () {
            if (this.checked) {
                yesCheckbox.checked = false;
            }
        });
    });
</script>

<script>


            $(document).ready(function () {
            $("#UpdateDynamicAllFeilds").click(function () {


                    var sectionDataSection = [];
        var totalWeightageSection = 0;


     

        $("#sectionGrid tbody tr").each(function () {
            var rowScorable = $(this).find("td:eq(6)").text().trim().toLowerCase();
            var rowScore = parseFloat($(this).find("td:eq(7)").text().trim());

            if (rowScorable === "yes" && !isNaN(rowScore)) {
                totalWeightageSection += rowScore;
            }

             let programID = $("#ProgramID").val();
            let subProgramID = $("#SUBProgramID").val();
            var section2 = {

               Category: $(this).find("td:eq(1)").text().trim(),
            Parameters: $(this).find("td:eq(2)").text().trim(),
            SubParameters: $(this).find("td:eq(3)").text().trim(),
            SectionName: $(this).find("td:eq(4)").text().trim(),
                  Ratingid: $(this).find("td:eq(5) select option").map(function () {
        return $(this).text().trim();
    }).get().join(", "),

            Scorable: $(this).find("td:eq(6)").text().trim(),
           Score: isNaN(rowScore) ? 0 : rowScore,
            Level: $(this).find("td:eq(8)").text().trim(),
            Fatal: $(this).find("td:eq(9)").text().trim(),

                ProgramID:programID,
                SubProgramID:subProgramID
            };

            sectionDataSection.push(section2);
        });


                if (totalWeightageSection != 100) {
                    alert("The total weightage of all 'Scorable: YES' weightage cannot exceed 100. Current total after addition: " + totalWeightageSection);
                    return;
                }

        console.log(JSON.stringify(sectionDataSection));
        var requestData = { sections: sectionDataSection }; // Wrap the array inside an object

                    $.ajax({
                    url: "/ManageForm/UpdatesecionGried",
                    type: "POST",
                    contentType: "application/json",
                     data: JSON.stringify(requestData),
                    success: function (response) {

                    },
                    error: function (xhr, status, error) {
                        alert("Error: " + xhr.responseText);
                        return;
                        console.log(xhr);
                    }
                });


                var rootCauseValues = collectTableValues("#rootCauseTable");
                var predictiveValues = collectTableValues("#predictiveAnalysisTable");
                var ztClassificationValues = collectTableValues("#ztClassificationTable");
                 
               
               var programId = document.getElementById("ProgramID").value;
            var subProgramId = document.getElementById("SUBProgramID").value;
                var data = {
                    Root_Cause_Analysis: rootCauseValues,
                    Predictive_Analysis: predictiveValues,
                    ZT_Classification: ztClassificationValues,
                    Zero_Tolerance: "No",
                    RatinfGried:"",
                    programId:programId,
                    subProgramId:subProgramId,
                     IsActive: 1,
                    CreatedBy: "Admin",
                    UpdatedBy: "Admin",
                    CreatedDate: new Date().toISOString()
                };

                console.log("Final Data:", data);

                $.ajax({
                    url: "/ManageForm/UpdateDynamicFields",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(data),
                    success: function (response) {
                       
                    },
                    error: function (xhr, status, error) {
                        console.error("Error inserting data:", error);
                    }
                });

             
                        
              var dataToDispSend = getDispositionTableData();
               var dataToSubDispSend = getSubDispositionTableData();
              console.log("Dispo");
              console.log(JSON.stringify(dataToDispSend));
               console.log(JSON.stringify(dataToSubDispSend));



                   $.ajax({
                        url: "/SaveDispositions",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ dispositions: dataToDispSend }),
                        success: function (response) {
                           
                        },
                        error: function (error) {
                            console.log("Error:", error);
                        }
                    });

                    $.ajax({
                        url: "/SaveSubDispositions",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ subDispositions: dataToSubDispSend }),
                        success: function (response) {
                           alert("Form Edit Sucessfully");
                        },
                        error: function (error) {
                            console.log("Error:", error);
                        }
                    });



            });
        });


            function getSubDispositionTableData() {
        var subDispositionData = [];

        $("#subdispositionTable tbody tr").each(function () {
            var row = $(this);
            var subDispositionName = row.find("td:eq(0)").text().trim(); // Get SubDisposition Name
            var dispositionName = row.find("td:eq(1)").text().trim(); // Get Disposition Name
             var ProgramID = document.getElementById("ProgramID").value;
            var SubProgramID = document.getElementById("SUBProgramID").value;
            if (subDispositionName && dispositionName) {
                subDispositionData.push({
                    subDisposition: subDispositionName,
                    disposition: dispositionName,
                      ProgramID:ProgramID,
                    SubProgramID:SubProgramID
                });
            }
        });

        return subDispositionData;
    }

            function getDispositionTableData() {
        var dispositionData = [];

        $("#dispositionTable tbody tr").each(function () {
            var row = $(this);
            var dispositionID = row.find("td:eq(0)").text().trim(); // Get Disposition ID (hidden)
            var dispositionName = row.find("td:eq(1)").text().trim(); // Get Disposition Name
              var ProgramID = document.getElementById("ProgramID").value;
            var SubProgramID = document.getElementById("SUBProgramID").value;

            if (dispositionID && dispositionName) {
                dispositionData.push({
                    dispostition_ID: dispositionID,
                    disposition_name: dispositionName,
                    ProgramID:ProgramID,
                    SubProgramID:SubProgramID
                });
            }
        });

        return dispositionData;
    }

    // Send Data via AJAX
    function sendDispositionData() {
        var dataToSend = getDispositionTableData();

        if (dataToSend.length === 0) {
            alert("No data to send.");
            return;
        }

        $.ajax({
            url: "/your-api-endpoint", // Replace with your API endpoint
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ dispositions: dataToSend }),
            success: function (response) {
                console.log("Data sent successfully:", response);
            },
            error: function (error) {
                console.log("Error sending data:", error);
            }
        });
    }

    // Example: Call sendDispositionData() on button click
    $("#submitDispositions").click(function () {
        sendDispositionData();
    });

        function DisabeForm()
        {
             var programId = document.getElementById("ProgramID").value;
            var subProgramId = document.getElementById("SUBProgramID").value;

            if (subProgramId === "") {

                alert("Select Valid Sub Program");

            } else {


                    $.ajax({
            type: "POST",
            data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
            url: "/ManageForm/Formdisable",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                 if (response.success && response.data === 1) {
                alert("Success! Form has been disabled.");
                 window.location.href = "/ManageForm/FormBuilder";
            } else {
                alert("Failed to disable the form. Please try again.");
            }

            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });


            }
        }
        function collectTableValues(tableId) {
            var values = [];
            $(tableId + " tbody tr").each(function () {
                var value = $(this).find("td:nth-child(1)").text().trim();
                if (value) {
                    values.push(value);
                }
            });
            return values.join(",");
        }



             function AddDropDawon(type) {
            $.ajax({
                url: '/ManageForm/GetDynamicDropDawon',
                type: 'GET',
                data: { id: 1, type: type },
                success: function (response) {
                    if (response.success) {
                       
                              ADDDropdown(response.data, type);
                        $('#dropdownModalADD').modal('show');
                 
                       // Show modal
                    } else {
                        alert('Failed to fetch data!');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }

        function ADDDropdown(data, type) {
            console.log("Dropdown Data:", data);

            var $dropdown = $('#dropdownSelect');
            $dropdown.empty(); // Clear old options

            $.each(data, function (index, item) {
                $dropdown.append(`<option value="${item.value}">${item.text}</option>`);
            });

            $(".modal-footer").remove();
             var $modalContent = $('#dropdownModalADD .modal-content, #dropdownModal .modal-content');

            $modalContent.append(`
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal2()">Close</button>
                <button type="button" class="btn btn-success" onclick="ADDSelection('${type}')">ADD</button>
            </div>
        `);
        }

        function ADDSelection(type) {
            var selectedValue = $('#dropdownSelect').val();
            var selectedText = $('#dropdownSelect option:selected').text();

            if (!selectedValue) {
                alert('Please select a value!');
                return;
            }

            var tableId = "";
            switch (type) {
                case "ztclassification":
                    tableId = "#ztClassificationTable";
                    break;
                case "predictive":
                    tableId = "#predictiveAnalysisTable";
                    break;
                case "rootcause":
                    tableId = "#rootCauseTable";
                    break;
                case "rating":
                    tableId = "#RatingTable";
                    break;


                default:
                    alert("Invalid type");
                    return;
            }

            var isDuplicate = false;
        $(tableId + " tbody tr").each(function () {
            var existingValue = $(this).find("td:first").text().trim();
            if (existingValue === selectedValue) {
                isDuplicate = true;
                return false; // Exit loop early
            }
        });

        if (isDuplicate) {
            alert("This item is already added to the list.");
            return;
        }
         let extraColumns = "";
        if (type.toLowerCase() === "rootcause") {
            extraColumns = "<td></td><td></td><td></td><td></td><td></td>";
        } else if (type.toLowerCase() === "predictive") {
            extraColumns = "<td></td><td></td><td></td><td></td><td></td><td></td>";
        }
            $(tableId + " tbody").append(`

                <tr>
                    <td>${selectedValue}</td>
                    <td>${selectedText}</td>
                    ${extraColumns}
                        <td>

                <button class='btn btn-danger btn-sm' onclick='deleteSection(${selectedValue})'>Delete</button>
            </td>
                </tr>
            `);

            $('#dropdownModalADD').modal('hide'); // Close modal
        }

        function closeModal2() {
            $('#dropdownModalADD').modal('hide');
        }



        function onProgramChange() {
            var programId = document.getElementById("ProgramID").value;
            if (programId === "") {
                alert("Select Valid  Program");
                return;

            }

            $("#SectionGried").hide();
               $("#DisposaitionListDiv").hide();
            // $("#DynamicTable").hide();
            $.ajax({
                type: "POST",
                data: JSON.stringify({ id: programId }),

                url: "/Admin/GetSUBProcessList",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {

                    console.log(response.d);
                    var dropdown = $('#SUBProgramID');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Process</option>');
                    response.proces.forEach(function (item) {
                        dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                    });

                    if (response.proces && response.proces.length > 0) {

                    } else {


                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });

        }




            function populateGrid(data) {
        var tableBody = $("#sectionGrid tbody");
        tableBody.empty();

        if (data.length === 0) {
            tableBody.append("<tr><td colspan='11' class='text-center'>No records found</td></tr>");
            return;
        }

        $.each(data, function (index, item) {
            // Create rating dropdown
            var ratingsArray = item.ratingid ? item.ratingid.split(",") : [];
            var ratingDropdown = "<select class='form-control'>";
            ratingsArray.forEach(function (rating) {
                ratingDropdown += "<option>" + rating.trim() + "</option>";
            });
            ratingDropdown += "</select>";

            var row = "<tr>" +
                "<td>" + item.id + "</td>" +
                "<td>" + item.category + "</td>" +
             
                "<td>" + (item.parameters || '-') + "</td>" +
                "<td>" + (item.sub_Parameters || '-') + "</td>" +
                   "<td>" + ( item.sectionId || '-') + "</td>" +
                     "<td>" + ratingDropdown + "</td>" +
            
                "<td>" + item.scorable + "</td>" +
                "<td>" + item.score + "</td>" +
                "<td>" + item.level + "</td>" +
                  "<td>" + (item.fatal || '-') + "</td>" +
                "<td>" +
                "<button class='btn btn-primary btn-sm' onclick='editSection(" + JSON.stringify(item) + ")'>Edit</button> " +
                "<button class='btn btn-danger btn-sm' onclick='deleteSection(" + item.id + ")'>Delete</button>" +
                "</td>" +
                "</tr>";

            tableBody.append(row);
        });
    }

        function onSubProgramChange() {
            var programId = document.getElementById("ProgramID").value;
            var subProgramId = document.getElementById("SUBProgramID").value;

            if (subProgramId === "") {

                alert("Select Valid Sub Program");

            } else {


                    $.ajax({
            type: "POST",
            data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
            url: "/ManageForm/GetSectionGried",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                $("#SectionGried").show();
                 $("#DisposaitionListDiv").show();

                  var data = response.filteredRatingList; // Extract data

          


                console.log("Full Response:", response);
                 bindDispositionGrid(response.dispositiongried);
                  bindSubDispositionGrid(response.subdispositiongried);
                   populateDispositionDropdown(response.dispositiongried);
                        

                populateGrid(response.sectionGrid);
                 if (response?.filteredPredictiveList?.length > 0) {
                populateTable("#predictiveAnalysisTable", response.filteredPredictiveList, "Predictive");
            } else {
                console.error("filteredPredictiveList is empty.");
            }


            if (response?.filteredZTClassificationList?.length > 0) {
                populateTable("#ztClassificationTable", response.filteredZTClassificationList, "ZTClassification");
            } else {
                console.error("filteredZTClassificationList is empty.");
            }

              if (response?.filteredRoutwCauseList?.length > 0) {
                populateTable("#rootCauseTable", response.filteredRoutwCauseList, "RootCause");
            } else {
                console.error("filteredRoutwCauseList is empty.");
            }

               
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });


            }
        }

          function deleteRow(button) {
        $(button).closest("tr").remove();
    }

               function populateTable(tableId, data, type) {
            let tableBody = $(tableId + " tbody");
            tableBody.empty();

            data.forEach((item, index) => {
                  let extraColumns = "";

            if (type === "RootCause") {
                extraColumns = "<td></td><td></td><td></td><td></td><td></td>";
            } else if (type === "Predictive") {
                extraColumns = "<td></td><td></td><td></td><td></td><td></td><td></td>";
            }
                let row = `<tr>
                    <td>${item.value}</td>
                    <td>${item.text}</td>
                    ${extraColumns}
                    <td>


                        <button class="btn btn-danger btn-sm delete-btn" data-id="${item.value}" data-type="${type}">Delete</button>
                    </td>
                </tr>`;
                tableBody.append(row);
            });


              $(".delete-btn").on("click", function () {
            let id = $(this).data("id");
            let type = $(this).data("type");
            console.log(`Delete Clicked for ${type} ID:`, id);
            DeleteItem(id, type, $(this));
        });
            $(".edit-btn").on("click", function () {
                let id = $(this).data("id");
                let type = $(this).data("type");
                console.log(`Edit Clicked for ${type} ID:`, id);
                editItem(id, type);
            });

        }
           function DeleteItem(id, type, button) {
            let tableId = "";

            if (type === "ZTClassification") {
                tableId = "#ztClassificationTable";
            } else if (type === "Predictive") {
                tableId = "#predictiveAnalysisTable";
            } else if (type === "RootCause") {
                tableId = "#rootCauseTable";
            }

            if (tableId) {
                $(button).closest("tr").remove();
            }
        }
           function editItem(id, type) {

                     $.ajax({
                        url: '/ManageForm/GetDynamicDropDawon',
                        type: 'GET',
                        data: { id: id, type: type },
                        success: function (response) {
                            populateDropdown(response.data, id, type);
                              $('#dropdownModal').modal('show');
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                        }
                    });
        }
                function populateDropdown(data, selectedId, type) {
            console.log("Dropdown Data:", data);

            var $dropdown = $('#dynamicDropdown');
            $dropdown.empty();
            $.each(data, function (index, item) {
                var isSelected = item.value == selectedId ? 'selected' : '';
                $dropdown.append(`<option value="${item.value}" ${isSelected}>${item.text}</option>`);
            });

            $(".modal-footer").remove();

            $(".modal-content").append(`
                <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Close</button>

                   <button type="button" class="btn btn-success" onclick="saveSelection('${selectedId}', '${type}')">Save</button>
                </div>
            `);
        }


            function closeModal() {

            $('#dropdownModal').modal('hide');
        }


            function saveSelection(id , type) {

            var selectedValue = $('#dynamicDropdown').val();
            var selectedText = $('#dynamicDropdown option:selected').text();

            if (!id) {
                alert('Error: No row is selected for editing.');
                return;
            }

             if (type === "ZTClassification") {


           $("#ztClassificationTable tbody tr").each(function () {
                var row = $(this);
                var rowId = row.find(".edit-btn").data("id");

                if (rowId == id) {
                    row.find("td:nth-child(2)").text(selectedText);
                }
            });

            } else if (type === "Predictive") {


           $("#predictiveAnalysisTable tbody tr").each(function () {
                var row = $(this);
                var rowId = row.find(".edit-btn").data("id");

                if (rowId == id) {
                    row.find("td:nth-child(2)").text(selectedText);

                }
            });

            } else if (type === "RootCause") {

           $("#rootCauseTable tbody tr").each(function () {
                var row = $(this);
                var rowId = row.find(".edit-btn").data("id");

                if (rowId == id) {
                    row.find("td:nth-child(2)").text(selectedText);

                }
            });
            }



            $('#dropdownModal').modal('hide');
        }


        function editSection(item) {
        $("#editId").val(item.id);
        $("#editCategory").val(item.category);
        $("#editScore").val(item.score);
        $("#editLevel").val(item.level);
        $("#editScorable").val(item.scorable);
        $("#Parameters").val(item.parameters);
        $("#Sub_Parameters").val(item.sub_Parameters);
           var levelText = item.level;  
    var levelValue = levelText.match(/\d+/);

    if (levelValue) {
      $("#editLevel").val(levelValue[0]);  
    } else {
      $("#editLevel").val("");  
    }

        console.log(JSON.stringify(item));
        let selectedRatings = item.ratingid?.split(",").map(r => r.trim()) || [];

        $.ajax({
            url: "/ManageForm/GetDropdownData",
            type: "GET",
            success: function (response) {

                let sectionDropdown = $("#editSection");
                sectionDropdown.empty();
                response.sections.forEach(function (section) {
                    let isSelected = section.name === item.sectionId;
                    sectionDropdown.append(new Option(section.name, section.id, false, isSelected));
                });

            
                let ratingCheckboxes = $("#ratingCheckboxes");
                ratingCheckboxes.empty();
                response.ratings.forEach(function (rating) {
                    let isChecked = selectedRatings.includes(rating.name);
                    let label = $('<label style="display: block; padding: 6px 12px; color: white; cursor: pointer;"></label>');
                    let checkbox = $('<input type="checkbox" class="rating-checkbox" style="margin-right: 6px;" />')
                        .val(rating.name)
                        .prop('checked', isChecked);
                    label.append(checkbox).append(rating.name);
                    ratingCheckboxes.append(label);
                });

                updateSelectedText();

                  $('#editModal').fadeIn();
            },
            error: function (xhr, status, error) {
                console.error("Dropdown load error: " + error);
            }
        });
    }


    document.getElementById("selectedRatings").addEventListener("click", function () {
        let cbContainer = document.getElementById("ratingCheckboxes");
        cbContainer.style.display = cbContainer.style.display === "block" ? "none" : "block";
    });

    document.addEventListener("click", function (e) {
        if (!document.getElementById("ratingDropdown").contains(e.target)) {
            document.getElementById("ratingCheckboxes").style.display = "none";
        }
    });


    document.addEventListener("change", function () {
        updateSelectedText();
    });

    function updateSelectedText() {
        let selected = [];
        document.querySelectorAll("#ratingCheckboxes input[type='checkbox']").forEach(i => {
            if (i.checked) selected.push(i.value);
        });
        document.getElementById("selectedRatings").textContent = selected.length ? selected.join(", ") : "Select Ratings";
    }

             function updateSection() {
        var selectedText = $("#editSection option:selected").text();
        var selectedRatings = [];

        $(".rating-checkbox:checked").each(function () {
            selectedRatings.push($(this).val());
        });

        var ratingDisplay = selectedRatings.join(", ");

        var sectionData = {
            id: $("#editId").val(),
            category: $("#editCategory").val(),
            parameters: $("#Parameters").val(),
            subParameters: $("#Sub_Parameters").val(),
            sectionName: selectedText,
            rating: ratingDisplay,
            scorable: $("#editScorable").val(),
            score: parseFloat($("#editScore").val()) || 0,
            level: $("#editLevel option:selected").text()

        };

        // Use sectionData.rating instead of undefined 'rating'
        var ratingsArray2 = sectionData.rating ? sectionData.rating.split(",") : [];
        var ratingDropdown2 = "<select class='form-control'>";
        ratingsArray2.forEach(function (rating) {
            ratingDropdown2 += "<option>" + rating.trim() + "</option>";
        });
        ratingDropdown2 += "</select>";

        $("#sectionGrid tbody tr").each(function () {
            var row = $(this);
            var rowId = row.find("td:eq(0)").text();

            if (rowId == sectionData.id) {
                row.find("td:eq(1)").text(sectionData.category);
                row.find("td:eq(2)").text(sectionData.parameters);
                row.find("td:eq(3)").text(sectionData.subParameters);
                row.find("td:eq(4)").text(sectionData.sectionName);

                // Use .html() instead of .text() to render dropdown HTML
                row.find("td:eq(5)").html(ratingDropdown2);

                row.find("td:eq(6)").text(sectionData.scorable);
                row.find("td:eq(7)").text(sectionData.score);
                row.find("td:eq(8)").text(sectionData.level);

                return false;
            }
        });
        
    $('#editModal').fadeOut();


    }



        function toggleDropdown() {
            let valueType = $("#DnyvalueType").val();
            if (valueType === "dropdown") {
                $("#dropdownValuesContainer").show();
            } else {
                $("#dropdownValuesContainer").hide();
            }
        }




        function deleteSection(id) {
               if (confirm("Are you sure you want to delete this section?")) {
                        $("#sectionGrid tbody tr").filter(function () {
                    return $(this).find("td:first").text() == id;
                }).remove();

                   }
                   }
</script>