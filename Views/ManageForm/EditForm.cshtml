@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title"> Select process</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="ProgramID">Program Name</label>
                    @Html.DropDownList(
                             "ProgramID",
                             (List<SelectListItem>)ViewBag.ProcessList,
                             "Select Program",
                             new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()" }
                             )
                </div>

            </div>
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="SUBProgramID">Sub Program Name</label>
                    <select name="SUBProgramID" id="SUBProgramID" class="custom-select" onchange="onSubProgramChange()">
                        <option value="">Select Process</option>
                    </select>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4" id="SectionGried" style="display:none">
    <div class="card-header">
        <strong class="card-title"> Section</strong>
    </div>
    <div class="card-body">

        <table id="sectionGrid" class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Category</th>
                    <th>Section Name</th>

                    <th>Scorable</th>
                    <th>Weightage</th>
                    <th>Level</th>

                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>
</div>


<div class="card shadow mb-4" id="DynamicTable" style="display:none">
    <div class="card-header">
        <strong class="card-title"> Dynamic </strong>
    </div>
    <div class="card-body">

        <table id="dynamicGrid" class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Fields Name</th>
                    <th>ValueType</th>
                    <th>value</th>

                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>
</div>


<div id="editModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Section</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editId">

                    <div class="form-group">
                        <label>Category</label>
                        <input type="text" class="form-control" id="editCategory">
                    </div>

                    <div class="form-group">
                        <label>Section</label>
                        <select id="editSection" class="form-control"></select>
                    </div>



                    <div class="form-group">
                        <label>Scorable</label>
                        <select id="editScorable" class="form-control">
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Weightage</label>
                        <input type="text" class="form-control" id="editScore">
                    </div>

                    <div class="form-group">
                        <label>Level</label>

                        <select id="editLevel" class="form-control">
                            <option value="">Select</option>
                            <option value="1">Level 1</option>
                            <option value="2">Level 2</option>
                            <option value="3">Level 3</option>
                        </select>
                    </div>



                    <button type="button" class="btn btn-primary" onclick="updateSection()">Update</button>
                </form>
            </div>
        </div>
    </div>
</div>





<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Root Cause Analysis</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <table id="rootCauseTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>




<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Predictive Analysis</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <table id="predictiveAnalysisTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>



<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">ZT Classification</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <table id="ztClassificationTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>
<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Zero Tolerance Behaviour</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <label><strong>Was there any Zero Tolerance Behaviour identified?</strong></label>
            <div class="form-check form-check-inline" style="margin-left: 75px;">
                <input class="form-check-input" type="checkbox" id="yesCheckbox" name="zeroTolerance" value="Yes">
                <label class="form-check-label" for="yesCheckbox">Yes</label>
            </div>
            <div class="form-check form-check-inline" style="margin-left: 75px;">
                <input class="form-check-input" type="checkbox" id="noCheckbox" name="zeroTolerance" value="No">
                <label class="form-check-label" for="noCheckbox">No</label>
            </div>
            <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="Root_Cause" class="btn btn-primary mt-4">Update</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/jquery.min.js"></script>
<script>



    function onProgramChange() {
        var programId = document.getElementById("ProgramID").value;
        if (programId === "") {
            alert("Select Valid  Program");
            return;

        }

        $("#SectionGried").hide();
        // $("#DynamicTable").hide();
        $.ajax({
            type: "POST",
            data: JSON.stringify({ id: programId }),

            url: "/Admin/GetSUBProcessList",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {

                console.log(response.d);
                var dropdown = $('#SUBProgramID');
                dropdown.empty();
                dropdown.append('<option value="">Select Process</option>');
                response.proces.forEach(function (item) {
                    dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                });

                if (response.proces && response.proces.length > 0) {

                } else {


                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });

    }




    function populateGrid(data) {
        var tableBody = $("#sectionGrid tbody");
        tableBody.empty();
        if (data.length === 0) {
            tableBody.append("<tr><td colspan='10' class='text-center'>No records found</td></tr>");
            return;
        }

        $.each(data, function (index, item) {
            var row = "<tr>" +
                "<td>" + item.id + "</td>" +
                "<td>" + item.category + "</td>" +
                "<td>" + item.sectionName + "</td>" +

                "<td>" + item.scorable + "</td>" +
                "<td>" + item.score + "</td>" +
                "<td>" + item.level + "</td>" +

                "<td>" +
                "<button class='btn btn-primary' onclick='editSection(" + JSON.stringify(item) + ")'>Edit</button> " +
                "<button class='btn btn-danger' onclick='deleteSection(" + item.id + ")'>Delete</button>" +
                "</td>" +
                "</tr>";

            tableBody.append(row);
        });
    }
    function onSubProgramChange() {
        var programId = document.getElementById("ProgramID").value;
        var subProgramId = document.getElementById("SUBProgramID").value;

        if (subProgramId === "") {

            alert("Select Valid Sub Program");

        } else {
            // $.ajax({
            //     type: "POST",
            //     data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
            //     url: "/ManageForm/GetSectionGried",
            //     contentType: "application/json; charset=utf-8",
            //     dataType: "json",
            //     success: function (response) {
            //         $("#SectionGried").show();
            //         populateGrid(response);
            //     },
            //     error: function (xhr, status, error) {
            //         console.error("Error occurred: " + error);
            //     }
            // });

                $.ajax({
        type: "POST",
        data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
        url: "/ManageForm/GetSectionGried",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
            $("#SectionGried").show();

            console.log("Full Response:", response); // Debugging step

            populateGrid(response.sectionGrid);
             if (response?.filteredPredictiveList?.length > 0) {
            populateTable("#predictiveAnalysisTable", response.filteredPredictiveList, "Predictive");
        } else {
            console.error("filteredPredictiveList is empty.");
        }

        // Populate ZT Classification Table
        if (response?.filteredZTClassificationList?.length > 0) {
            populateTable("#ztClassificationTable", response.filteredZTClassificationList, "ZTClassification");
        } else {
            console.error("filteredZTClassificationList is empty.");
        }

          if (response?.filteredRoutwCauseList?.length > 0) {
            populateTable("#rootCauseTable", response.filteredRoutwCauseList, "RootCause");
        } else {
            console.error("filteredRoutwCauseList is empty.");
        }

            if (response?.zeroTolerance === "Yes") {
            $("#yesCheckbox").prop("checked", true);
                } else {
                    $("#noCheckbox").prop("checked", true);
                }
           
        },
        error: function (xhr, status, error) {
            console.error("Error occurred: " + error);
        }
    });


        }
    }
           function populateTable(tableId, data, type) {
        let tableBody = $(tableId + " tbody");
        tableBody.empty(); // Clear previous data

        data.forEach((item, index) => {
            let row = `<tr>
                <td>${item.value}</td>
                <td>${item.text}</td>
                <td>
                    <button class="btn btn-primary btn-sm edit-btn" data-id="${item.value}" data-type="${type}">Edit</button>
                    <button class="btn btn-danger btn-sm delete-btn" data-id="${item.value}" data-type="${type}">Delete</button>
                </td>
            </tr>`;
            tableBody.append(row);
        });

        // Attach event listeners for Edit and Delete buttons
        $(".edit-btn").on("click", function () {
            let id = $(this).data("id");
            let type = $(this).data("type");
            console.log(`Edit Clicked for ${type} ID:`, id);
            editItem(id, type);
        });

        $(".delete-btn").on("click", function () {
            let id = $(this).data("id");
            let type = $(this).data("type");
            console.log(`Delete Clicked for ${type} ID:`, id);
            deleteItem(id, type);
        });
    }

       function editItem(id, type) {
        alert(`Edit function triggered for ${type} ID: ` + id);
        // TODO: Implement actual edit functionality
    }

    function deleteItem(id, type) {
        if (confirm(`Are you sure you want to delete this ${type} item?`)) {
            alert(`Delete function triggered for ${type} ID: ` + id);
            // TODO: Implement actual delete logic (e.g., send an AJAX request to remove it from DB)
        }
    }

    function editSection(item) {
        $("#editId").val(item.id);
        $("#editCategory").val(item.category);
        $("#editScore").val(item.score);
        $("#editLevel").val(item.level);
        $("#editScorable").val(item.scorable);


        let categoryid = item.categoryid;

        console.log("Category ID: " + categoryid);


        $.ajax({
            url: "/ManageForm/GetDropdownData",
            type: "GET",
            success: function (response) {
                var sectionDropdown = $("#editSection");
                sectionDropdown.empty();
                response.sections.forEach(function (section) {
                    let isSelected = section.id == categoryid;
                    sectionDropdown.append(new Option(section.name, section.id, false, isSelected));
                });

                 var LevelDropdown = $("#editLevel");

                    if (LevelDropdown.length) {
                        LevelDropdown.val(LevelDropdown.val());
                    }


                $("#editModal").modal("show");
            },
            error: function (xhr, status, error) {
                console.error("Error fetching dropdown data: " + error);
            }
        });
    }

       function updateSection() {
        var sectionData = {
            Id: $("#editId").val(),
            Category: $("#editCategory").val(),
            SectionId: $("#editSection").val(),
            Scorable: $("#editScorable").val(),
            Score: parseFloat($("#editScore").val()) || 0,
            Level: $("#editLevel").val(),
        };

        var rowId = $("#editId").val();
        var newScore = sectionData.Score;
        var isScorableYes = sectionData.Scorable.toLowerCase() === "yes";

        var totalScore = 0;
        $("#sectionGrid tbody tr").each(function () {
            var rowScorable = $(this).find("td:eq(3)").text().trim().toLowerCase();
            var rowScore = parseFloat($(this).find("td:eq(4)").text().trim()) || 0;
            var currentRowId = $(this).find("td:eq(0)").text().trim();

            if (rowScorable === "yes") {
                if (currentRowId !== rowId) {
                    totalScore += rowScore;
                }
            }
        });
        if (isScorableYes) {
            totalScore += newScore;
        }
        if (totalScore !== 100) {
            alert("Total weightege for Scorable = 'Yes' must be exactly 100! Current Total: " + totalScore);
            return;
        }
        $.ajax({
            type: "POST",
            url: "/ManageForm/UpdateSection",
            contentType: "application/json",
            data: JSON.stringify(sectionData),
            success: function () {
                $("#editModal").modal("hide");
                onSubProgramChange();
            },
            error: function (xhr, status, error) {
                console.error("Error updating section: " + error);
            }
        });
    }

    function toggleDropdown() {
        let valueType = $("#DnyvalueType").val();
        if (valueType === "dropdown") {
            $("#dropdownValuesContainer").show();
        } else {
            $("#dropdownValuesContainer").hide();
        }
    }




    function deleteSection(id) {
           if (confirm("Are you sure you want to delete this section?")) {
               $.ajax({
                   url: "/ManageForm/DeleteSection",
                   type: "POST",
                   contentType: "application/json",
                   data: JSON.stringify({ Id: id }),
                   success: function (response) {
                       if (response.success) {
                           alert("Section deleted successfully!");
                           location.reload();
                       } else {
                           alert("Error deleting section: " + response.message);
                       }
                   },
                   error: function (xhr, status, error) {
                       console.error("Error occurred: " + error);
                       alert("An error occurred while deleting the section.");
                   }
               });
               }
               }
</script>