@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="card shadow mb-4" style="display:none">
    <div class="card-header">
        <strong class="card-title"> Select process</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="ProgramID">Program Name</label>
                    @Html.DropDownList(
                             "ProgramID",
                             (List<SelectListItem>)ViewBag.ProcessList,
                             "Select Program",
                             new { @class = "custom-select", id = "ProgramID", onchange = "onProgramChange()" }
                             )
                </div>

            </div>

            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="SUBProgramID">Sub Program Name</label>
                    <select name="SUBProgramID" id="SUBProgramID" class="custom-select" onchange="onSubProgramChange()">
                        <option value="">Select Process</option>
                    </select>
                </div>

            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="ReplicateModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Select Process For Form Replicate</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label for="ProgramID">Select Location Name</label>
                            @Html.DropDownList(
                                     "Location_ForReplic", // Name should match ID
                                     (List<SelectListItem>)ViewBag.Locations,
                                     "Select Location",
                                     new { @class = "custom-select", id = "Location_ForReplic", onchange = "onLocationChange_ForReplic()" }
                                     )

                        </div>
                    </div>

                </div>
                <div class="row" id="ReplicateProcessDiv" style="display:none">
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label for="ProgramID">Program Name</label>
                            @*   @Html.DropDownList(
                                     "ProgramID_ForReplic",
                                     (List<SelectListItem>)ViewBag.ProcessList,
                                     "Select Program",
                                     new { @class = "custom-select", id = "ProgramID_ForReplic", onchange = "onProgramChange_ForReplic()" }
                                     ) *@


                            <select name="ProgramID_ForReplic" id="ProgramID_ForReplic" class="custom-select" onchange="onProgramChange_ForReplic()">
                                <option value="">Select Process</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label for="SUBProgramID">Sub Program Name</label>
                            <select name="SUBProgramID" id="SUBProgramID_ForReplic" class="custom-select" onchange="onSubProgramChange_ForReplic()">
                                <option value="">Select Process</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <button id="Disableformreplcation" class="btn btn-primary mt-4" style="display:none" onclick="DisabeFormReplicate()">Disable And Replicate</button>
                        </div>
                        <div class="form-group mb-3">
                            <button id="Replicateformreplcation" class="btn btn-primary mt-4" style="display:none" onclick="ReplicateFormReplicate()">Replicate</button>
                        </div>


                    </div>
                </div>






            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4" id="SectionGried">
    <div class="card-header">
        <strong class="card-title"> Section</strong>
        <button id="AddSection" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px">ADD</button>
    </div>
    <div class="card-body">

        <table id="sectionGrid" class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Category</th>
                    <th>Section Name</th>

                    <th>Scorable</th>
                    <th>Weightage</th>
                    <th>Level</th>

                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>
</div>



<div id="editModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Section</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editId">

                    <div class="form-group">
                        <label>Category</label>
                        <input type="text" class="form-control" id="editCategory">
                    </div>

                    <div class="form-group">
                        <label>Section</label>
                        <select id="editSection" class="form-control"></select>
                    </div>



                    <div class="form-group">
                        <label>Scorable</label>
                        <select id="editScorable" class="form-control">
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Weightage</label>
                        <input type="text" class="form-control" id="editScore">
                    </div>

                    <div class="form-group">
                        <label>Level</label>

                        <select id="editLevel" class="form-control">
                            <option value="">Select</option>
                            <option value="1">Level 1</option>
                            <option value="2">Level 2</option>
                            <option value="3">Level 3</option>
                        </select>
                    </div>



                    <button type="button" class="btn btn-primary" onclick="updateSection()">Update</button>
                </form>
            </div>
        </div>
    </div>
</div>





<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Root Cause Analysis</strong>
        <button id="RoouAdd" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px" onclick="AddDropDawon('rootcause')">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="rootCauseTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Value</th>
                        <th>Controllable</th>
                        <th>RCA 1</th>
                        <th>RCA 2</th>
                        <th>RCA 3</th>
                        <th>Comments Section</th>

                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>




<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Predictive Analysis</strong>
        <button id="PredictiveAdd" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px" onclick="AddDropDawon('predictive')">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="predictiveAnalysisTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Value</th>
                        <th>Predictive - NPS</th>
                        <th>Predictive - FCR</th>
                        <th>Predictive - Repeat</th>
                        <th>Predictive - Sales effort</th>
                        <th>Predictive - Collection effort</th>
                        <th>Predictive - Probable escalation</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>



<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">ZT Classification</strong>
        <button id="ZTAdd" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px" onclick="AddDropDawon('ztclassification')">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="ztClassificationTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>




<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Agent List</strong>
        <button id="AddAgent" class="btn btn-primary mt-4" style="margin-bottom:20px;margin-left:50px">ADD</button>

    </div>
    <div class="card-body">
        <div class="row">
            <table id="agentTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th style="display:none">ID</th>
                        <th>Emp Name</th>
                        <th>Emp Code</th>
                        <th>TL Name</th>
                        <th>TL Code</th>
                        <th>QA Name</th>
                        <th>Batch ID</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>
</div>


<!-- Bootstrap Modal -->
<div class="modal fade" id="agentModal" tabindex="-1" aria-labelledby="agentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="agentModalLabel">Add Agent</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="agentForm">
                    <div class="mb-3">
                        <label for="empName" class="form-label">Emp Name</label>
                        <input type="text" class="form-control" id="empName" required>
                    </div>
                    <div class="mb-3">
                        <label for="empCode" class="form-label">Emp Code</label>
                        <input type="text" class="form-control" id="empCode" required>
                    </div>
                    <div class="mb-3">
                        <label for="tlName" class="form-label">TL Name</label>
                        <input type="text" class="form-control" id="tlName" required>
                    </div>
                    <div class="mb-3">
                        <label for="tlCode" class="form-label">TL Code</label>
                        <input type="text" class="form-control" id="tlCode" required>
                    </div>
                    <div class="mb-3">
                        <label for="qaName" class="form-label">QA Name</label>
                        <input type="text" class="form-control" id="qaName" required>
                    </div>
                    <div class="mb-3">
                        <label for="batchID" class="form-label">Batch ID</label>
                        <input type="text" class="form-control" id="batchID" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveAgent">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header">
        <strong class="card-title">Zero Tolerance Behaviour</strong>
    </div>
    <div class="card-body">
        <div class="row">
            <label><strong>Was there any Zero Tolerance Behaviour identified?</strong></label>
            <div class="form-check form-check-inline" style="margin-left: 75px;">
                <input class="form-check-input" type="checkbox" id="yesCheckbox" name="zeroTolerance" value="Yes">
                <label class="form-check-label" for="yesCheckbox">Yes</label>
            </div>
            <div class="form-check form-check-inline" style="margin-left: 75px;">
                <input class="form-check-input" type="checkbox" id="noCheckbox" name="zeroTolerance" value="No">
                <label class="form-check-label" for="noCheckbox">No</label>
            </div>

        </div>
    </div>
</div>


<div class="card shadow mb-4">
    <div class="card-header">
    </div>
    <div class="card-body">
        <div class="row">

            <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="UpdateDynamicAllFeilds" class="btn btn-primary mt-4">Update</button>
                </div>
            </div>
           <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="Disableform" class="btn btn-primary mt-4" onclick="ActiveForm()">Active</button>
                </div>
            </div>
            @*
            <div class="col-md-2">
                <div class="form-group mb-3">
                    <button id="Disableform" class="btn btn-primary mt-4" onclick="ReplicateForm()">Replicate-Form</button>
                </div>
            </div> *@
        </div>
    </div>
</div>

<div class="modal fade" id="dropdownModal" tabindex="-1" aria-labelledby="dropdownModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dropdownModalLabel">Select an Option</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="dynamicDropdown">Select Item:</label>
                <select id="dynamicDropdown" class="form-control">
                    <option value="">Loading...</option>
                </select>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="dropdownModalADD" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select an Option</h5>
                <button type="button" class="close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <label for="dropdownSelect">Select:</label>
                <select id="dropdownSelect" class="form-control"></select>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addSectionModal" tabindex="-1" role="dialog" aria-labelledby="addSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSectionModalLabel">Add Section</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="sectionForm">
                    <div class="form-group">
                        <label>Category</label>
                        <input type="text" class="form-control" id="category" required>
                    </div>
                    <div class="form-group">
                        <label>Section Name</label>
                        @Html.DropDownList("Section_ID", (List<SelectListItem>)ViewBag.Section_Category, "Select Section", new { @class = "custom-select", id = "Section_ID" })
                    </div>
                    <div class="form-group">
                        <label>Scorable</label>
                        <select class="form-control" id="scorable">
                            <option value="">Select</option>
                            <option value="Yes">YES</option>
                            <option value="No">NO</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Weightage</label>
                        <input type="number" class="form-control" id="score" required>
                    </div>
                    <div class="form-group">
                        <label>Level</label>
                        <select id="LevelDropdown" class="custom-select">
                            <option value="">Select</option>
                            <option value="1">Level 1</option>
                            <option value="2">Level 2</option>
                            <option value="3">Level 3</option>
                        </select>
                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveSection">Add</button>
            </div>
        </div>
    </div>
</div>


<script src="~/js/jquery.min.js"></script>


<script>
        $(document).ready(function () {

        $("#AddAgent").click(function () {
            $("#agentModal").modal("show");
        });
         $(".btn-close, .btn-secondary").click(function () {
        $("#agentModal").modal("hide");
    });

        $("#saveAgent").click(function () {
       
            var empName = $("#empName").val();
            var empCode = $("#empCode").val();
            var tlName = $("#tlName").val();
            var tlCode = $("#tlCode").val();
            var qaName = $("#qaName").val();
            var batchID = $("#batchID").val();

    
            if (!empName || !empCode || !tlName || !tlCode || !qaName || !batchID) {
                alert("All fields are required!");
                return;
            }

            var newID = Math.floor(Math.random() * 10000);

       
            var newRow = `<tr>
                <td style="display:none">${newID}</td>
                <td>${empName}</td>
                <td>${empCode}</td>
                <td>${tlName}</td>
                <td>${tlCode}</td>
                <td>${qaName}</td>
                <td>${batchID}</td>
                <td><button class="btn btn-danger btn-sm removeAgent">Remove</button></td>
            </tr>`;

         
            $("#agentTable tbody").append(newRow);

       
            $("#agentModal").modal("hide");

       
            $("#agentForm")[0].reset();
        });

 
        $("#agentTable").on("click", ".removeAgent", function () {
            $(this).closest("tr").remove();
        });
    });

</script>
<script>

           function onLocationChange_ForReplic() {
        var programId = document.getElementById("Location_ForReplic").value;
        if (programId === "") {
            alert("Select a Valid Location");
            return;
        }

        console.log("Test " + programId);
        $.ajax({
            type: "POST",
            url: "/ManageForm/GetProcessListAsync",
            data: JSON.stringify({ id: programId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
                console.log("Success:", response);

                var dropdown = $('#ProgramID_ForReplic');
                dropdown.empty();
                dropdown.append('<option value="">Select Process</option>');

                // Ensure the response contains processList and it is an array
                if (response.success && Array.isArray(response.processList)) {
                    response.processList.forEach(function(item) {
                        dropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                    });
                } else {
                    console.error("Error: processList is missing or not an array");
                }
                $("#ReplicateProcessDiv").show();
            },
            error: function(xhr, status, error) {
                console.error("Error:", xhr.status, xhr.statusText, error);
            }
        });
    }

</script>

<script>




        $(document).ready(function () {
        var sectionData = [];

        $("#AddSection").click(function () {
            $("#addSectionModal").modal("show");
        });

        $("#saveSection").click(function () {
            var category = $("#category").val();
            var sectionName = $("#Section_ID").val();
            var scorable = $("#scorable").val();
            var score = parseInt($("#score").val()) || 0;
            var level = $("#LevelDropdown").val();
            if (category === "") {
            alert("Please enter a category.");
            return;
        }
        if (sectionName === "" || sectionName === "Select Section") {
            alert("Please select a section.");
            return;
        }
        if (scorable === "") {
            alert("Please select Scorable (Yes/No).");
            return;
        }

        if (score === "" || isNaN(score) || parseInt(score) <= 0) {
            alert("Please enter a valid weightage greater than 0.");
            return;
        }

            if (scorable === "Yes" && score >= 100) {
                alert("Weightage must be less than 100 if Scorable is YES.");
                return;
            }


            if (scorable === "Yes" && (score > 100)) {
                alert("Total Weightage of all Scorable YES Weightage cannot exceed 100.");
                return;
            }
           var sectionText = $("#Section_ID option:selected").text();


            var newSection = {
                id: sectionData.length + 1,
                category: category,
                sectionName: sectionText,
                scorable: scorable,
                score: score,
                level: level
            };

            sectionData.push(newSection);
            console.log(JSON.stringify(sectionData));
      var totalWeightage = 0;
              $("#sectionGrid tbody tr").each(function () {
        var rowScorable = $(this).find("td:eq(3)").text().trim().toLowerCase(); // "Scorable" column (4th column, index 3)
        var rowScore = parseFloat($(this).find("td:eq(4)").text().trim()); // "Weightage" column (5th column, index 4)

        if (rowScorable === "yes" && !isNaN(rowScore)) {
            totalWeightage += rowScore;
        }
    });

    var score = parseInt($("#score").val()) || 0; // Get the entered score


    if (scorable === "Yes" && (totalWeightage + score > 100)) {
        alert("The total weightage of all 'Scorable: YES' sections cannot exceed 100. Current total after addition: " + (totalWeightage + score));
        return;
    }


            var tableBody = $("#sectionGrid tbody");
            var row = "<tr>" +
                "<td>" + newSection.id + "</td>" +
                "<td>" + newSection.category + "</td>" +
                "<td>" + newSection.sectionName + "</td>" +
                "<td>" + newSection.scorable + "</td>" +
                "<td>" + newSection.score + "</td>" +
                "<td>" + newSection.level + "</td>" +
                "<td>" +
                "<button class='btn btn-primary' onclick='editSection(" + JSON.stringify(newSection) + ")'>Edit</button> " +
                "<button class='btn btn-danger' onclick='deleteSection(" + newSection.id + ")'>Delete</button>" +
                "</td>" +
                "</tr>";

            tableBody.append(row);


            $("#addSectionModal").modal("hide");
            $("#sectionForm")[0].reset();
        });
    });


</script>


<script>





    function ReplicateFormReplicate()
    {
         var programId = document.getElementById("ProgramID_ForReplic").value;
        var subProgramId = document.getElementById("SUBProgramID_ForReplic").value;

           var ProcessIDOLD = document.getElementById("ProgramID").value;
        var SUBProcessIDOLD = document.getElementById("SUBProgramID").value;

        if (subProgramId === "") {

            alert("Select Valid Sub Program");

        } else {


                  $.ajax({
                        type: "POST",
                        data: JSON.stringify({ ProcessIDOLD: ProcessIDOLD, SUBProcessIDOLD: SUBProcessIDOLD , ProcessID: programId , SUBProcessID: subProgramId  }),
                        url: "/ManageForm/FormReplication",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                             if (response.success && response.data === 1) {
                                 alert("Form Is Replicated Successfully...!");
                                  window.location.href = "/ManageForm/FormBuilder";
                                 $('#ReplicateModal').modal('hide');
                        } else {
                            alert("Failed to Replicated the form. Please try again.");
                        }

                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                });


        }
    }
    function DisabeFormReplicate()
    {
         var programId = document.getElementById("ProgramID_ForReplic").value;
        var subProgramId = document.getElementById("SUBProgramID_ForReplic").value;

           var ProcessIDOLD = document.getElementById("ProgramID").value;
        var SUBProcessIDOLD = document.getElementById("SUBProgramID").value;

        if (subProgramId === "") {

            alert("Select Valid Sub Program");

        } else {

                $.ajax({
                        type: "POST",
                        data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
                        url: "/ManageForm/Formdisable",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                             if (response.success && response.data === 1) {

                        } else {
                            alert("Failed to disable the form. Please try again.");
                        }

                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                });

                  $.ajax({
                        type: "POST",
                        data: JSON.stringify({ ProcessIDOLD: ProcessIDOLD, SUBProcessIDOLD: SUBProcessIDOLD , ProcessID: programId , SUBProcessID: subProgramId  }),
                        url: "/ManageForm/FormReplication",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                             if (response.success && response.data === 1) {
                                 alert("Form Is Replicated Successfully...!");
                         window.location.href = "/ManageForm/FormBuilder";
                                 $('#ReplicateModal').modal('hide');
                        } else {
                            alert("Failed to Replicated the form. Please try again.");
                        }

                        },
                        error: function (xhr, status, error) {
                            console.error("Error occurred: " + error);
                        }
                });


        }

    }
    function onSubProgramChange_ForReplic()
    {

    var programId = document.getElementById("ProgramID_ForReplic").value;
           var subProgramId = document.getElementById("SUBProgramID_ForReplic").value;

           if (subProgramId === "") {

               alert("Select Valid Sub Program");

           } else {


       $.ajax({
           type: "POST",
           data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
           url: "/ManageForm/CheckIsFormvaialableOrNot",
           contentType: "application/json; charset=utf-8",
           dataType: "json",
           success: function (response) {

                     if (response.data === 1) {

                           alert("For this Program And Sub Program Form Is Already created,...!");
                           $("#Disableformreplcation").show();
                            $("#Replicateformreplcation").hide();
                     }
                     else
                     {
                            $("#Replicateformreplcation").show();
                              $("#Disableformreplcation").hide();

                     }

           },
           error: function (xhr, status, error) {
               console.error("Error occurred: " + error);
           }
       });


           }
    }

    function ReplicateForm()
    {
         $('#ReplicateModal').modal('show');
    }



    function onProgramChange_ForReplic() {
        var programId = document.getElementById("ProgramID_ForReplic").value;
        if (programId === "") {
            alert("Select Valid  Program");
            return;

        }
        $.ajax({
            type: "POST",
            data: JSON.stringify({ id: programId }),

            url: "/Admin/GetSUBProcessList",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {

                console.log(response.d);
                var dropdown = $('#SUBProgramID_ForReplic');
                dropdown.empty();
                dropdown.append('<option value="">Select Process</option>');
                response.proces.forEach(function (item) {
                    dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                });


            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });

    }




    $(document).ready(function () {
         var programId = "@ViewBag.ProgramId";
        var subProgramId = "@ViewBag.SubProgramId";

        $("#ProgramID").val(programId).trigger("change");

        setTimeout(function () {
            if (subProgramId) {
                $("#SUBProgramID").val(subProgramId).trigger("change");


                onSubProgramChange();
            }
        }, 500);
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const yesCheckbox = document.getElementById("yesCheckbox");
        const noCheckbox = document.getElementById("noCheckbox");

        yesCheckbox.addEventListener("change", function () {
            if (this.checked) {
                noCheckbox.checked = false;
            }
        });

        noCheckbox.addEventListener("change", function () {
            if (this.checked) {
                yesCheckbox.checked = false;
            }
        });
    });
</script>

<script>


            $(document).ready(function () {
            $("#UpdateDynamicAllFeilds").click(function () {


                    var sectionDataSection = [];
        var totalWeightageSection = 0;

        $("#sectionGrid tbody tr").each(function () {
            var rowScorable = $(this).find("td:eq(3)").text().trim().toLowerCase();
            var rowScore = parseFloat($(this).find("td:eq(4)").text().trim());

            if (rowScorable === "yes" && !isNaN(rowScore)) {
                totalWeightageSection += rowScore;
            }

             let programID = $("#ProgramID").val();
            let subProgramID = $("#SUBProgramID").val();
            var section2 = {

                Category: $(this).find("td:eq(1)").text().trim(),
                Section: $(this).find("td:eq(2)").text().trim(),
                Scorable: $(this).find("td:eq(3)").text().trim(),
                Score: isNaN(rowScore) ? 0 : rowScore,
                Level: $(this).find("td:eq(5)").text().trim(),
                ProgramID:programID,
                SubProgramID:subProgramID
            };

            sectionDataSection.push(section2);
        });


                if (totalWeightageSection != 100) {
                    alert("The total weightage of all 'Scorable: YES' weightage cannot exceed 100. Current total after addition: " + totalWeightageSection);
                    return;
                }

        console.log(JSON.stringify(sectionDataSection));
        var requestData = { sections: sectionDataSection }; // Wrap the array inside an object

                    $.ajax({
                    url: "/ManageForm/UpdatesecionGriedReplicatedForm",
                    type: "POST",
                    contentType: "application/json",
                     data: JSON.stringify(requestData),
                    success: function (response) {

                    },
                    error: function (xhr, status, error) {
                        alert("Error: " + xhr.responseText);
                        return;
                        console.log(xhr);
                    }
                });


                var rootCauseValues = collectTableValues("#rootCauseTable");
                var predictiveValues = collectTableValues("#predictiveAnalysisTable");
                var ztClassificationValues = collectTableValues("#ztClassificationTable");
                var zeroTolerance = $("input[name='zeroTolerance']:checked").val() || "No";
               var programId = document.getElementById("ProgramID").value;
            var subProgramId = document.getElementById("SUBProgramID").value;
                var data = {
                    Root_Cause_Analysis: rootCauseValues,
                    Predictive_Analysis: predictiveValues,
                    ZT_Classification: ztClassificationValues,
                    Zero_Tolerance: zeroTolerance,
                    programId:programId,
                    subProgramId:subProgramId,
                     IsActive: 1,
                    CreatedBy: "Admin",
                    UpdatedBy: "Admin",
                    CreatedDate: new Date().toISOString()
                };

                console.log("Final Data:", data);

                $.ajax({
                    url: "/ManageForm/UpdateDynamicFieldsReplicatedForm",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(data),
                    success: function (response) {
                        alert("Form Edited  successfully!");
                         window.location.href = "/ManageForm/FormBuilder";
                    },
                    error: function (xhr, status, error) {
                        console.error("Error inserting data:", error);
                    }
                });


                var agentData = [];

             let programID_2 = $("#ProgramID").val();
            let subProgramID_2 = $("#SUBProgramID").val();
       
            $("#agentTable tbody tr").each(function () {
                var row = $(this).find("td");
                var agent = {
                    ID: $(row[0]).text().trim(),
                    EmpName: $(row[1]).text().trim(),
                    EmpCode: $(row[2]).text().trim(),
                    TL_Name: $(row[3]).text().trim(),
                    TL_Code: $(row[4]).text().trim(),
                    QA_Name: $(row[5]).text().trim(),
                    Batch_ID: $(row[6]).text().trim(),
                                    programId:programID_2,
                    subProgramId: subProgramID_2
                    };
                agentData.push(agent);
            });

            console.log(agentData); // Debugging output

            $.ajax({
                type: "POST",
                url: "/ManageForm/SaveAgents",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({ agents: agentData }),  // Wrap inside an object
                success: function (response) {
                    alert("Form Edited  successfully!");
                         window.location.href = "/ManageForm/FormBuilder";
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });


            });
        });

        function ActiveForm()
        {
             var programId = document.getElementById("ProgramID").value;
            var subProgramId = document.getElementById("SUBProgramID").value;

            if (subProgramId === "") {

                alert("Select Valid Sub Program");

            } else {


                    $.ajax({
            type: "POST",
            data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
            url: "/ManageForm/ActivateReplicatedFormByID",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                
                alert("Success! Form has been Activated.");
                 window.location.href = "/ManageForm/FormBuilder";
          
            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });


            }
        }
        function collectTableValues(tableId) {
            var values = [];
            $(tableId + " tbody tr").each(function () {
                var value = $(this).find("td:nth-child(1)").text().trim();
                if (value) {
                    values.push(value);
                }
            });
            return values.join(",");
        }



             function AddDropDawon(type) {
            $.ajax({
                url: '/ManageForm/GetDynamicDropDawon',
                type: 'GET',
                data: { id: 1, type: type },
                success: function (response) {
                    if (response.success) {
                        ADDDropdown(response.data, type);
                        $('#dropdownModalADD').modal('show'); // Show modal
                    } else {
                        alert('Failed to fetch data!');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }

        function ADDDropdown(data, type) {
            console.log("Dropdown Data:", data);

            var $dropdown = $('#dropdownSelect');
            $dropdown.empty(); // Clear old options

            $.each(data, function (index, item) {
                $dropdown.append(`<option value="${item.value}">${item.text}</option>`);
            });

            $(".modal-footer").remove();
             var $modalContent = $('#dropdownModalADD .modal-content, #dropdownModal .modal-content');

            $modalContent.append(`
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal2()">Close</button>
                <button type="button" class="btn btn-success" onclick="ADDSelection('${type}')">ADD</button>
            </div>
        `);
        }

        function ADDSelection(type) {
            var selectedValue = $('#dropdownSelect').val();
            var selectedText = $('#dropdownSelect option:selected').text();

            if (!selectedValue) {
                alert('Please select a value!');
                return;
            }

            var tableId = "";
            switch (type) {
                case "ztclassification":
                    tableId = "#ztClassificationTable";
                    break;
                case "predictive":
                    tableId = "#predictiveAnalysisTable";
                    break;
                case "rootcause":
                    tableId = "#rootCauseTable";
                    break;
                default:
                    alert("Invalid type");
                    return;
            }

            var isDuplicate = false;
        $(tableId + " tbody tr").each(function () {
            var existingValue = $(this).find("td:first").text().trim();
            if (existingValue === selectedValue) {
                isDuplicate = true;
                return false; // Exit loop early
            }
        });

        if (isDuplicate) {
            alert("This item is already added to the list.");
            return;
        }
         let extraColumns = "";
        if (type.toLowerCase() === "rootcause") {
            extraColumns = "<td></td><td></td><td></td><td></td><td></td>";
        } else if (type.toLowerCase() === "predictive") {
            extraColumns = "<td></td><td></td><td></td><td></td><td></td><td></td>";
        }
            $(tableId + " tbody").append(`

                <tr>
                    <td>${selectedValue}</td>
                    <td>${selectedText}</td>
                    ${extraColumns}
                        <td>

                <button class='btn btn-danger btn-sm' onclick='deleteSection(${selectedValue})'>Delete</button>
            </td>
                </tr>
            `);

            $('#dropdownModalADD').modal('hide'); // Close modal
        }

        function closeModal2() {
            $('#dropdownModalADD').modal('hide');
        }



        function onProgramChange() {
            var programId = document.getElementById("ProgramID").value;
            if (programId === "") {
                alert("Select Valid  Program");
                return;

            }

            $("#SectionGried").hide();
            // $("#DynamicTable").hide();
            $.ajax({
                type: "POST",
                data: JSON.stringify({ id: programId }),

                url: "/Admin/GetSUBProcessList",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {

                    console.log(response.d);
                    var dropdown = $('#SUBProgramID');
                    dropdown.empty();
                    dropdown.append('<option value="">Select Process</option>');
                    response.proces.forEach(function (item) {
                        dropdown.append('<option value="' + item.value + '">' + item.text.split(',')[0] + '</option>');
                    });

                    if (response.proces && response.proces.length > 0) {

                    } else {


                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                }
            });

        }




        function populateGrid(data) {
            var tableBody = $("#sectionGrid tbody");
            tableBody.empty();
            if (data.length === 0) {
                tableBody.append("<tr><td colspan='10' class='text-center'>No records found</td></tr>");
                return;
            }
            console.log(JSON.stringify(data));
            $.each(data, function (index, item) {
                var row = "<tr>" +
                    "<td>" + item.id + "</td>" +
                    "<td>" + item.category + "</td>" +
                    "<td>" + item.sectionName + "</td>" +

                    "<td>" + item.scorable + "</td>" +
                    "<td>" + item.score + "</td>" +
                    "<td>" + item.level + "</td>" +

                    "<td>" +
                    "<button class='btn btn-primary' onclick='editSection(" + JSON.stringify(item) + ")'>Edit</button> " +
                    "<button class='btn btn-danger' onclick='deleteSection(" + item.id + ")'>Delete</button>" +
                    "</td>" +
                    "</tr>";

                tableBody.append(row);
            });
        }
        function onSubProgramChange() {
            var programId = document.getElementById("ProgramID").value;
            var subProgramId = document.getElementById("SUBProgramID").value;

            if (subProgramId === "") {

                alert("Select Valid Sub Program");

            } else {


                    $.ajax({
            type: "POST",
            data: JSON.stringify({ ProcessID: programId, SUBProcessID: subProgramId }),
            url: "/ManageForm/GetSectionGriedForReplicateForm",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                $("#SectionGried").show();

                console.log("Full Response:", response);


                 if (response.agentgried && response.agentgried.length > 0) {
                    var tbody = $("#agentTable tbody");
                    tbody.empty(); // Clear existing rows

                        $.each(response.agentgried, function (index, agent) {
                        var row = `<tr>
                            <td style="display:none" >${agent.id}</td>
                            <td>${agent.empName}</td>
                            <td>${agent.empCode}</td>
                            <td>${agent.tL_Name}</td>
                            <td>${agent.tL_Code}</td>
                            <td>${agent.qA_Name}</td>
                                     <td>${agent.batch_ID}</td>
                                           <td><button class="btn btn-danger btn-sm removeAgent">Remove</button></td>
                        </tr>`;
                        tbody.append(row);
                    });
                } else {
                    $("#agentTable tbody").html("<tr><td colspan='6' class='text-center'>No Data Found</td></tr>");
                }

                populateGrid(response.sectionGrid);
                 if (response?.filteredPredictiveList?.length > 0) {
                populateTable("#predictiveAnalysisTable", response.filteredPredictiveList, "Predictive");
            } else {
                console.error("filteredPredictiveList is empty.");
            }


            if (response?.filteredZTClassificationList?.length > 0) {
                populateTable("#ztClassificationTable", response.filteredZTClassificationList, "ZTClassification");
            } else {
                console.error("filteredZTClassificationList is empty.");
            }

              if (response?.filteredRoutwCauseList?.length > 0) {
                populateTable("#rootCauseTable", response.filteredRoutwCauseList, "RootCause");
            } else {
                console.error("filteredRoutwCauseList is empty.");
            }

                if (response?.zeroTolerance === "Yes") {
                $("#yesCheckbox").prop("checked", true);
                    } else {
                        $("#noCheckbox").prop("checked", true);
                    }

            },
            error: function (xhr, status, error) {
                console.error("Error occurred: " + error);
            }
        });


            }
        }
               function populateTable(tableId, data, type) {
            let tableBody = $(tableId + " tbody");
            tableBody.empty();

            data.forEach((item, index) => {
                  let extraColumns = "";

            if (type === "RootCause") {
                extraColumns = "<td></td><td></td><td></td><td></td><td></td>";
            } else if (type === "Predictive") {
                extraColumns = "<td></td><td></td><td></td><td></td><td></td><td></td>";
            }
                let row = `<tr>
                    <td>${item.value}</td>
                    <td>${item.text}</td>
                    ${extraColumns}
                    <td>


                        <button class="btn btn-danger btn-sm delete-btn" data-id="${item.value}" data-type="${type}">Delete</button>
                    </td>
                </tr>`;
                tableBody.append(row);
            });


              $(".delete-btn").on("click", function () {
            let id = $(this).data("id");
            let type = $(this).data("type");
            console.log(`Delete Clicked for ${type} ID:`, id);
            DeleteItem(id, type, $(this));
        });
            $(".edit-btn").on("click", function () {
                let id = $(this).data("id");
                let type = $(this).data("type");
                console.log(`Edit Clicked for ${type} ID:`, id);
                editItem(id, type);
            });

        }
           function DeleteItem(id, type, button) {
            let tableId = "";

            if (type === "ZTClassification") {
                tableId = "#ztClassificationTable";
            } else if (type === "Predictive") {
                tableId = "#predictiveAnalysisTable";
            } else if (type === "RootCause") {
                tableId = "#rootCauseTable";
            }

            if (tableId) {
                $(button).closest("tr").remove();
            }
        }
           function editItem(id, type) {

                     $.ajax({
                        url: '/ManageForm/GetDynamicDropDawon',
                        type: 'GET',
                        data: { id: id, type: type },
                        success: function (response) {
                            populateDropdown(response.data, id, type);
                              $('#dropdownModal').modal('show');
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                        }
                    });
        }
                function populateDropdown(data, selectedId, type) {
            console.log("Dropdown Data:", data);

            var $dropdown = $('#dynamicDropdown');
            $dropdown.empty();
            $.each(data, function (index, item) {
                var isSelected = item.value == selectedId ? 'selected' : '';
                $dropdown.append(`<option value="${item.value}" ${isSelected}>${item.text}</option>`);
            });

            $(".modal-footer").remove();

            $(".modal-content").append(`
                <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Close</button>

                   <button type="button" class="btn btn-success" onclick="saveSelection('${selectedId}', '${type}')">Save</button>
                </div>
            `);
        }


            function closeModal() {

            $('#dropdownModal').modal('hide');
        }


            function saveSelection(id , type) {

            var selectedValue = $('#dynamicDropdown').val();
            var selectedText = $('#dynamicDropdown option:selected').text();

            if (!id) {
                alert('Error: No row is selected for editing.');
                return;
            }

             if (type === "ZTClassification") {


           $("#ztClassificationTable tbody tr").each(function () {
                var row = $(this);
                var rowId = row.find(".edit-btn").data("id");

                if (rowId == id) {
                    row.find("td:nth-child(2)").text(selectedText);
                }
            });

            } else if (type === "Predictive") {


           $("#predictiveAnalysisTable tbody tr").each(function () {
                var row = $(this);
                var rowId = row.find(".edit-btn").data("id");

                if (rowId == id) {
                    row.find("td:nth-child(2)").text(selectedText);

                }
            });

            } else if (type === "RootCause") {

           $("#rootCauseTable tbody tr").each(function () {
                var row = $(this);
                var rowId = row.find(".edit-btn").data("id");

                if (rowId == id) {
                    row.find("td:nth-child(2)").text(selectedText);

                }
            });
            }



            $('#dropdownModal').modal('hide');
        }


        function editSection(item) {
            $("#editId").val(item.id);
            $("#editCategory").val(item.category);
            $("#editScore").val(item.score);
            $("#editLevel").val(item.level);
            $("#editScorable").val(item.scorable);


            let categoryid = item.categoryid;

            console.log("Category ID: " + categoryid);


            $.ajax({
                url: "/ManageForm/GetDropdownData",
                type: "GET",
                success: function (response) {
                    var sectionDropdown = $("#editSection");
                    sectionDropdown.empty();
                    response.sections.forEach(function (section) {
                        let isSelected = section.id == categoryid;
                        sectionDropdown.append(new Option(section.name, section.id, false, isSelected));
                    });

                     var LevelDropdown = $("#editLevel");

                        if (LevelDropdown.length) {
                            LevelDropdown.val(LevelDropdown.val());
                        }


                    $("#editModal").modal("show");
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching dropdown data: " + error);
                }
            });
        }

        function updateSection() {
                var selectedText = $("#editSection option:selected").text();
        console.log(selectedText);

        var sectionData = {
            id: $("#editId").val(),
            category: $("#editCategory").val(),
                sectionName: selectedText, // Corrected key
            scorable: $("#editScorable").val(),
            score: parseFloat($("#editScore").val()) || 0,
            level: $("#editLevel").val(),
        };

        // Find and update the correct row
        $("#sectionGrid tbody tr").each(function () {
            var row = $(this);
            var rowId = row.find("td:first").text(); // Get the ID from the first column

            if (rowId == sectionData.id) {
                // Update the row values
                row.find("td:eq(1)").text(sectionData.category);
                row.find("td:eq(2)").text(sectionData.sectionName);
                row.find("td:eq(3)").text(sectionData.scorable);
                row.find("td:eq(4)").text(sectionData.score);
                row.find("td:eq(5)").text(sectionData.level);

                return false; // Stop looping after finding and updating the row
            }
        });

        // Close the modal after updating
        $("#editModal").modal("hide");
    }


        //    function updateSection() {
        //     var sectionData = {
        //         Id: $("#editId").val(),
        //         Category: $("#editCategory").val(),
        //         SectionId: $("#editSection").val(),
        //         Scorable: $("#editScorable").val(),
        //         Score: parseFloat($("#editScore").val()) || 0,
        //         Level: $("#editLevel").val(),
        //     };


        //      $("#sectionGrid tbody tr").each(function () {
        //     var row = $(this);
        //     var rowId = row.find("td:first").text(); // Get the ID from the first column

        //     if (rowId == updatedSection.id) {
        //         // Update the row values
        //         row.find("td:eq(1)").text(updatedSection.category);
        //         row.find("td:eq(2)").text(updatedSection.sectionName);
        //         row.find("td:eq(3)").text(updatedSection.scorable);
        //         row.find("td:eq(4)").text(updatedSection.score);
        //         row.find("td:eq(5)").text(updatedSection.level);

        //         return false; // Stop looping once the correct row is found and updated
        //     }
        // });

        // // Close the modal after updating
        // $("#editModal").modal("hide");
        //     // var rowId = $("#editId").val();
        //     // var newScore = sectionData.Score;
        //     // var isScorableYes = sectionData.Scorable.toLowerCase() === "yes";

        //     // var totalScore = 0;
        //     // $("#sectionGrid tbody tr").each(function () {
        //     //     var rowScorable = $(this).find("td:eq(3)").text().trim().toLowerCase();
        //     //     var rowScore = parseFloat($(this).find("td:eq(4)").text().trim()) || 0;
        //     //     var currentRowId = $(this).find("td:eq(0)").text().trim();

        //     //     if (rowScorable === "yes") {
        //     //         if (currentRowId !== rowId) {
        //     //             totalScore += rowScore;
        //     //         }
        //     //     }
        //     // });
        //     // if (isScorableYes) {
        //     //     totalScore += newScore;
        //     // }
        //     // if (totalScore !== 100) {
        //     //     alert("Total weightege for Scorable = 'Yes' must be exactly 100! Current Total: " + totalScore);
        //     //     return;
        //     // }
        //     // $.ajax({
        //     //     type: "POST",
        //     //     url: "/ManageForm/UpdateSection",
        //     //     contentType: "application/json",
        //     //     data: JSON.stringify(sectionData),
        //     //     success: function () {
        //     //         $("#editModal").modal("hide");
        //     //         onSubProgramChange();
        //     //     },
        //     //     error: function (xhr, status, error) {
        //     //         console.error("Error updating section: " + error);
        //     //     }
        //     // });
        // }

        function toggleDropdown() {
            let valueType = $("#DnyvalueType").val();
            if (valueType === "dropdown") {
                $("#dropdownValuesContainer").show();
            } else {
                $("#dropdownValuesContainer").hide();
            }
        }




        function deleteSection(id) {
               if (confirm("Are you sure you want to delete this section?")) {
                        $("#sectionGrid tbody tr").filter(function () {
                    return $(this).find("td:first").text() == id;
                }).remove();
                  
                   }
                   }
</script>